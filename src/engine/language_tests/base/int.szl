# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

one: int;
two: int;
three: int;
minusthree: int;
seven: int;

# not initialized to avoid constant folding.
one = 1;
two = 2;
three = 3;
seven = 7;
minusthree = -3;

assert(1 == one);
assert(one + one + one == three);
assert(-three == minusthree);
assert(seven - three == three + one);
assert(two * three + one == seven);
assert(seven / three == two);
assert(seven % three == one);
assert(seven >> one == three);
assert(three << one == seven - one);
assert(seven & three == three);
assert(seven ^ three == three + one);
assert((one << two) | (one << one) | one == seven);

# make sure comparisons are signed
assert(minusthree <= one);
assert(minusthree < one);
assert(one >= minusthree);
assert(one > minusthree);
# check sign of right shift
big: int = 1 << 63;
lessbig: int = 1 << 62;
assert(big >> one == lessbig);

# test various integer literals
assert(27 == 0b11011);
assert(27 == 0b0011011);
assert(27 == 033);
assert(27 == 0x1b);
assert(27 == 0x1B);
assert(-1 == -0x1);
assert(-1 == -0b1);
assert(-1 == -01);

# probe around maximum negative int
assert(-9223372036854775807-1 == -9223372036854775808);
assert(1 << 63 == -9223372036854775808);
assert(int(0x8000000000000000P) == -9223372036854775808);
