type T1 = {n: int, s: string, {int, int}};
type T2 = {x: int, float};
i: int;
x: float = 0.0;
s: string = new(string, nrand(1), 1);
t1: T1 = {0, "", {0, 0}};
t2: T2 = {0, 0.0};
type A1 = array of int;
type A2 = array of string;
type A3 = array of T1;
type A4 = array of {x: int, float};
type A5 = array of A4;
type A1n = array of i: int;
type A2n = array of s: string;
type A3n = array of t: T1;
type A4n = array of t: {x: int, float};
type A5n = array of a: A4;
a1: A1 = new(A1, 10, 0);
a2: A2 = new(A2, a1[$], "");
a3: A3 = new(array of T1, 0, t1);
a4: A4 = new(array of T2, convert(int, s, 10), {0, 0.0});
a5: A5 = new(array of array of {x: int, float}, 10, new(A4, 0, t2));
i = a1[0];
i = a1[a1[0]];
s = a2[i];
s = a2[4][i : $];
s = a2[i][a1[0] : i];
t1 = a3[$ - 1];
t2 = a4[0];
t2 = a5[2 * i : $][4][0];
type M1 = map [int] of int;
type M2 = map [bool] of string;
type M3 = map [percentage: float] of T1;
type M4 = map [mytime: time] of {x: int, float};
type M5 = map [fp: fingerprint] of M4;
type M1n = map [int] of an_int: int;
type M2n = map [bool] of a_string: string;
type M3n = map [percentage: float] of tup: T1;
type M4n = map [mytime: time] of value: {x: int, float};
type M5n = map [fp: fingerprint] of m: M4;
m1: M1 = new(M1, 0);
m2: M2 = new(M2, 0);
m3: M3 = new(map [float] of T1, 0);
m4: M4 = new(map [time] of T2, 0);
m5: M5 = new(map [fingerprint] of M4, 0);
i = m1[0];
i = m1[a1[0]];
s = m2[true];
s = m2[false][0 : $];
s = m2[convert(float, i) < x][a1[0] : i];
t1 = m3[0.0];
t2 = m4[now()];
t2 = m5[convert(fingerprint, 0)][convert(time, 4)];
