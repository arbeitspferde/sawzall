# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# Function parameter types can be recursively defined.

type F = function(f: F, m: int, n: int): int;

ackerman: F = function(f: F, m: int, n: int): int {
  if (m == 0)
    return n + 1;
  else if (n == 0)
    return f(f, m - 1, 1);
  else
    return f(f, m - 1, f(f, m, n - 1));
};

assert(ackerman(ackerman, 3, 4) == 125);

type T1 = { x: function(y: T1) };
t1: T1 = { function(x: T1) { } };

type T2 = array of function(x: T2);
t2: T2 = { function(x: T2) { } };

type T3 = map[int] of function(x: T3);
t3: T3 = { 1 : function(x: T3) { } };

type T4 = function(x: { y: T4 });
t4: T4 = function(x: { y: T4 }) { };

type T5 = function(x: array of T5);
t5: T5 = function(x: array of T5) { };

# Function result types can be recursively defined

type FF = function(): FF;
foo: FF { return foo; };
foo();
