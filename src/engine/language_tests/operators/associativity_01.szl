# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

#!/bin/env szl
#szl_options

#desc: Associativity for operator categories.

# 7 operator categories
#    selector
#    unary
#    multiplicative
#    additive
#    comparison
#    conjunction
#    disjunction

ASSERT: function (condition: bool, msg: string): bool {
  if (not condition) {
    emit stdout <- msg;
  }
  return condition;
};

T: bool = true;
F: bool = false;


#inst: Associativity for multiplicative operators.
#test cases have been chosen keeping in mind the integer arithmetic.

# "# = value" represent the value obtained by evaluating rhs of comp op.
# first statement (in a group separated by \n) for operator combination 
# show that the operator category is left associative, while second statement
# show that the operator category is not right associative.
# Note: we don't have second statement in all those cases where left 
# associativity and right associativity will produce the same result with any
# set of values. (eq. associativity b/w * and * operator).

# * operator as the first operator.
ASSERT((10*2*2) == ((10*2)*2), "(10*2*2) == ((10*2)*2)"); # = 40

ASSERT((10*4/3) == ((10*4)/3), "(10*4/3) != ((10*4)/3)"); # = 13
ASSERT((10*4/3) != (10*(4/3)), "(10*4/3) == ((10*(4/3))"); # = 10

ASSERT((10*4%3) == ((10*4)%3), "(10*4%3) != ((10*4)%3)"); # = 1
ASSERT((10*4%3) != (10*(4%3)), "(10*4%3) == ((10*(4%3))"); # = 10

ASSERT((2*2<<3) == ((2*2)<<3), "(2*2<<3) != ((2*2)<<3)"); # = 32

ASSERT((2*4>>3) == ((2*4)>>3), "(2*4>>3) != ((2*4)>>3)"); # = 1
ASSERT((2*4>>3) != (2*(4>>3)), "(2*4>>3) == (2*(4>>3))"); # = 0

ASSERT((2*3&2) == ((2*3)&2), "(2*3&2) != ((2*3)&2)"); # = 2
ASSERT((2*3&2) != (2*(3&2)), "(2*3&2) == (2*(3&2))"); # = 0

# / operator as the fist operator.
ASSERT((10/2*2) == ((10/2)*2), "(10/2*2) != ((10/2)*2)"); # = 10
ASSERT((10/2*2) != (10/(2*2)), "(10/2*2) == (10/(2*2))"); # = 2

ASSERT((10/4/3) == ((10/4)/3), "(10/4/3) != ((10/4)/3)"); # = 0
ASSERT((10/4/3) != (10/(4/3)), "(10/4/3) == ((10/(4/3))"); # = 10

ASSERT((10/4%3) == ((10/4)%3), "(10/4%3) != ((10/4)%3)"); # = 2
ASSERT((10/4%3) != (10/(4%3)), "(10/4%3) == ((10/(4%3))"); # = 10

ASSERT((4/2<<2) == ((4/2)<<2), "(4/2<<2) != ((4/2)<<2)"); # = 8
ASSERT((4/2<<2) != (4/(2<<2)), "(4/2<<2) == (4/(2<<2))"); # = 0

ASSERT((10/4>>2) == ((10/4)>>2), "(10/4>>2) != ((10/4)>>2)"); # = 0
ASSERT((10/4>>2) != (10/(4>>2)), "(10/4>>2) == (10/(4>>2))"); # = 10

ASSERT((2/2&2) == ((2/2)&2), "(2/2&2) != ((2/2)&2)"); # = 0
ASSERT((2/2&2) != (2/(2&2)), "(2/2&2) == (2/(2&2))"); # = 1

# % operator as the fist operator.
ASSERT((10%4*3) == ((10%4)*3), "(10%4*3) != ((10%4)*3)"); # = 6
ASSERT((10%4*3) != (10%(4*3)), "(10%4*3) == ((10%(4*3))"); # = 10

ASSERT((10%9/3) == ((10%9)/3), "(10%9/3) != ((10%9)/3)"); # = 0
ASSERT((10%9/3) != (10%(9/3)), "(10%9/3) == ((10%(9/3))"); # = 1

ASSERT((10%4%3) == ((10%4)%3), "(10%4%3) != ((10%4)%3)"); # = 2
ASSERT((10%4%3) != (10%(4%3)), "(10%4%3) == ((10%(4%3))"); # = 0

ASSERT((4%2<<2) == ((4%2)<<2), "(4%2<<2) != ((4%2)<<2)"); # = 0
ASSERT((4%2<<2) != (4%(2<<2)), "(4%2<<2) == (4%(2<<2))"); # = 4

ASSERT((10%12>>2) == ((10%12)>>2), "(10%12>>2) != ((10%12)>>2)"); # = 2
ASSERT((10%12>>2) != (10%(12>>2)), "(10%12>>2) == (10%(12>>2))"); # = 1

ASSERT((3%2&2) == ((3%2)&2), "(3%2&2) != ((3%2)&2)"); # = 0
ASSERT((3%2&2) != (3%(2&2)), "(3%2&2) != (3%(2&2))"); # = 1

# << operator as the fist operator.
ASSERT((2<<2*3) == ((2<<2)*3), "(2<<2*3) != ((2<<2)*3)"); # = 24

ASSERT((4<<2/3) == ((4<<2)/3), "(4<<2/3) != ((4<<2)/3)"); # = 5
ASSERT((4<<2/3) != (4<<(2/3)), "(4<<2/3) == ((4<<(2/3))"); # = 4

ASSERT((2<<2%3) == ((2<<2)%3), "(2<<2%3) != ((2<<2)%3)"); # = 2
ASSERT((2<<2%3) != (2<<(2%3)), "(2<<2%3) == ((2<<(2%3))"); # = 8

ASSERT((2<<2<<2) == ((2<<2)<<2), "(2<<2<<2) != ((2<<2)<<2)"); # = 32
ASSERT((2<<2<<2) != (2<<(2<<2)), "(2<<2<<2) != (2<<(2<<2))"); # = 512

ASSERT((2<<12>>2) == ((2<<12)>>2), "(2<<12>>2) != ((2<<12)>>2)"); # = 2048
ASSERT((2<<12>>2) != (2<<(12>>2)), "(2<<12>>2) == (2<<(12>>2))"); # = 16

ASSERT((3<<2&2) == ((3<<2)&2), "(3<<2&2) != ((3<<2)&2)"); # = 0
ASSERT((3<<2&2) != (3<<(2&2)), "(3<<2&2) != (3<<(2&2))"); # = 12

# >> operator as the fist operator.
ASSERT((8>>2*2) == ((8>>2)*2), "(8>>2*2) != ((8>>2)*2)"); # = 4
ASSERT((8>>2*2) != (8>>(2*2)), "(8>>2*2) == (8>>(2*2))"); # = 0

ASSERT((8>>4/3) == ((8>>4)/3), "(8>>4/3) != ((8>>4)/3)"); # = 0
ASSERT((8>>4/3) != (8>>(4/3)), "(8>>4/3) == ((8>>(4/3))"); # = 4

ASSERT((8>>4%3) == ((8>>4)%3), "(8>>4%3) != ((8>>4)%3)"); # = 0
ASSERT((8>>4%3) != (8>>(4%3)), "(8>>4%3) == ((8>>(4%3))"); # = 4

ASSERT((4>>2<<2) == ((4>>2)<<2), "(4>>2<<2) != ((4>>2)<<2)"); # = 4
ASSERT((4>>2<<2) != (4>>(2<<2)), "(4>>2<<2) == (4>>(2<<2))"); # = 0

ASSERT((8>>4>>2) == ((8>>4)>>2), "(8>>4>>2) != ((8>>4)>>2)"); # = 0
ASSERT((8>>4>>2) != (8>>(4>>2)), "(8>>4>>2) == (8>>(4>>2))"); # = 4

ASSERT((12>>2&2) == ((12>>2)&2), "(12>>2&2) != ((12>>2)&2)"); # = 2
ASSERT((12>>2&2) != (12>>(2&2)), "(12>>2&2) == (12>>(2&2))"); # = 3

# & operator as the fist operator.
ASSERT((5&2*2) == ((5&2)*2), "(5&2*2) != ((5&2)*2)"); # = 0
ASSERT((5&2*2) != (5&(2*2)), "(5&2*2) == (5&(2*2))"); # = 4

ASSERT((9&7/4) == ((9&7)/4), "(9&7/4) != ((9&7)/4)"); # = 0
ASSERT((9&7/4) != (9&(7/4)), "(9&7/4) == ((9&(7/4))"); # = 1

ASSERT((9&4%3) == ((9&4)%3), "(9&4%3) != ((9&4)%3)"); # = 0
ASSERT((9&4%3) != (9&(4%3)), "(9&4%3) == ((9&(4%3))"); # = 4

ASSERT((4&2<<1) == ((4&2)<<1), "(4&2<<1) != ((4&2)<<1)"); # = 0
ASSERT((4&2<<1) != (4&(2<<1)), "(4&2<<1) == (4&(2<<1))"); # = 4

ASSERT((9&4>>2) == ((9&4)>>2), "(9&4>>2) != ((9&4)>>2)"); # = 0
ASSERT((9&4>>2) != (9&(4>>2)), "(9&4>>2) == (9&(4>>2))"); # = 1

ASSERT((2&2&2) == ((2&2)&2), "(2&2&2) != ((2&2)&2)"); # = 2
