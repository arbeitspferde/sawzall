# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------





# Well-formed when statements

# When body, even without {}, opens a new scope
i: int = 0;
a: array of int = {};
when (i: each int; def(a[i]))
  i: int = 0;

#
# Some and each must bind to specific values, while all is not bound.
#

valueString: string = "";

when (somex: some int;
      valueString[somex] != 'f') {
  assert(false,
         format("For some somex = %d, value = %s, valueString[somex] != 'f'\n",
                somex, valueString));
}

when (eachx: each int;
      valueString[eachx] != 'f') {
  assert(false,
         format("For each eachx = %d, value = %s, valueString[eachx] != 'f'\n",
                eachx, valueString));
}

entered := 0;
when (allx: all int;
      valueString[allx] != 'f') {
  entered++;
}
assert(entered == 1,
       format("For value = %s, valueString[allx] != 'f'\n", valueString));

#
# Two all quantifiers
#
# In this case, since same quantifier is bound to different spaces.
# Both spaces should have same dimension and same unique set of values.
#

value1: string = "aaaaaa";
value2: string = "aaaaaa";

success: bool = false;
when (allx: all int;
      value1[allx] == value2[allx]
      ) {
  success = true;
}
assert(success,
       format("For value1=%s and value2=%s ==> value1[allx] == value2[allx]\n",
              value1, value2));


#
# Use of when statements and quantifiers to form boolean expression
# from array of strings..
#

valueWords1: array of string = {"test", "case", "creation", "for",
                                "the", "Sawzall", "Language", "and",
                                "Interpreter"};

valueWords2: array of string = {"the", "test", "case", "within", "a",
                                "category", "will", "include", "tests", "of",
                                "the", "following", "types"};

valueWords3: array of string = {"test", "test", "test"};


entered = 0;
when (eachx: each int;
      valueWords2[eachx] == "the"
      ) {
  assert(eachx == 0 || eachx == 10,
         format("For eachx = %d, valueWords3[eachx] == \"the\"\n", eachx));
  entered++;
}
assert(entered == 2);


entered = 0;
when (somex: some int;
      valueWords1[somex] == "test"
      ) {
  assert(somex == 0,
         format("For somex = %d, valueWords3[somex] == \"test\"\n", somex));
  entered++;
}
assert(entered == 1);


entered = 0;
when (allx: all int;
      valueWords3[allx] == valueWords3[0]
      ) {
  entered++;
}
assert(entered == 1, format("valueWords3[allx] == valueWords3[0]\n"));
