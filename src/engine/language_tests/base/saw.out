type S = array of string;
line: string;
fields: S;
t: string;
u: string;
v: string;
line = "hey this is a f3u3n3ny str1ng";
fields = saw(line, "^[a-z3]+", " |[0-9]*", rest t, "^[a-z3]+", " |[0-9]*", rest u, rest v);
assert(fields == convert(S, {"hey", " ", "this", " "}));
assert(t == "this is a f3u3n3ny str1ng");
assert(u == "is a f3u3n3ny str1ng");
assert(v == "is a f3u3n3ny str1ng");
fields = sawzall(line, "^[a-z3]+", " |[0-9]*");
assert(fields == convert(S, {"hey", " ", "this", " ", "is", " ", "a", " ", "f3u3n3ny", " ", "str", "1", "ng", ""}));
line = "bcdaaaaa";
fields = sawzall(line, "b*", "c*", "d*");
assert(fields == convert(S, {"b", "c", "d"}));
line = "aaaXbbbXcccXX";
fields = sawzall(line, "[^X]*", skip "X");
assert(fields == convert(S, {"aaa", "bbb", "ccc", "", ""}));
line = "aaaXbbbXcccXX";
fields = sawzall(line, "[^X]*");
assert(fields == convert(S, {"aaa", "bbb", "ccc", "", ""}));
line = "\"http://here is a comma: , and another ,\", 123";
fields = sawzall(line, submatch "\"?([^\"]*)\"?,", "[0-9]+");
assert(fields == convert(S, {"http://here is a comma: , and another ,", "123"}));
