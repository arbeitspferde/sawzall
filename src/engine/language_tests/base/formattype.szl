# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

assert(format("%T", true) == "bool");
assert(format("%T", bytes("")) == "bytes");
assert(format("%T", fingerprintof(now())) == "fingerprint");
assert(format("%T", 7.0) == "float");
assert(format("%T", 7) == "int");
assert(format("%T", "hello, sailor") == "string");
assert(format("%T", now()) == "time");

a: array of int = { 0, 1, 2 };
assert(format("%T", a) == "array of int");

m: map[string] of int = { "zero": 0, "one": 1, "two": 2 };
assert(format("%T", m) == "map [string] of int");

f: function(a: int): int { return a; };
assert(format("%T", f) == "function(a: int): int");

type ProtoTuple = {
  # fields with defaults
  x: int = 42 @ 1,
  y: float = 3.1415 @ 2,
  # fields
  t: time @ 3,
  s: bytes @ 4,
  # static declaration
  static kInt := 123,
  # type declaration
  type Tuple = {
    i: int,
    f: float
  }
};

t: ProtoTuple = B"";
assert(format("%T", t) == "ProtoTuple");
assert(format("%#T", t) == "{x: int = 42 @ 1, y: float = 3.1415 @ 2, t: time @ 3, s: bytes @ 4, static kInt: int = 123, type Tuple = {i: int, f: float}}");

tt: ProtoTuple.Tuple = { 1, 1.0 };
assert(format("%T", tt) == "ProtoTuple.Tuple");
assert(format("%#T", tt) == "{i: int, f: float}");
