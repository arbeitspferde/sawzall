type T0 = {};
type T1 = {x: int};
type T2 = {x: int, y: float};
type T3 = {a: array of int};
type T4 = {a: array of T3};
type T5 = {t1: T1, t2: T2};
type P0 = {};
type P1 = proto {x: int};
type P2 = proto {x: int, y: float};
type P3 = proto {a: array of int};
type P4 = proto {a: array of proto {a: array of int}};
type P5 = proto {t1: proto {x: int}, t2: proto {x: int, y: float}};
type pP0 = T0;
type pP1 = proto {x: int};
type pP2 = proto {x: int, y: float};
type pP3 = proto {a: array of int};
type pP4 = proto {a: array of proto {a: array of int}};
type pP5 = proto {t1: proto {x: int}, t2: proto {x: int, y: float}};
x0: T0 = {};
x1: T1 = {42};
x2: T2 = {97, 3.14};
x3: T3 = {new(array of int, 10, 991)};
x4: T4 = {new(array of T3, 10, x3)};
x5: T5 = {{7}, {12, 2.71828}};
type ppP4 = pP4;
type pppP4 = P4;
a: pP4 = x4;
b: P4 = a;
y0: P0 = x0;
y1: P1 = x1;
y2: P2 = x2;
y3: P3 = x3;
y4: P4 = x4;
y5: P5 = x5;
x0 = y0;
x1 = y1;
x2 = y2;
x3 = y3;
x4 = y4;
x5 = y5;
b0: bytes = convert(bytes, x0);
b1: bytes = convert(bytes, convert(proto {x: int}, x1));
b2: bytes = convert(bytes, convert(proto {x: int, y: float}, x2));
b3: bytes = convert(bytes, convert(proto {a: array of int}, x3));
b4: bytes = convert(bytes, convert(proto {a: array of proto {a: array of int}}, x4));
b5: bytes = convert(bytes, convert(proto {t1: proto {x: int}, t2: proto {x: int, y: float}}, x5));
c0: bytes = convert(bytes, y0);
c1: bytes = convert(bytes, y1);
c2: bytes = convert(bytes, y2);
c3: bytes = convert(bytes, y3);
c4: bytes = convert(bytes, y4);
c5: bytes = convert(bytes, y5);
assert(b0 == c0);
assert(b1 == c1);
assert(b2 == c2);
assert(b3 == c3);
assert(b4 == c4);
assert(b5 == c5);
y5 = convert(P5, convert(bytes, convert(proto {t1: proto {x: int}}, {{7}})));
assert(inproto(y5.t1));
assert(!inproto(y5.t2));
x5 = y5;
y5 = x5;
assert(inproto(y5.t1));
assert(!inproto(y5.t2));
x5 = y5;
x5.t2 = {12, 2.71828};
y5 = x5;
assert(inproto(y5.t1));
assert(inproto(y5.t2));
type V = {type C = proto {int}, c: V.C};
v: V = {{1}};
assert(format("%T", v.c) == "V.C");
f: function(): V.C {
	v: V = {{1}};
	return v.c;
}
;
assert(format("%T", f) == "function(): V.C");
