# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# Operator precedence tests

T: bool = true;
F: bool = false;

# conjunction beats disjunction
assert((T or T and F) == T, "(T or T and F) != T");
assert((F and T or T) == T, "(F and T or T) != T");

assert((T or T && F) == T, "(T or T && F) != T");
assert((F && T or T) == T, "(F && T or T) != T");

assert((T || T and F) == T, "(T || T and F) != T");
assert((F and T || T) == T, "(F and T || T) != T");

assert((T || T && F) == T, "(T || T && F) != T");
assert((F && T || T) == T, "(F && T || T) != T");

# comparison beats conjunction
assert((F == F and F) == F, "(F == F and F) != F");
assert((F and F == F) == F, "(F and F == F) != F");

assert((T != F and F) == F, "(T != F and F) != F");
assert((F and F != T) == F, "(F and F != T) != F");

assert((1 <  2 && T) == T, "(1 <  2 && T) != T");
assert((T && 1 <  2) == T, "(T && 1 <  2) != T");

assert((2 <= 2 && T) == T, "(2 <= 2 && T) != T");
assert((T && 2 <= 2) == T, "(T && 2 <= 2) != T");

assert((3  > 2 and T) == T, "(3  > 2 and T) != T");
assert((T and 3 >  2) == T, "(T and 3 >  2) != T");

assert((2 >= 2 and T) == T, "(2 >= 2 and T) != T");
assert((T and 2 >= 2) == T, "(T and 2 >= 2) != T");

# addition beats comparison
assert(1 + 2 == 3, "1 + 2 != 3");
assert(2 + 2 != 5, "2 + 2 == 5");
assert(3 - 1 == 2, "3 - 1 != 2");
assert(3 | 5 == 7, "3 | 5 != 7");
assert(3 ^ 7 == 4, "3 ^ 7 == 4");

# multiplication beats addition
assert(1 + 2 * 3 == 7, "1 + 2 * 3 != 7");
assert(3 * 2 + 1 == 7, "3 * 2 + 1 != 7");

assert(8 - 4 / 2 == 6, "8 - 4 / 2 != 6");
assert(8 / 4 - 2 == 0, "8 / 4 - 2 != 0");

assert(3 % 2 | 1 == 1, "3 % 2 | 1 != 1");
assert(5 | 3 % 1 == 5, "5 | 3 % 1 != 5");

assert(1 << 2 + 3 == 7, "1 << 2 + 3 != 7");
assert(3 + 1 << 2 == 7, "3 + 1 << 2 != 7");

assert(7 >> 1 ^ 2 == 1, "7 >> 1 ^ 2 != 1");
assert(6 ^ 7 >> 1 == 5, "6 ^ 7 >> 1 != 5");

assert(3 & 7 ^ 6 == 5, "3 & 7 ^ 6 != 5");
assert(7 ^ 6 & 3 == 5, "7 ^ 6 & 3 != 5");

# unary beats multiplication
assert(4 * + 2 == 8, "4 * + 2 != 8");
assert(6 / - 2 == -3, "6 / - 2 != -3");
assert(- 1 >> 1 != 0, "- 1 >> 1 == 0");
assert(~ 0 << 1 == -2, " ~ 0 << 1 != -2");

# unary beats comparison
assert(! T == F, "! T != F");
assert(! F != F, "! F == F");

# unary beats conjunction and disjunction
assert((! T or F) == F, "(! T or F) != F");
assert((! T || F) == F, "(! T || F) != F");
assert((! F and F) == F, "(! F and F) != F");
assert((! F && F) == F, "(! F && F) != F");

