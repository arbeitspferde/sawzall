# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

mib: map[int] of bool = new(map[int] of bool);
mii: map[int] of int = new(map[int] of int);
mfi: map[float] of int = new(map[float] of int);
mif: map[int] of float = new(map[int] of float);
msi: map[string] of int = new(map[string] of int);
mis: map[int] of string = new(map[int] of string);
mss: map[string] of string = new(map[string] of string);
msa: map[string] of array of string = new(map[string] of array of string);
type T = {s: string, f: float};
mit: map[int] of T = {:};  # test this notation
mti: map[T] of int = {:};
type M = map[int] of int;
mim: map[int] of M = {:};

static count: int = 1000;

for (i: int = 0; i < count; i++){
  s: string = i;
  f: float = i;
  t: T = {s,f};
  m: M = { i : i + 1 };
  mib[i] = (i != 0);
  mii[i] = 10 * i;
  mfi[float(i)] = 10 * i;
  mif[i] = 10.0 * f;
  mis[i] = s;
  msi[string(i)] = i;
  mss[string(i)] = string(10 * i);
  msa[string(i)] = { string(10 * i), string(10 * i) };
  mit[i] = t;
  mti[t] = i;
  mim[i] = m;
}

# test len

assert(len(mib) == count);
assert(len(mii) == count);
assert(len(mfi) == count);
assert(len(mif) == count);
assert(len(msi) == count);
assert(len(mis) == count);
assert(len(mss) == count);
assert(len(msa) == count);
assert(len(mit) == count);
assert(len(mti) == count);
assert(len(mim) == count);

# test construction directly
for (i: int = 0; i < count; i++){
  s: string = i;
  f: float = i;
  t: T = { s, f };
  assert(mib[i] == (i != 0));
  assert(mii[i] == 10 * i);
  assert(mfi[f] == 10 * i);
  assert(mif[i] == 10.0 * f);
  assert(mis[i] == s);
  assert(msi[s] == i);
  assert(mss[s] == string(10 * i));
  for (j: int = 0; j < len(msa["0"]); j++)
    assert(msa[s][j] == string(10 * i));
  assert(mit[i].s == s && mit[i].f == f);
  assert(mti[t] == i);
  assert(mim[i][i] == i + 1);
}

# test existence with haskey
for (i: int = 0; i < count; i++){
  s: string = i;
  f: float = i;
  t: T = { s, f };
  assert(haskey(mib, i));
  assert(haskey(mii, i));
  assert(haskey(mfi, f));
  assert(haskey(mif, i));
  assert(haskey(mis, i));
  assert(haskey(msi, s));
  assert(haskey(mss, s));
  assert(haskey(msa, s));
  assert(haskey(mti, t));
  assert(haskey(mim, i));
}

# test nonexistence with haskey
for (i: int = 1; i < count; i++){  # start from 1; -0 is zero and exists
  s: string = -i;
  f: float = -i;
  t: T = { s, -f };
  assert(!haskey(mib, -i));
  assert(!haskey(mii, -i));
  assert(!haskey(mfi, f));
  assert(!haskey(mif, -i));
  assert(!haskey(mis, -i));
  assert(!haskey(msi, s));
  assert(!haskey(mss, s));
  assert(!haskey(msa, s));
  assert(!haskey(mti, t));
  assert(!haskey(mim, -i));
}

# test existence with lookup
for (i: int = 0; i < count; i++){
  s: string = i;
  f: float = i;
  t: T = { s, f };
  a: array of string = { string(10 * i), string(10 * i) };
  a1: array of string = { string(10 * i + 1), string(10 * i + 1) };
  assert(lookup(mib, i, (i == 0)) == (i != 0));
  assert(lookup(mii, i, i + 1) == 10 * i);
  assert(lookup(mfi, f, i + 1) == 10 * i);
  assert(lookup(mif, i, f + 1.0) == 10.0 * f);
  assert(lookup(mis, i, s + "x") == s);
  assert(lookup(msi, s, i + 1) == i);
  assert(lookup(mss, s, s + "x") == string(10 * i));
  assert(lookup(msa, s, a1) == a);
  assert(lookup(mti, t, i + 1) == i);
  assert(lookup(mim, i, {:}) == M({ i : i + 1 }));
}

# test nonexistence with lookup
for (i: int = 1; i < count; i++){  # start from 1; -0 is zero and exists
  s: string = -i;
  f: float = -i;
  t: T = { s, -f };
  a: array of string = { string(10 * i), string(10 * i) };
  a1: array of string = { string(10 * i + 1), string(10 * i + 1) };
  assert(lookup(mib, -i, (i == 0)) == (i == 0));
  assert(lookup(mii, -i, -25) == -25);
  assert(lookup(mfi, f, -25) == -25);
  assert(lookup(mif, -i, -25.0) == -25.0);
  assert(lookup(mis, -i, "fail") == "fail");
  assert(lookup(msi, s, -25) == -25);
  assert(lookup(mss, s, "fail") == "fail");
  assert(lookup(msa, s, a1) == a1);
  assert(lookup(mti, t, -25) == -25);
  assert(lookup(mim, -i, {:}) == M({:}));
}

# tests for structured map element updates
for (i: int = 0; i < count; i++) {
  msa[string(i)][i % 2] = "deleted";
  assert(msa[string(i)][i % 2] == "deleted");
  mit[i].s[0] = 'a' + i % 26;
  first: string = " ";
  first[0] = 'a' + i % 26;
  assert(mit[i].s == first + string(i)[1 : $]);
  mit[i].f = float(i + 1);
  mit[i].f = mit[i].f - 1.0;
  assert(mit[i].f == float(i));
  mim[i][i]++;
  mim[i][i] = mim[i][i] - 1;
  assert(mim[i][i] == i + 1);
}

Mii: map[int] of int = { 1: 1, 2: 2, 3: 3, 4: 4 };
Mfi: map[float] of int = { 1.0: 1, 2.0: 2, 3.0: 3, 4.0: 4 };
Mif: map[int] of float = { 1: 1.0, 2: 2.0, 3: 3.0, 4: 4.0 };
Msi: map[string] of int = { "1": 1, "2": 2, "3": 3, "4": 4 };
Mis: map[int] of string = { 1: "1", 2: "2", 3: "3", 4: "4" };
Mss: map[string] of string = { "1": "1", "2": "2", "3": "3", "4": "4" };
Msa: map[string] of array of string = { "1": { "1","1" }, "2": { "2","2" },
                                        "3": { "3","3" }, "4": { "4","4" } };
Mti: map[{string,float}] of int = { { "1", 1.0 }: 1, { "2", 2.0 }: 2,
                                    { "3", 3.0 }: 3, { "4", 4.0 }: 4 };

for (i: int = 1; i <= 4; i++) {
  s: string = i;
  f: float = i;
  t: { string, float } = { s, f };
  assert(Mii[i] == i);
  assert(Mfi[f] == i);
  assert(Mif[i] == f);
  assert(Mis[i] == s);
  assert(Msi[s] == i);
  assert(Mss[s] == s);
  for (j: int = 0; j < len(Msa["1"]); j++)
    assert(Msa[s][j] == s);
  assert(Mti[t] == i);
}

# tests for inc and dec, integer only

for (i: int = 1; i <= 4; i++){
  s: string = i;
  f: float = i;
  t: { string, float } = { s, f };
  Mii[i]++;
  assert(Mii[i] == i + 1);
  Mii[i]--;
  assert(Mii[i] == i);
  Mfi[f]++;
  assert(Mfi[f] == i + 1);
  Mfi[f]--;
  assert(Mfi[f] == i);
  Msi[s]++;
  assert(Msi[s] == i + 1);
  Msi[s]--;
  assert(Msi[s] == i);
  Mti[t]++;
  assert(Mti[t] == i + 1);
  Mti[t]--;
  assert(Mti[t] == i);
}


{
  # tests for uniqueing maps (were bugs)
  # need to check all combinations of basic64 and compound objects

  xii: map[int] of int = {:};
  xii[1] = 1;
  yii: map[int] of int = xii;
  xii[1] = 2;
  assert(xii[1] == 2 && yii[1] == 1);

  xsi: map[string] of int = {:};
  xsi["a"] = 1;
  ysi: map[string] of int = xsi;
  xsi["a"] = 2;
  assert(xsi["a"] == 2 && ysi["a"] == 1);

  xis: map[int] of string = {:};
  xis[1] = "a";
  yis: map[int] of string = xis;
  xis[1] = "b";
  assert(xis[1] == "b" && yis[1] == "a");

  xss: map[string] of string = {:};
  xss["a"] = "a";
  yss: map[string] of string = xss;
  xss["a"] = "b";
  assert(xss["a"] == "b" && yss["a"] == "a");

  # now check that after uniquing, map still works
  a: array of string = {
    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
    "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
    "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
    "31", "32", "33", "34", "35", "36", "37", "38", "39", "40",
    "41", "42", "43", "44", "45", "46", "47", "48", "49", "50"
  };

  m1: map[string] of string = a;
  m2: map[string] of string = m1;

  m1["x"] = "y";
  m2["x"] = "y";

  # check that equality is transitive and accurate
  assert(m1 == m2);
  assert(m2 == m1);
  k1: array of string = keys(m1);
  for (i: int = 0; i < len(k1); i++)
    assert(def(m1[k1[i]]));
  k2: array of string = keys(m2);
  for (i: int = 0; i < len(k2); i++)
    assert(def(m2[k2[i]]));
}
