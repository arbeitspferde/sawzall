/* Copyright 2012 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Groningen GC log pbs

syntax = "proto2";
option java_package = "org.arbeitspferde.groningen.proto";
option java_outer_classname = "ExperimentDbProtos";

package org.arbeitpferde.groningen.proto;

import "groningen_config.proto";

message PipelineId {
  required string id = 1;
}

message PipelineState {
  required PipelineId id = 1;
  required org.arbeitspferde.groningen.proto.ProgramConfiguration configuration = 2;
  repeated Subject subjects = 3;
}

message PipelineHistoryState {
  required PipelineId id = 1;
  required org.arbeitspferde.groningen.proto.ProgramConfiguration configuration = 2;
  repeated EvaluatedSubject evaluated_subjects = 3;
  optional uint64 end_timestamp = 4;
  optional uint64 experiment_id = 5;    
}

message Experiment {
  required uint64 id = 1;
  repeated uint64 subject_ids = 2;
}

// Extensible message keeping data on subjects. Add new fields as required.
// Information on GC events (see the Gc message) is stored in a separate table,
// indexed by subject id and an event id
message Subject {
  required uint64 id = 1;
  optional CommandLine command_line = 2;
  optional SubjectConfiguration configuration = 3;
  
  optional string cluster_name = 4;
  optional string subject_group_name = 5;
  optional string user_name = 6;
  optional uint64 subject_group_index = 7;
  optional bool is_default = 8 [default = false];
}

message EvaluatedSubject {
  optional Subject subject = 1;
  optional double fitness = 2;
  optional uint64 end_timestamp = 3; 
}

message CommandLine {
  repeated CommandLineArgument argument = 1;
}

message CommandLineArgument {
  required string name = 1;
  optional string value = 2;
}

message SubjectConfiguration {
  // TODO(team): fill in the configuration fields (subject, subject group, etc, etc)
  //              - these are placeholders
  optional uint64 start_timestamp = 1;
  optional uint64 end_timestamp = 2;
}

// Collected information on a single GC event from the logs
// See the Java concurrent-mark-sweep documentation and source code for details
// on the meaning of these fields (essentially all named after the events
// in the GC logs)
message Gc {
  required uint64 subject_id = 1;
  required int32 id = 2;

  required bool partial = 3;
  required bool full = 4;
  required int32 start_size = 5;
  required int32 end_size = 6;
  required int32 delta_size = 7;
  required int32 record_counter = 8;
  required double relative_timestamp = 9;

  optional ICms i_cms = 10;
  optional Cms cms = 11;
  optional CmsRemark cms_remark = 12;
  optional double cms_abort_preclean_due_to_time = 13;
  optional StampedTime weak_refs_processing = 14;
  optional double scrub_symbols_and_string_tables = 15;
  optional StampedTime rescan_parallel = 16;
  optional YgOccupancy yg_occupancy = 17;

  optional bool cms_concurrent_preclean_start = 18;
  optional Usage cms_concurrent_preclean = 19;
  optional bool cms_concurrent_mark_start = 20;
  optional Usage cms_concurrent_mark = 21;
  optional bool cms_concurrent_reset_start = 22;
  optional Usage cms_concurrent_reset = 23;
  optional bool cms_concurrent_sweep_start = 24;
  optional Usage cms_concurrent_sweep = 25;
  optional bool cms_concurrent_abortable_preclean_start = 26;
  optional Usage cms_concurrent_abortable_preclean = 27;

  optional CmsInitialMark cms_initial_mark = 28;
  optional ParNew par_new = 29;
  optional ConcurrentModeFailure concurrent_mode_failure = 30;
  optional ClassUnloading class_unloading = 31;

  optional Usage system_times = 32;
}

// More detail on specific events
message ICms {
  required double time = 1;
  required int32 dc = 2;
}

message Cms {
  required double time = 1;
  // These two fields are either both present or both absent
  optional double cms_abort_preclean_due_to_time = 2;
  optional Usage cms_concurrent_abortable_preclean = 3;
}

message CmsInitialMark {
  required int32 tenured_max_size = 1;
  required int32 triggered_at_occupancy_size = 2;
}

message CmsRemark {
  required int32 start_size = 1;
  required int32 total_size = 2;
}

message ClassUnloading {
  required StampedTime when = 1;
  repeated string classes = 2;
}

message YgOccupancy {
  required int32 current_occupancy = 1;
  required int32 total_size = 2;
  required double timestamp = 3;
}

message ParNew {
  required double abort_time = 1;
  repeated int32 ages = 2;
  required int32 desired_survivor_size = 3;
  required int32 max_threshold = 4;
  required int32 new_threshold = 5;
  required double  par_new_time = 6;
  required bool promotion_failed = 7;
  repeated int32 age_survivor_sizes = 8;
  required int32 survivor_start_size = 9;
  required int32 survivor_end_size = 10;
  required int32 survivor_delta_size = 11;
  repeated int32 age_total_survivor_sizes = 12;
  optional Usage system_times = 13;
}

message ConcurrentModeFailure {
  required int32 cms_gen_size = 1;
  required int32 cms_end_size = 2;
  required double  cms_time = 3;
  required int32 perm_start_size = 4;
  required int32 perm_end_size = 5;
  required int32 perm_size = 6;
  required double  perm_time = 7;
  required int32 tenured_start_size = 8;
  required int32 tenured_end_size = 9;
  required int32 tenured_size = 10;
  required int32 cms_start_size = 11;
  optional ICms i_cms = 12;
}

// Common messages
message StampedTime {
  required double time = 1;
  required double timestamp = 2;
}

message Usage {
  required double wall_time = 1;
  required double cpu_time = 2;
  // if system_time is present, cpu_time is user cpu time
  optional double system_time = 3;
}

