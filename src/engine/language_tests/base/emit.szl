# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

type T = { z: bool, b: bytes, f: fingerprint, y: float, x: int, string, time };

type colztype = table collection of bool;
type colbtype = table collection of bytes;
type colftype = table collection of fingerprint;
type colytype = table collection of float;
type colxtype = table collection of int;
type colstype = table collection of string;
type colttype = table collection of time;
type colTtype = table collection of T;

colz: colztype;
colb: colbtype;
colf: colftype;
coly: colytype;
colx: colxtype;
cols: colstype;
colt: colttype;
colT: colTtype;

sumz: table sum [int] of bool;
sumb: table sum [int] of bytes;
sumf: table sum [int] of fingerprint;
sumy: table sum [int] of float;
sumx: table sum [i: int] of int;
sums: table sum [i: int] of string;
sumt: table sum [i: int] of time;
sumT: table sum [i: int] of T;

n: int = 5;
for (i: int = 0; i < n; i++) {
  z: bool = i & 1 == 0;
  b: bytes = input;
  f: fingerprint = fingerprint(i);
  y: float = i;
  x: int = i;
  s: string = 3*i;
  t: time = 4*i;
  tp: T = { z, b, f, y, x, s, t };
  
  emit colz <- z;
  emit colb <- b;
  emit colf <- f;
  emit coly <- y;
  emit colx <- x;
  emit cols <- s;
  emit colt <- t;
  emit colT <- tp;
  
  emit sumz[1*i] <- z;
  emit sumb[2*i] <- b;
  emit sumf[3*i] <- f;
  emit sumy[4*i] <- y;
  emit sumx[5*i] <- x;
  emit sums[6*i] <- s;
  emit sumt[7*i] <- t;
  emit sumT[8*i] <- tp;
}

# some more emits to test the PrintEmitter
o1: table collection [int][float][string] of int;
emit o1[42][3.14]["hello"] <- 17;

o2: table collection [int][float][{string, int}] of int;
emit o2[42][3.14][{"hel\tlo", 4}] <- 18;

o3: table collection [float][{string, int, { float, time} }] of int;
emit o3[3.14][{"hello", 4, { 0.0, time(77)} }] <- 19;

o4: table collection [int][float][string] of {string, int, { float, time} };
emit o4[42][3.14]["hello"] <- {"hello", 4, { 0.0, time(77)} };

o5: table top(10)[int][string] of string weight int;
emit o5[4]["hello"] <- "you" weight 1;

o6: table top(10)[int] of T weight float;
emit o6[4] <- { true, {}, 0p, 1.2, 42, "foobar", time(10000) } weight 3.5;

o7: table maximum (10)[int] of T weight float;
emit o7[4] <- { true, {}, 0p, 1.2, 42, "foobar", time(10000) } weight 3.5;

o8: table minimum (10)[string] of time weight int;
emit o8["min-index"] <- time(10000) weight 3;

o9: table unique (10)[time] of bytes;
emit o9[time(0)] <- bytes("this is a string");
