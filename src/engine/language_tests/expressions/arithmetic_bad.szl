# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------






# Ill-formed arithmetic expressions with operands of mismatched types that cause
# compile-time errors.

i1: int = 100;
f1: float = 100.0;
s1: string = "Hello";
by1: bytes = { 12, 13, 14, 15 };
func_int: function(): int { return 15; };
func_float: function(): float { return 15.0; };

10 + 10.0;
10 - 10.0;
10 * 10.0;
10 / 10.0;
10 % 10.0;
10 & 10.0;
10 | 10.0;
10 ^ 10.0;
10 << 10.0;
10 >> 10.0;
10 + f1;
10 - f1;
10 * f1;
10 / f1;
10 % f1;
10 & f1;
10 | f1;
10 ^ f1;
10 << f1;
10 >> f1;
10 + func_float();
10 - func_float();
10 * func_float();
10 / func_float();
10 % func_float();
10 & func_float();
10 | func_float();
10 ^ func_float();
10 << func_float();
10 >> func_float();
i1 + 10.0;
i1 - 10.0;
i1 * 10.0;
i1 / 10.0;
i1 % 10.0;
i1 & 10.0;
i1 | 10.0;
i1 ^ 10.0;
i1 << 10.0;
i1 >> 10.0;
i1 + f1;
i1 - f1;
i1 * f1;
i1 / f1;
i1 % f1;
i1 & f1;
i1 | f1;
i1 ^ f1;
i1 << f1;
i1 >> f1;
i1 + func_float();
i1 - func_float();
i1 * func_float();
i1 / func_float();
i1 % func_float();
i1 & func_float();
i1 | func_float();
i1 ^ func_float();
i1 << func_float();
i1 >> func_float();
func_int() + 10.0;
func_int() - 10.0;
func_int() * 10.0;
func_int() / 10.0;
func_int() % 10.0;
func_int() & 10.0;
func_int() | 10.0;
func_int() ^ 10.0;
func_int() << 10.0;
func_int() >> 10.0;
func_int() + f1;
func_int() - f1;
func_int() * f1;
func_int() / f1;
func_int() % f1;
func_int() & f1;
func_int() | f1;
func_int() ^ f1;
func_int() << f1;
func_int() >> f1;
func_int() + func_float();
func_int() - func_float();
func_int() * func_float();
func_int() / func_float();
func_int() % func_float();
func_int() & func_float();
func_int() | func_float();
func_int() ^ func_float();
func_int() << func_float();
func_int() >> func_float();
s1[0] + 10.0;
s1[0] - 10.0;
s1[0] * 10.0;
s1[0] / 10.0;
s1[0] % 10.0;
s1[0] & 10.0;
s1[0] | 10.0;
s1[0] ^ 10.0;
s1[0] << 10.0;
s1[0] >> 10.0;
s1[0] + f1;
s1[0] - f1;
s1[0] * f1;
s1[0] / f1;
s1[0] % f1;
s1[0] & f1;
s1[0] | f1;
s1[0] ^ f1;
s1[0] << f1;
s1[0] >> f1;
s1[0] + func_float();
s1[0] - func_float();
s1[0] * func_float();
s1[0] / func_float();
s1[0] % func_float();
s1[0] & func_float();
s1[0] | func_float();
s1[0] ^ func_float();
s1[0] << func_float();
s1[0] >> func_float();
by1[0] + 10.0;
by1[0] - 10.0;
by1[0] * 10.0;
by1[0] / 10.0;
by1[0] % 10.0;
by1[0] & 10.0;
by1[0] | 10.0;
by1[0] ^ 10.0;
by1[0] << 10.0;
by1[0] >> 10.0;
by1[0] + f1;
by1[0] - f1;
by1[0] * f1;
by1[0] / f1;
by1[0] % f1;
by1[0] & f1;
by1[0] | f1;
by1[0] ^ f1;
by1[0] << f1;
by1[0] >> f1;
by1[0] + func_float();
by1[0] - func_float();
by1[0] * func_float();
by1[0] / func_float();
by1[0] % func_float();
by1[0] & func_float();
by1[0] | func_float();
by1[0] ^ func_float();
by1[0] << func_float();
by1[0] >> func_float();
