# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

type A = array of int;
matches: A;
entered: bool;
str1: string = "abcdeabcde";
str2: string = "hello world!";
str3: string ="aaaaaaaa";

# a failing when - tests CombineRange protects out-of-bounds access
when (i: some int; str1[i] == str2[i])
  assert(false);

matches = {};
when (i: each int; str1[i] == 'c') {
  a: int;
  matches = matches + { i };
}
assert(matches == A({ 2, 7 }));

matches = {};
when (i: some int; str1[i] == 'c' or str2[i] == 'o') {
  a: int;
  matches = matches + { i };
}
assert(matches == A({ 2 }));

entered = false;
when (i: all int; str3[i] == str3[0]) {
  a: int;
  entered = true;
}
assert(entered);

matches = {};
f: function(s: string) {
  when (i: each int; s[i] == 'b') {
    matches = matches + { i };
  }
};
f("abcdeb");
assert(matches == A({ 1, 5 }));

# an example with a nested index in the condition. note that
# the urls array contains invalid indices for the times map -
# the when statement should be oblivious to this.

times: map[string] of int = { "a": 1, "b": 5, "c": 7 };
urls: array of string = { "a", "b", "c", "d", "e" };

matches = {};
when (i: some int; times[urls[i]] >= 3) {
  matches = matches + { times[urls[i]] };
}
assert(matches == A({ 5 }));

matches = {};
when (i: each int; times[urls[i]] >= 3) {
  matches = matches + { times[urls[i]] };
}
assert(matches == A({ 5, 7 }));

# this one should work
entered = false;
when (i: all int; times[urls[0:3][i]] != 0) {
  entered = true;
}
assert(entered);

# this one should fail: some values of urls[i] are not valid indices for times[]
entered = false;
when (i: all int; times[urls[i]] != 0) {
  entered = true;
}
assert(!entered);

# conversions in a more complex example
x: array of { i: int, s: string } = { { 0, "zero" }, { 1, "one" }, { 2, "two" },
                                      { 3, "three" }, { 4, "four" } };

found := false;
when (i: each int; string(x[i].i) == "4") {
  found = true;
  assert(i == 4);
}
assert(found);
