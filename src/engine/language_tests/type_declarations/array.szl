# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

#!/bin/env szl

#szl_options  

#desc:  Declaration of arrays of basic and composite types

#inst: Declaration of arrays of basic types with literal initialization
include "declarations_depth1.szl"

ai: AI   = {12,12,234,43,67,1,45,546,74,76};
as: AS   = {"first","second","third","fourth","fifth","sixth","seventh",
            "eighth","nineth","tenth"};
af: AF   = {0.00,1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.10};
ab: AB   = {true,true,false,false,true,false,true,false,false,true};
afg: AFG = new (array of fingerprint,10,fingerprint(1));
aby: ABY = {{97,98,234,99},{97,98,234,43,2321,35,43,99}};
at: AT   = new (array of time,10,time("Tue Jul 20 11:44:46 PDT 2004"));

i:int = 0;
for (i=0; i < 10;i++){
    DEBUG("print","ai[%d] * 10 = ", i);
    DEBUG("print","%d\n", ai[i]*10);
}

DEBUG("print","\nArray of Strings\n");
for (i=0; i < 10;i++){
    DEBUG("print","as[%d] = ", i);       
    DEBUG("print","%s\n", as[i]);
}

DEBUG("print","\nArray of floats\n");
for (i=0; i < 10;i++){
    DEBUG("print","af[%d] = ", i);
    DEBUG("print","%f\n", af[i]);
}

DEBUG("print","\nArray of bools\n");
for (i=0; i < 10;i++){
    DEBUG("print","ab[%d] = ", i);
    DEBUG("print","%b\n", ab[i]);
}

DEBUG("print","\nArray of fingerprint\n");
for (i=0; i < 10;i++){
    DEBUG("print","afg[%d] = ", i);
    DEBUG("print","%d\n", int(afg[i]));
}

DEBUG("print","\nArray of bytes\n");
for (i=0; i < 2;i++){
    DEBUG("print","aby[%d] = ", i);
    DEBUG("print","%s\n", string(aby[i]));
}

DEBUG("print","\nArray of time\n");
for (i=0; i < 10;i++){
    DEBUG("print","at[%d] = ", i);
    DEBUG("print","%s\n", string(at[i]));
}


#inst: Array of composite types : maps 

type Mis = map [int] of string;
AM: array of Mis = new (array of Mis,10,{:});

for (i = 0; i < 10; i++){
    AM[i]= {i:"Hello",i+1:"world!"};
}

for (i = 0; i < 10; i++){
    DEBUG("print","%s  %s\n",AM[i][i],AM[i][i+1]);
}


#inst: Array of composite types : Tuples

ATIS: array of {no:int,name:string} = new(array of {no:int,name:string},10,{0,"World"});

for (i = 0; i < 10; i++){
    ATIS[i]= {i,"Hello"};
}
                                                                                                 
for (i = 0; i < 10; i++){
    DEBUG("print","%d\t%s\n",ATIS[i].no,ATIS[i].name);
}

for (i = 0; i < 10; i++){
    ATIS[i].no= i*10;
    ATIS[i].name = "World";
}
                                                                                                 
for (i = 0; i < 10; i++){
    DEBUG("print","%d\t%s\n",ATIS[i].no,ATIS[i].name);
}


#inst: Array of composite types : functions ? 

#foo: function (no1:int, no2: int):int

#{
#    return (no1+no2);
#};

#foobar : function (no1:int, no2: int):int
#{
#       return (no1-no2);
#};

#type func = function (no1:int, no2:int):int ;

#F: func{
#    return (no1*no2);
#};

#y : array of function (no1:int, no2:int):int = new(array of function (no1:int, no2:int):int,4,{
#        return (no1-no2);
#};)
#;

#y: array of function (no1:int, no2:int):int = {foobar,foo};

#fun: function (name:string):string;
#x: array of function (name:string):string = {fun(name:string):string{return name;}};


#if(foo == foobar) { DEBUG ("print","\nEQUAL\n");}
#d: array of func = new (array of func,10,F(10,10));

#inst: Array of tuples with composite types 

ATMIIS: array of {m:map [int] of int,s:string} 
       = new( array of {m:map [int] of int,s:string},5,
              {new(map[int] of int),""});

DEBUG("print","\nArray of {map:string}\n");

for (i=0;i<5;i++){
    ATMIIS[i].m[i]   = i+10;
    ATMIIS[i].m[i+1] = i+20;
    ATMIIS[i].m[i+2] = i+30;
    ATMIIS[i].m[i+3] = i+40;
    ATMIIS[i].s      = string(i);
}

for (i=0;i<5;i++){
    DEBUG("print","ATMIIS[%d].m[%d]  = %d\n",i,i,ATMIIS[i].m[i]);
    DEBUG("print","ATMIIS[%d].m[%d]  = %d\n",i,i+1,ATMIIS[i].m[i+1]);
    DEBUG("print","ATMIIS[%d].m[%d]  = %d\n",i,i+2,ATMIIS[i].m[i+2]);
    DEBUG("print","ATMIIS[%d].m[%d]  = %d\n",i,i+3,ATMIIS[i].m[i+3]);
    DEBUG("print","ATMIIS[%d].s]  = %s\n",i,ATMIIS[i].s);
}


