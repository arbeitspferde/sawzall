# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------






# Well-formed function calls

#
# Parameter passing
#

a: int = 10;
b: int = 20;

f: function(x: int, y: int) {
  tmp: int;
  tmp = x;
  x = y;
  y = tmp;
  assert(x == 20 && y == 10);
  assert(a == 10 && b == 20);
};

assert(a == 10 && b == 20);
f(a, b);
assert(a == 10 && b == 20);

#
# Accessing return values
#

# Basic return types

f0: function(i: int): int { return (i + 1); };

f1: function(i1: int, s1: string): string {
  s1 = s1 + string(i1);
  return s1;
};

f2: function(fg1: fingerprint): fingerprint {
  return fingerprint(fg1);
};

f3: function(): bool {
  return (1 > 2);
};

f4: function(): bytes {
  return { 1, 2, 3 };
};

f5: function(): bytes {
  return bytes({ 1, 2, 3 });
};

f6: function(): float {
  return 10.0 / 3.0;
};

f7: function(): float {
  return float(10 / 7);
};

f8: function(): time {
  return now();
};

# Complex return types

f9: function(): array of int {
  return { 1, 2, 3 };
};

f10: function(): map[int] of string {
  return { 1: "1.0", 2: "2.0", 3: "3.0" };
};

f11: function(): { i: int, s: string } {
  return { 5, "five" };
};

# Using the values returned by the called functions

i: int;
i = f0(10);
assert(i == 11);
i = f0(f0(f0(i)));
assert(i == 14);

s: string;
s = f1(10, "Parameter 1 is ");
assert(s == "Parameter 1 is 10");
s = f1(f0(f0(15)),"Value of first argument is ");
assert(s == "Value of first argument is 17");

fg0: fingerprint;
fg0 = f2(fingerprint(10));
assert(string(fg0) == "0x000000000000000aP");
fg0 = f2(fingerprintof("Quick Brown Fox"));
if (fg0 != f2(fingerprintof("Quick Brown Fox")))
  assert(false, "Error in fingerprint");

b0: bool;
b0 = f3();
if (b0 != false)
  assert(false, "Error in bool");

by0: bytes;
by1: bytes;

by0 = f4();
by1 = f5();
if (by0 != by1)
  assert(false, "Error in bytes");

if (f6() == f7())
  assert(false, "Error in float");

t0: time;
t0 = f8();

ai0: array of int;
ai1: array of int;
ai0 = f9();
ai1 = new(array of int, len(f9()), f9()[0]);

for (i = 0; i < len(ai0); i = i + 1)
  ai1[i] = f9()[len(ai0) - 1 - i];

for (i = 0; i < len(f9()); i = i + 1)
  if (ai1[len(ai0) - 1 - i] != ai0[i])
    assert(false, "Error in array");

for (i = 1; i < 4; i = i + 1)
  if (f10()[i] != (string(i) +".0"))
    assert(false, "Error in map");

assert(f11().i == 5);
assert(f11().s == "five");

# Calling all functions standalone - i.e. not using the returned values

f0(100);
f1(100, "");
f2(fingerprint(100));
f3();
f4();
f5();
f6();
f7();
f8();
f9();
f10();
f11();

