# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# a couple of proto definitions: we use myproto0 as
# the base, and then define several successor protos
# with various fields missing so we can get the
# corresponding bytes for conversion
type myproto0 = {
  x: int = 42 @ 1,
  y: float = 3.1415 @ 2,
  t: time @ 3,
  b: bytes @ 5,
  z: bool = true @ 6,
  p: { x: int = 21 @ 8,
       y: float = 2.718 @ 9 } @ 10
};


type myproto1 = {
  #x: int = 42 @ 1,
  y: float = 3.1415 @ 2,
  t: time @ 3,
  b: bytes @ 5,
  z: bool = true @ 6,
  p: { x: int = 21 @ 8,
       y: float = 2.718 @ 9 } @ 10
};


type myproto2 = {
  #x: int = 42 @ 1,
  #y: float = 3.1415 @ 2,
  t: time @ 3,
  b: bytes @ 5,
  z: bool = true @ 6,
  p: { x: int = 21 @ 8,
       y: float = 2.718 @ 9 } @ 10
};


type myproto3 = {
  #x: int = 42 @ 1,
  #y: float = 3.1415 @ 2,
  #t: time @ 3,
  b: bytes @ 5,
  z: bool = true @ 6,
  p: { x: int = 21 @ 8,
       y: float = 2.718 @ 9 } @ 10
};


type myproto4 = {
  #x: int = 42 @ 1,
  #y: float = 3.1415 @ 2,
  #t: time @ 3,
  #b: bytes @ 5,
  z: bool = true @ 6,
  p: { x: int = 21 @ 8,
       y: float = 2.718 @ 9 } @ 10
};


type myproto5 = {
  #x: int = 42 @ 1,
  #y: float = 3.1415 @ 2,
  #t: time @ 3,
  #b: bytes @ 5,
  #z: bool = true @ 6,
  p: { x: int = 21 @ 8,
       y: float = 2.718 @ 9 } @ 10
};


type myproto6 = {
  #x: int = 42 @ 1,
  #y: float = 3.1415 @ 2,
  #t: time @ 3,
  #b: bytes @ 5,
  #z: bool = true @ 6,
  p: { x: int = 21 @ 8 } @ 10
};


# a value for each proto type
p0: myproto0 = { 24, 5141.3, 0xffffffffffft, {1, 2, 3}, false, { -5, -1.2 } };
p1: myproto1 = { 5141.3, 0xffffffffffft, {1, 2, 3}, false, { -5, -1.2 } };
p2: myproto2 = { 0xffffffffffft, {1, 2, 3}, false,  { -5, -1.2 } };
p3: myproto3 = { {1, 2, 3}, false,  { -5, -1.2 } };
p4: myproto4 = { false, { -5, -1.2 } };
p5: myproto5 = { { -5, -1.2 } };
p6: myproto6 = { { -5 } };


# bytes (protocol buffer) for each proto tuple
b0: bytes = p0;
assert(convert(string, b0, "hex") == `081811cdcccccc4c15b44019ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54`);
b1: bytes = p1;
assert(convert(string, b1, "hex") == `11cdcccccc4c15b44019ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54`);
b2: bytes = p2;
assert(convert(string, b2, "hex") == `19ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54`);
b3: bytes = p3;
assert(convert(string, b3, "hex") == `2a0301020330005340fbffffffffffffffff0149333333333333f3bf54`);
b4: bytes = p4;
assert(convert(string, b4, "hex") == `30005340fbffffffffffffffff0149333333333333f3bf54`);
b5: bytes = p5;
assert(convert(string, b5, "hex") == `5340fbffffffffffffffff0149333333333333f3bf54`);
b6: bytes = p6;
assert(convert(string, b6, "hex") == `5340fbffffffffffffffff0154`);


# convert each of the protocol buffers to a variable of type myproto0
# missing fields are assumed to be optional
q0: myproto0 = b0;
assert(convert(string, q0) == `{ 24, 5141.3, "Thu Jul 23 07:43:06 PDT 1970", X"010203", false, { -5, -1.2 } }`);
q1: myproto0 = b1;
assert(convert(string, q1) == `{ 42, 5141.3, "Thu Jul 23 07:43:06 PDT 1970", X"010203", false, { -5, -1.2 } }`);
q2: myproto0 = b2;
assert(convert(string, q2) == `{ 42, 3.1415, "Thu Jul 23 07:43:06 PDT 1970", X"010203", false, { -5, -1.2 } }`);
q3: myproto0 = b3;
assert(convert(string, q3) == `{ 42, 3.1415, "Wed Dec 31 16:00:00 PST 1969", X"010203", false, { -5, -1.2 } }`);
q4: myproto0 = b4;
assert(convert(string, q4) == `{ 42, 3.1415, "Wed Dec 31 16:00:00 PST 1969", B"", false, { -5, -1.2 } }`);
q5: myproto0 = b5;
assert(convert(string, q5) == `{ 42, 3.1415, "Wed Dec 31 16:00:00 PST 1969", B"", true, { -5, -1.2 } }`);
q6: myproto0 = b6;
assert(convert(string, q6) == `{ 42, 3.1415, "Wed Dec 31 16:00:00 PST 1969", B"", true, { -5, 2.718 } }`);


# make sure inproto function reports correctly

T: function(b: bool) { assert(b); };  # helper function

Verify: function(name: string, a0: myproto0, a1: myproto0, a2: myproto0,
                 a3: myproto0, a4: myproto0, a5: myproto0, a6: myproto0) {
  T(inproto(a0.x)); T(inproto(a0.y)); T(inproto(a0.t)); T(inproto(a0.b));
  T(inproto(a0.z)); T(inproto(a0.p)); T(inproto(a0.p.x)); T(inproto(a0.p.y));

  T(!inproto(a1.x)); T(inproto(a1.y)); T(inproto(a1.t)); T(inproto(a1.b));
  T(inproto(a1.z)); T(inproto(a1.p)); T(inproto(a1.p.x)); T(inproto(a1.p.y));

  T(!inproto(a2.x)); T(!inproto(a2.y)); T(inproto(a2.t)); T(inproto(a2.b));
  T(inproto(a2.z)); T(inproto(a2.p)); T(inproto(a2.p.x)); T(inproto(a2.p.y));

  T(!inproto(a3.x)); T(!inproto(a3.y)); T(!inproto(a3.t)); T(inproto(a3.b));
  T(inproto(a3.z)); T(inproto(a3.p)); T(inproto(a3.p.x)); T(inproto(a3.p.y));

  T(!inproto(a4.x)); T(!inproto(a4.y)); T(!inproto(a4.t)); T(!inproto(a4.b));
  T(inproto(a4.z)); T(inproto(a4.p)); T(inproto(a4.p.x)); T(inproto(a4.p.y));

  T(!inproto(a5.x)); T(!inproto(a5.y)); T(!inproto(a5.t)); T(!inproto(a5.b));
  T(!inproto(a5.z)); T(inproto(a5.p)); T(inproto(a5.p.x)); T(inproto(a5.p.y));

  T(!inproto(a6.x)); T(!inproto(a6.y)); T(!inproto(a6.t)); T(!inproto(a6.b));
  T(!inproto(a6.z)); T(inproto(a6.p)); T(inproto(a6.p.x)); T(!inproto(a6.p.y));
};

Verify("q",  q0, q1, q2, q3, q4, q5, q6);


# make sure inproto information is copied properly
r0: myproto0 = q0;
r1: myproto0 = q1;
r2: myproto0 = q2;
r3: myproto0 = q3;
r4: myproto0 = q4;
r5: myproto0 = q5;
r6: myproto0 = q6;

Verify("r", r0, r1, r2, r3, r4, r5, r6);


# make sure non-existing fields are not written into protocol buffers

equal: function(a: bytes, b: bytes): bool {
  if (len(a) == len(b)) {
    for (i: int = 0; i < len(a); i++)
      if (a[i] != b[i])
        return false;
    return true;
  }
  return false;
};

c0: bytes = r0;
assert(convert(string, c0, "hex") == "081811cdcccccc4c15b44019ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
c1: bytes = r1;
assert(convert(string, c1, "hex") == "11cdcccccc4c15b44019ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
c2: bytes = r2;
assert(convert(string, c2, "hex") == "19ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
c3: bytes = r3;
assert(convert(string, c3, "hex") == "2a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
c4: bytes = r4;
assert(convert(string, c4, "hex") == "30005340fbffffffffffffffff0149333333333333f3bf54");
c5: bytes = r5;
assert(convert(string, c5, "hex") == "5340fbffffffffffffffff0149333333333333f3bf54");
c6: bytes = r6;
assert(convert(string, c6, "hex") == "5340fbffffffffffffffff0154");

T(equal(b0, c0));
T(equal(b1, c1));
T(equal(b2, c2));
T(equal(b3, c3));
T(equal(b4, c4));
T(equal(b5, c5));
T(equal(b6, c6));


# make sure that setting individual fields explicitly adjusts the inproto bit
t: myproto0 = r6;  # initial value
T(!inproto(t.x));  T(t.x == 42);  t.x = 0;  T(inproto(t.x));
T(!inproto(t.y));  T(t.y == 3.1415);  t.y = 1.2;  T(inproto(t.y));
T(!inproto(t.t));  t.t = 1t;  T(inproto(t.t));
T(!inproto(t.b));  t.b = { 1, 2, 3 };  T(inproto(t.b));
T(!inproto(t.z));  T(t.z); t.z = t.z;  T(inproto(t.z));
T(!inproto(t.p.y));  t.p.y = 0.0;  T(inproto(t.p.y));


# make sure that setting a field in a nested tuple adjusts the inproto bit
# for both the inner and outer tuples
u: myproto0 = bytes("");  # initial value
T(!inproto(u.p));  T(!inproto(u.p.y));
u.p.y = 0.0;
T(inproto(u.p));  T(inproto(u.p.y));


# make sure that using a field on the l.h.s. of an assignment does not adjust
# the inproto bit unless the variable is actually changed
v: myproto0 = bytes("");  # initial value
T(v.p.x == 21);
T(!inproto(v.p));  T(!inproto(v.p.x));
w: array of int = new(array of int, 22, 0);
w[v.p.x] = 123;
T(!inproto(v.p));  T(!inproto(v.p.x));
T(w[21] == 123);

f: function(x: int): int { return 1; };
w[f(v.p.x)] = 456;
T(!inproto(v.p));  T(!inproto(v.p.x));
T(w[1] == 456);

# make sure that the setting of an inproto bit does not evaluate the left
# operand of the selection (the proto value) twice
type myproto7 = {
  x: int @ 1
};
a: array of myproto7 = { myproto7(bytes("")) };  # initial value
T(!inproto(a[0].x));
b: int = 0;  # counts number of times g() is called
g: function(): int {
  b++;
  return 0;
};
a[g()].x = 0;  # should only call g() once
T(inproto(a[0].x));
T(b == 1);
