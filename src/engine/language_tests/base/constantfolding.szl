# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# Constant folding of binary operators.
# Relies on getting a warning for divide by zero, so we can tell
# that the folding must actually have occurred.
# Also relies on basic conversion folding and simple value propagation.

# bool

# This part must be executed because we need to confirm that the right operand
# is evaluated if and only if it is not short-circuited.
# We put the expressions in declaration initializers to prevent failing
# due to divide by zero.
  
f: function() {
  b1 := true;
  b2 := false;
  b3c := 0;
  b3 := function(): bool {
    b3c++;
    return (nrand(5) == 17);  # false
  };
  x00 := 1 / int(b1   ==  b1  );
  x01 := 1 / int(b1   ==  b2  );
  x02 := 1 / int(b1   ==  b3());        assert(b3c == 1); b3c = 0;
  x03 := 1 / int(b2   ==  b1  );
  x04 := 1 / int(b2   ==  b2  );
  x05 := 1 / int(b2   ==  b3());        assert(b3c == 1); b3c = 0;
  x06 := 1 / int(b3() ==  b1  );        assert(b3c == 1); b3c = 0;
  x07 := 1 / int(b3() ==  b2  );        assert(b3c == 1); b3c = 0;
  x08 := 1 / int(b3() ==  b3());        assert(b3c == 2); b3c = 0;
  x09 := 1 / int(b1   !=  b1  );
  x10 := 1 / int(b1   !=  b2  );
  x11 := 1 / int(b1   !=  b3());        assert(b3c == 1); b3c = 0;
  x12 := 1 / int(b2   !=  b1  );
  x13 := 1 / int(b2   !=  b2  );
  x14 := 1 / int(b2   !=  b3());        assert(b3c == 1); b3c = 0;
  x15 := 1 / int(b3() !=  b1  );        assert(b3c == 1); b3c = 0;
  x16 := 1 / int(b3() !=  b2  );        assert(b3c == 1); b3c = 0;
  x17 := 1 / int(b3() !=  b3());        assert(b3c == 2); b3c = 0;
  x18 := 1 / int(b1   and b1  );
  x19 := 1 / int(b1   and b2  );
  x20 := 1 / int(b1   and b3());        assert(b3c == 1); b3c = 0;
  x21 := 1 / int(b2   and b1  );
  x22 := 1 / int(b2   and b2  );
  x23 := 1 / int(b2   and b3());        assert(b3c == 1); b3c = 0;
  x24 := 1 / int(b3() and b1  );        assert(b3c == 1); b3c = 0;
  x25 := 1 / int(b3() and b2  );        assert(b3c == 1); b3c = 0;
  x26 := 1 / int(b3() and b3());        assert(b3c == 2); b3c = 0;
  x27 := 1 / int(b1   or  b1  );
  x28 := 1 / int(b1   or  b2  );
  x29 := 1 / int(b1   or  b3());        assert(b3c == 1); b3c = 0;
  x30 := 1 / int(b2   or  b1  );
  x31 := 1 / int(b2   or  b2  );
  x32 := 1 / int(b2   or  b3());        assert(b3c == 1); b3c = 0;
  x33 := 1 / int(b3() or  b1  );        assert(b3c == 1); b3c = 0;
  x34 := 1 / int(b3() or  b2  );        assert(b3c == 1); b3c = 0;
  x35 := 1 / int(b3() or  b3());        assert(b3c == 2); b3c = 0;
  x36 := 1 / int(b1   &&  b1  );
  x37 := 1 / int(b1   &&  b2  );
  x38 := 1 / int(b1   &&  b3());        assert(b3c == 1); b3c = 0;
  x39 := 1 / int(b2   &&  b1  );
  x40 := 1 / int(b2   &&  b2  );
  x41 := 1 / int(b2   &&  b3());        assert(b3c == 0);
  x42 := 1 / int(b3() &&  b1  );        assert(b3c == 1); b3c = 0;
  x43 := 1 / int(b3() &&  b2  );        assert(b3c == 1); b3c = 0;
  x44 := 1 / int(b3() &&  b3());        assert(b3c == 1); b3c = 0;
  x45 := 1 / int(b1   ||  b1  );
  x46 := 1 / int(b1   ||  b2  );
  x47 := 1 / int(b1   ||  b3());        assert(b3c == 0);
  x48 := 1 / int(b2   ||  b1  );
  x49 := 1 / int(b2   ||  b2  );
  x50 := 1 / int(b2   ||  b3());        assert(b3c == 1); b3c = 0;
  x51 := 1 / int(b3() ||  b1  );        assert(b3c == 1); b3c = 0;
  x52 := 1 / int(b3() ||  b2  );        assert(b3c == 1); b3c = 0;
  x53 := 1 / int(b3() ||  b3());        assert(b3c == 2); b3c = 0;

  y00 := 1 / (int(b1   ==  b1  ) -1);
  y01 := 1 / (int(b1   ==  b2  ) -1);
  y02 := 1 / (int(b1   ==  b3()) -1);   assert(b3c == 1); b3c = 0;
  y03 := 1 / (int(b2   ==  b1  ) -1);
  y04 := 1 / (int(b2   ==  b2  ) -1);
  y05 := 1 / (int(b2   ==  b3()) -1);   assert(b3c == 1); b3c = 0;
  y06 := 1 / (int(b3() ==  b1  ) -1);   assert(b3c == 1); b3c = 0;
  y07 := 1 / (int(b3() ==  b2  ) -1);   assert(b3c == 1); b3c = 0;
  y08 := 1 / (int(b3() ==  b3()) -1);   assert(b3c == 2); b3c = 0;
  y09 := 1 / (int(b1   !=  b1  ) -1);
  y10 := 1 / (int(b1   !=  b2  ) -1);
  y11 := 1 / (int(b1   !=  b3()) -1);   assert(b3c == 1); b3c = 0;
  y12 := 1 / (int(b2   !=  b1  ) -1);
  y13 := 1 / (int(b2   !=  b2  ) -1);
  y14 := 1 / (int(b2   !=  b3()) -1);   assert(b3c == 1); b3c = 0;
  y15 := 1 / (int(b3() !=  b1  ) -1);   assert(b3c == 1); b3c = 0;
  y16 := 1 / (int(b3() !=  b2  ) -1);   assert(b3c == 1); b3c = 0;
  y17 := 1 / (int(b3() !=  b3()) -1);   assert(b3c == 2); b3c = 0;
  y18 := 1 / (int(b1   and b1  ) -1);
  y19 := 1 / (int(b1   and b2  ) -1);
  y20 := 1 / (int(b1   and b3()) -1);   assert(b3c == 1); b3c = 0;
  y21 := 1 / (int(b2   and b1  ) -1);
  y22 := 1 / (int(b2   and b2  ) -1);
  y23 := 1 / (int(b2   and b3()) -1);   assert(b3c == 1); b3c = 0;
  y24 := 1 / (int(b3() and b1  ) -1);   assert(b3c == 1); b3c = 0;
  y25 := 1 / (int(b3() and b2  ) -1);   assert(b3c == 1); b3c = 0;
  y26 := 1 / (int(b3() and b3()) -1);   assert(b3c == 2); b3c = 0;
  y27 := 1 / (int(b1   or  b1  ) -1);
  y28 := 1 / (int(b1   or  b2  ) -1);
  y29 := 1 / (int(b1   or  b3()) -1);   assert(b3c == 1); b3c = 0;
  y30 := 1 / (int(b2   or  b1  ) -1);
  y31 := 1 / (int(b2   or  b2  ) -1);
  y32 := 1 / (int(b2   or  b3()) -1);   assert(b3c == 1); b3c = 0;
  y33 := 1 / (int(b3() or  b1  ) -1);   assert(b3c == 1); b3c = 0;
  y34 := 1 / (int(b3() or  b2  ) -1);   assert(b3c == 1); b3c = 0;
  y35 := 1 / (int(b3() or  b3()) -1);   assert(b3c == 2); b3c = 0;
  y36 := 1 / (int(b1   &&  b1  ) -1);
  y37 := 1 / (int(b1   &&  b2  ) -1);
  y38 := 1 / (int(b1   &&  b3()) -1);   assert(b3c == 1); b3c = 0;
  y39 := 1 / (int(b2   &&  b1  ) -1);
  y40 := 1 / (int(b2   &&  b2  ) -1);
  y41 := 1 / (int(b2   &&  b3()) -1);   assert(b3c == 0);
  y42 := 1 / (int(b3() &&  b1  ) -1);   assert(b3c == 1); b3c = 0;
  y43 := 1 / (int(b3() &&  b2  ) -1);   assert(b3c == 1); b3c = 0;
  y44 := 1 / (int(b3() &&  b3()) -1);   assert(b3c == 1); b3c = 0;
  y45 := 1 / (int(b1   ||  b1  ) -1);
  y46 := 1 / (int(b1   ||  b2  ) -1);
  y47 := 1 / (int(b1   ||  b3()) -1);   assert(b3c == 0);
  y48 := 1 / (int(b2   ||  b1  ) -1);
  y49 := 1 / (int(b2   ||  b2  ) -1);
  y50 := 1 / (int(b2   ||  b3()) -1);   assert(b3c == 1); b3c = 0;
  y51 := 1 / (int(b3() ||  b1  ) -1);   assert(b3c == 1); b3c = 0;
  y52 := 1 / (int(b3() ||  b2  ) -1);   assert(b3c == 1); b3c = 0;
  y53 := 1 / (int(b3() ||  b3()) -1);   assert(b3c == 2); b3c = 0;
};
f();
  
# The other operators do not involve short-circuiting
# and so we do not need to execute the expressions.

if (nrand(5) == 17) {
  
  # int

  i1 := 4;
  i2 := 4;
  i3 := -4;
  i4 := 0;
  i5 := 3;
  1 / (i1 + i5);
  1 / (i1 + i3);
  1 / (i1 - i5);
  1 / (i1 - i2);
  1 / (i1 * i1 - 15);
  1 / (i1 * i1 - 16);
  1 / (i1 / 2 - 3);
  1 / (i1 / 2 - 2);
  1 % (i1 / 2 - 3);
  1 % (i1 / 2 - 2);
  1 / int(i1 == i2);
  1 / int(i1 == i3);
  1 / int(i1 != i3);
  1 / int(i1 != i2);
  1 / int(i3 < i1);
  1 / int(i1 < i3);
  1 / int(i3 <= i1);
  1 / int(i1 <= i3);
  1 / int(i1 > i3);
  1 / int(i3 > i1);
  1 / int(i1 >= i3);
  1 / int(i3 >= i1);
  1 / (i1 & i2);
  1 / (i1 & i5);
  1 / (i4 | i5);
  1 / (i4 | i4);
  1 / (i1 ^ i5);
  1 / (i1 ^ i2);
  1 / ((i1 << 2) - (i1 * 5));
  1 / ((i1 << 2) - (i1 * 4));
  1 / ((i2 >> 1) - (i1 / 1));
  1 / ((i2 >> 1) - (i1 / 2));
  
  # float
  
  f1 := 4.0;
  f2 := 4.0;
  f3 := -4.0;
  1.0 / (f1 + f2);
  1.0 / (f1 + f3);
  1.0 / (f1 - f3);
  1.0 / (f1 - f2);
  1.0 / (f1 * f1 - 15.0);
  1.0 / (f1 * f1 - 16.0);
  1.0 / (f1 / 2.0 - 3.0);
  1.0 / (f1 / 2.0 - 2.0);
  1 / int(f1 == f2);
  1 / int(f1 == f3);
  1 / int(f1 != f3);
  1 / int(f1 != f2);
  1 / int(f3 < f1);
  1 / int(f1 < f3);
  1 / int(f3 <= f1);
  1 / int(f1 <= f3);
  1 / int(f1 > f3);
  1 / int(f3 > f1);
  1 / int(f1 >= f3);
  1 / int(f3 >= f1);
  
  # time
  
  t1 := 123456789987654321T;
  t2 := 123456789987654321T;
  t3 := time(-123456789987654321);
  1 / int(t1 + t2);
  1 / int(t1 + t3);
  1 / int(t1 - t3);
  1 / int(t1 - t2);
  1 / int(t1 == t2);
  1 / int(t1 == t3);
  1 / int(t1 != t3);
  1 / int(t1 != t2);
  1 / int(t1 < t3);  # time is unsigned, so t3 is bigger than t1
  1 / int(t3 < t1);
  1 / int(t1 <= t3);
  1 / int(t3 <= t1);
  1 / int(t3 > t1);
  1 / int(t1 > t3);
  1 / int(t3 >= t1);
  1 / int(t1 >= t3);
  
  # fingerprint
  
  fp1 := 0x1234567887654321P;
  fp2 := 0x1234567887654321P;
  fp3 := 0x8765432112345678P;
  fp4 := 0x18d0ca4e7f4c4550P;  # fp1 + fp3
  1 / (int(fp1 + fp2) - int(fp4));
  1 / (int(fp1 + fp3) - int(fp4));
  1 / int(fp1 == fp2);
  1 / int(fp1 == fp3);
  1 / int(fp1 != fp3);
  1 / int(fp1 != fp2);
  
  # string
  
  s1 := "abc";
  s2 := "abc";
  s3 := "def";
  s4 := "abcdef";
  1 / int((s1 + s2) != s4);
  1 / int((s1 + s3) != s4);
  1 / int(s1 == s2);
  1 / int(s1 == s3);
  1 / int(s1 != s3);
  1 / int(s1 != s2);
  1 / int(s1 < s3);
  1 / int(s3 < s1);
  1 / int(s1 <= s3);
  1 / int(s3 <= s1);
  1 / int(s3 > s1);
  1 / int(s1 > s3);
  1 / int(s3 >= s1);
  
  # bytes
  
  by1 := B"abc";
  by2 := B"abc";
  by3 := B"def";
  by4 := B"abcdef";
  1 / int((by1 + by2) != by4);
  1 / int((by1 + by3) != by4);
  1 / int(by1 == by2);
  1 / int(by1 == by3);
  1 / int(by1 != by3);
  1 / int(by1 != by2);
  1 / int(by1 < by3);
  1 / int(by3 < by1);
  1 / int(by1 <= by3);
  1 / int(by3 <= by1);
  1 / int(by3 > by1);
  1 / int(by1 > by3);
  1 / int(by3 >= by1);
  1 / int(by1 >= by3);
}
