# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# Variations on protocol tuple declaration

type T1 = { t: array of T1 @ 1 };
t1: T1 = B"";
type T2 = parsedmessage { t: array of T2 @ 1 };
t2: T2 = B"";
type T3 = proto { t: array of T3 @ 1 };
t3: T3 = B"";
#type T4 = proto { t: array of T4 };  # compiling causes a segfault
#t4: T4 = B"";

type T5 = { t: array of array of T5 @ 1 };
t5: T5 = B"";
type T6 = parsedmessage { t: array of array of T6 @ 1 };
t6: T6 = B"";
type T7 = proto { t: array of array of T7 @ 1 };
t7: T5 = B"";
#type T8 = proto { t: array of array of T8 };  # compiling causes a segfault
#t8: T8 = B"";

type T9 = { t: array of { tt: T9 @ 1} @ 1 };
t9: T5 = B"";
type T10 = parsedmessage { t: array of parsedmessage { tt: T10 @ 1 } @ 1 };
t10: T5 = B"";
type T11 = proto { t: array of proto { tt: T11 @ 1} @ 1 };
t11: T5 = B"";
type T12 = proto { t: array of proto { tt: T12 } };
t12: T5 = B"";

# Simple recursive protocol buffer taken from compling this .proto:
#
#  parsed message T {
#    required string a = 1;
#    repeated message<T> b = 2;
#    required string c = 3;
#  };

type T = parsedmessage {
  a:
    bytes @ 1: string, # 10
  b: array of
    T @ 2, # 18
  c:
    bytes @ 3: string # 26
};

t: T = { bytes("a"), { { bytes("ba"), { }, bytes("bc") } }, bytes("c") };

# check to make sure the initialization really worked
assert(t.a == bytes("a"));
assert(t.b[0].a == bytes("ba"));
assert(len(t.b[0].b) == 0);
assert(t.b[0].c == bytes("bc"));
assert(t.c == bytes("c"));

# convert to protocol buffer form and back
b: bytes = bytes(t);

u: T = T(b);

# require that we got the value back
assert(t == u);

# just to be sure, check the individual fields
assert(t.a == u.a);
assert(t.b[0].a == u.b[0].a);
assert(t.b[0].b == u.b[0].b);
assert(t.b[0].c == u.b[0].c);
assert(t.c == u.c);

# confirm that we can convert a recursive non-proto tuple to a proto tuple.
type U = { a: int, b: array of U, c: int };
type PU = proto U;
pu: PU;
