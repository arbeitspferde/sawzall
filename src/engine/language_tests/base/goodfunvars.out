type ftype = function(x: int): int;
type gtype = ftype;
f1: function(x: int): int {
	return x + 1;
}
;
assert(f1(0) == 1, "f1(0) == 1");
f2: function(x: int): int {
	return x + 2;
}
;
assert(f2(0) == 2, "f2(0) == 2");
f3: function(x: int): int {
	return x + 3;
}
;
assert(f3(0) == 3, "f3(0) == 3");
f4: function(x: int): int {
	return x + 4;
}
;
assert(f3(0) == 3, "f3(0) == 4");
f1 = f2;
f2 = f3;
f3 = f4;
f4 = f1;
assert(f1(1) == 3, "f1(1) == 3");
assert(f2(1) == 4, "f2(1) == 4");
assert(f3(1) == 5, "f3(1) == 5");
assert(f4(1) == 3, "f4(1) == 3");
f5: ftype;
f_array: array of ftype;
f_map: map [int] of ftype;
f_tuple: {f: ftype};
g: function() {
	f6: ftype;
	f6 = f1;
	assert(f6(1) == f1(1));
	f5 = f1;
	assert(f5(1) == f1(1));
	f7: ftype;
	f7 = f6;
	assert(f6(1) == f7(1));
	f8: ftype;
	f8 = function(x: int): int {
	return x + 8;
}
;
	assert(f8(1) == 9);
	f_array = {f1};
	assert(f_array[0](1) == f1(1));
	f_map = {1: f1};
	assert(f_map[1](1) == f1(1));
	f_tuple = {f1};
	assert(f_tuple.f(1) == f1(1));
}
;
g();
static b: int = 3;
f: function(x: int): int {
	g: function(): int 	{
		return x + b;
	}
;
	h: function(k: function(): int, n: int): int 	{
		if (n > 0)
			return h(k, n - 1);
		else
			return k();
	}
;
	return h(g, 100);
}
;
assert(f(7) == 10);
cool: function(y: int): int {
	return function(x: int): int {
	return x + y;
}
(1);
}
;
assert(cool(7) == 8, "cool(7) == 8");
assert(convert(string, f1) == "function(x: int): int {\n\treturn x + 2;\n}\n");
assert(convert(string, function() {
}
) == "function() {\n}\n");
assert(convert(string, function(x: int, y: int): float {
	return 0.0;
}
) == "function(x: int, y: int): float {\n\treturn 0.0;\n}\n");
assert(convert(string, f) == "f");
functions: map [string] of function(x: int): string = {:};
p: function(x: int): string {
	return convert(string, x);
}
;
t: function() {
	functions["p"] = p;
}
;
t();
assert(functions["p"](10) == "10");
