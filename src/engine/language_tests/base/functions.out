f1: function() {
}
;
f2: function(x: array of array of float) {
}
;
f3: function(): array of array of float {
	return new(array of array of float, 10, new(array of float, 10, 2.18));
}
;
f4: function(a: int): int {
	if (a >= 0)
		return f4(a - 1);
	return 0;
}
;
f5: function(a: int): int {
	if (a >= 0)
		return f5(a - 1);
	return 0;
}
;
f1();
f2(new(array of array of float, 10, new(array of float, 10, 2.18)));
f3()[3][4];
f4(10);
f5(10);
type P = {x: float, y: float};
type M = map [key: string] of value: P;
type Ai = array of int;
type As = array of string;
type AM = array of M;
type AP = array of P;
Fi: function(x: int): int {
	return x;
}
;
FP: function(x: int): P {
	if (x > 5)
		return {FP(x - 1).x * FP(x - 2).y, FP(x - 1).x / FP(x - 2).y};
	else
		return {convert(float, x), convert(float, x) - 0.5};
}
;
FM: function(x: int): M {
	m: M = {:};
	for (i: int = 0; i < x; i++)
		m[convert(string, i)] = FP(i);
	return m;
}
;
FAi: function(x: int): Ai {
	return new(Ai, x, x);
}
;
FAs: function(x: int): As {
	return new(As, x, "0123456789"[0 : x]);
}
;
FAP: function(x: int): AP {
	return new(AP, x, FP(x));
}
;
FP_expected: array of P = {{0.0, -0.5}, {1.0, 0.5}, {2.0, 1.5}, {3.0, 2.5}, {4.0, 3.5}, {5.0, 4.5}, {17.5, 1.42857142857143}, {78.75, 3.88888888888889}, {112.5, 55.125}, {437.5, 28.9285714285714}};
for (i: int = 0; i < 10; i++)
	assert(Fi(i) == i);
for (i: int = 0; i < 10; i++)
	assert(FP(i) == FP_expected[i]);
for (i: int = 0; i < 5; i++)
{
	actual: M = FM(i);
	for (j: int = 0; j < len(actual); j++)
		assert(actual[convert(string, j)] == FP_expected[j]);
}
for (i: int = 0; i < 10; i++)
{
	actual: Ai = FAi(i);
	for (j: int = 0; j < len(actual); j++)
		assert(actual[j] == convert(Ai, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})[i]);
}
for (i: int = 0; i < 10; i++)
{
	actual: As = FAs(i);
	for (j: int = 0; j < len(actual); j++)
		assert(actual[j] == "0123456789"[0 : i]);
}
for (i: int = 0; i < 10; i++)
{
	actual: AP = FAP(i);
	for (j: int = 0; j < len(actual); j++)
		assert(actual[j] == FP_expected[i]);
}
