type T = parsedmessage {x: bytes = B"123" @ 1 : string, y: int = 123 @ 2 : int32, z: float = 1.23 @ 3 : float};
values: T = {B"hello", 25, 3.4};
empty: T = convert(T, B"");
defaults: T = {B"123", 123, 1.23};
assert(empty == defaults);
assert(convert(bytes, empty) != convert(bytes, defaults));
t0: T = convert(T, B"");
assert(!inproto(t0.x));
assert(!inproto(t0.y));
assert(!inproto(t0.z));
clearproto(t0.x);
clearproto(t0.y);
clearproto(t0.z);
assert(!inproto(t0.x));
assert(!inproto(t0.y));
assert(!inproto(t0.z));
assert(convert(bytes, t0) == convert(bytes, empty));
assert(t0 == empty);
t0 = {B"123", 123, 1.23};
assert(inproto(t0.x));
assert(inproto(t0.y));
assert(inproto(t0.z));
assert(convert(bytes, t0) == convert(bytes, defaults));
assert(t0 == defaults);
t1: T = {B"hello", 25, 3.4};
assert(inproto(t1.x));
assert(inproto(t1.y));
assert(inproto(t1.z));
clearproto(t1.x);
clearproto(t1.y);
clearproto(t1.z);
assert(!inproto(t1.x));
assert(!inproto(t1.y));
assert(!inproto(t1.z));
assert(convert(bytes, t1) == convert(bytes, empty));
assert(t1 == values);
t1 = convert(T, convert(bytes, t1));
assert(!inproto(t1.x));
assert(!inproto(t1.y));
assert(!inproto(t1.z));
assert(convert(bytes, t1) == convert(bytes, empty));
assert(t1 == empty);
tx: T = convert(T, B"");
tx.x = B"foo";
assert(inproto(tx.x));
assert(!inproto(tx.y));
assert(!inproto(tx.z));
clearproto(tx.y);
assert(inproto(tx.x));
assert(!inproto(tx.y));
assert(!inproto(tx.z));
clearproto(tx.x);
assert(tx.x == B"foo");
assert(!inproto(tx.x));
assert(!inproto(tx.y));
assert(!inproto(tx.z));
tx = convert(T, convert(bytes, tx));
assert(tx == empty);
assert(convert(bytes, tx) == convert(bytes, empty));
ty: T = convert(T, B"");
ty.y = 5;
assert(!inproto(ty.x));
assert(inproto(ty.y));
assert(!inproto(ty.z));
clearproto(ty.x);
assert(!inproto(ty.x));
assert(inproto(ty.y));
assert(!inproto(ty.z));
clearproto(ty.y);
assert(ty.y == 5);
assert(!inproto(ty.x));
assert(!inproto(ty.y));
assert(!inproto(ty.z));
ty = convert(T, convert(bytes, ty));
assert(ty == empty);
assert(convert(bytes, ty) == convert(bytes, empty));
tz: T = convert(T, B"");
tz.z = 5.0;
assert(!inproto(tz.x));
assert(!inproto(tz.y));
assert(inproto(tz.z));
clearproto(tz.y);
assert(!inproto(tz.x));
assert(!inproto(tz.y));
assert(inproto(tz.z));
clearproto(tz.z);
assert(tz.z == 5.0);
assert(!inproto(tz.x));
assert(!inproto(tz.y));
assert(!inproto(tz.z));
tz = convert(T, convert(bytes, tz));
assert(tz == empty);
assert(convert(bytes, tz) == convert(bytes, empty));
type TT = parsedmessage {a: array of bytes @ 1 : string, b: T @ 2, c: T @ 3, d: array of T @ 4};
tt: TT = convert(TT, B"");
assert(!inproto(tt.a));
assert(!inproto(tt.b));
assert(!inproto(tt.c));
assert(!inproto(tt.d));
tt.b = convert(T, B"");
assert(!inproto(tt.b.x));
assert(!inproto(tt.b.y));
assert(!inproto(tt.b.z));
tt.d = new(array of T, 1, convert(T, B""));
assert(!inproto(tt.d[0].x));
assert(!inproto(tt.d[0].y));
assert(!inproto(tt.d[0].z));
tt = {{B"a", B"b", B"c"}, {B"abc", 1, 2.0}, {B"def", 3, 4.0}, {{B"abc", 1, 2.0}, {B"def", 3, 4.0}}};
assert(inproto(tt.a));
assert(inproto(tt.b));
assert(inproto(tt.b.x));
assert(inproto(tt.b.y));
assert(inproto(tt.b.z));
assert(inproto(tt.c));
assert(inproto(tt.c.x));
assert(inproto(tt.c.y));
assert(inproto(tt.c.z));
assert(inproto(tt.d));
assert(inproto(tt.d[0].x));
assert(inproto(tt.d[0].y));
assert(inproto(tt.d[0].z));
assert(inproto(tt.d[1].x));
assert(inproto(tt.d[1].y));
assert(inproto(tt.d[1].z));
clearproto(tt.a);
assert(len(tt.a) == 3);
assert(!inproto(tt.a));
assert(inproto(tt.b));
assert(inproto(tt.c));
assert(inproto(tt.d));
clearproto(tt.b.x);
assert(tt.b.x == B"abc");
assert(!inproto(tt.b.x));
assert(inproto(tt.b.y));
assert(inproto(tt.b.z));
assert(!inproto(tt.a));
assert(inproto(tt.b));
assert(inproto(tt.c));
assert(inproto(tt.d));
clearproto(tt.c);
assert(tt.c == convert(T, {B"def", 3, 4.0}));
assert(inproto(tt.c.x));
assert(inproto(tt.c.y));
assert(inproto(tt.c.z));
assert(!inproto(tt.a));
assert(inproto(tt.b));
assert(!inproto(tt.c));
assert(inproto(tt.d));
clearproto(tt.d);
assert(len(tt.d) == 2);
assert(inproto(tt.d[0].x));
assert(inproto(tt.d[0].y));
assert(inproto(tt.d[0].z));
assert(!inproto(tt.a));
assert(inproto(tt.b));
assert(!inproto(tt.c));
assert(!inproto(tt.d));
tt = convert(TT, convert(bytes, tt));
assert(len(tt.a) == 0);
assert(tt.b == convert(T, {B"123", 1, 2.0}));
assert(tt.c == convert(T, {B"123", 123, 1.23}));
assert(len(tt.d) == 0);
type Foo = {label: bytes @ 1};
a: Foo = {B"foobar"};
b: Foo = a;
c: Foo = convert(Foo, convert(bytes, a));
assert(inproto(a.label));
assert(inproto(b.label));
assert(inproto(c.label));
assert(a == b);
assert(a == c);
assert(b == c);
assert(convert(bytes, a) == convert(bytes, b));
assert(convert(bytes, a) == convert(bytes, c));
assert(convert(bytes, b) == convert(bytes, c));
clearproto(a.label);
assert(!inproto(a.label));
assert(inproto(b.label));
assert(inproto(c.label));
assert(a == b);
assert(a == c);
assert(b == c);
assert(convert(bytes, a) != convert(bytes, b));
assert(convert(bytes, a) != convert(bytes, c));
assert(convert(bytes, b) == convert(bytes, c));
assert(convert(bytes, a) == B"");
