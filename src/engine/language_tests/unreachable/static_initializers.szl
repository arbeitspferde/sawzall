# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# Static initializers create corner cases for reachability analysis.

type Pair = { a:int, b:int };

# We must visit the type declarations to record that PairUndef is reachable.
type PairUtil = {
  type PairUtilHelper = {
    static CreateUndef: function(): Pair {
      undef: Pair;
      return undef;
    },
  },

  static UndefPair: function(): Pair {
    return PairUtilHelper.CreateUndef();
  },

  # Since static initializers are always executed, UndefPair is referenced
  # and we treat it as reachable.
  static UndefPairAlias := UndefPair,
};



# We must visit static initializers within unreachable functions.
UnreachableWrapper: function() {
  static ReachableStaticFun: function(): int {
    emit stdout <- "returning 33";
    return 33;
  };

  static ReferencedStaticVal: int = ReachableStaticFun();
};

