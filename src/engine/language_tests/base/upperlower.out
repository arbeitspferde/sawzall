expect: map [int] of string = {304: "130: İ: i(1) İ(1)", 305: "131: ı: ı(1) I(1)", 383: "17f: ſ: ſ(1) S(1)", 570: "23a: Ⱥ: ⱥ(1) Ⱥ(1)", 574: "23e: Ⱦ: ⱦ(1) Ⱦ(1)", 619: "26b: ɫ: ɫ(1) Ɫ(1)", 637: "27d: ɽ: ɽ(1) Ɽ(1)", 8126: "1fbe: ι: ι(1) Ι(1)", 8486: "2126: Ω: ω(1) Ω(1)", 8490: "212a: K: k(1) K(1)", 8491: "212b: Å: å(1) Å(1)", 11362: "2c62: Ɫ: ɫ(1) Ɫ(1)", 11364: "2c64: Ɽ: ɽ(1) Ɽ(1)", 11365: "2c65: ⱥ: ⱥ(1) Ⱥ(1)", 11366: "2c66: ⱦ: ⱦ(1) Ⱦ(1)"};
for (i: int = 1; i < 65536; i++)
{
	if ((55296 <= i) && (i <= 57343))
		continue;
	char: string = new(string, 1, i);
	lower: string = lowercase(char);
	upper: string = uppercase(char);
	if (len(convert(bytes, upper)) != len(convert(bytes, lower)))
		assert(expect[i] == format("%x: %c: %s(%d) %s(%d)", i, i, lowercase(char), len(lower), uppercase(char), len(upper)));
}
x: int;
assert(lowercase("HelloÄ日本語ΛЖ") == "helloä日本語λж");
assert(uppercase("helloä日本語λж") == "HELLOÄ日本語ΛЖ");
str: string;
str = "(a-z=A-Z à-ö=À-Ö ø-þ=Ø-Þ ɖ-ɗ=Ɖ-Ɗ ʊ-ʋ=Ʊ-Ʋ έ-ί=Έ-Ί α-ρ=Α-Ρ σ-ϋ=Σ-Ϋ ύ-ώ=Ύ-Ώ а-я=А-Я ё-ќ=Ё-Ќ ў-џ=Ў-Џ ա-ֆ=Ա-Ֆ ἀ-ἇ=Ἀ-Ἇ ἐ-ἕ=Ἐ-Ἕ ἠ-ἧ=Ἠ-Ἧ ἰ-ἷ=Ἰ-Ἷ ὀ-ὅ=Ὀ-Ὅ ὠ-ὧ=Ὠ-Ὧ ὰ-ά=Ὰ-Ά ὲ-ή=Ὲ-Ή ὶ-ί=Ὶ-Ί ὸ-ό=Ὸ-Ό ὺ-ύ=Ὺ-Ύ ὼ-ώ=Ὼ-Ώ ᾀ-ᾇ=ᾈ-ᾏ ᾐ-ᾗ=ᾘ-ᾟ ᾠ-ᾧ=ᾨ-ᾯ ᾰ-ᾱ=Ᾰ-Ᾱ ῐ-ῑ=Ῐ-Ῑ ῠ-ῡ=Ῠ-Ῡ ⅰ-ⅿ=Ⅰ-Ⅿ ⓐ-ⓩ=Ⓐ-Ⓩ ａ-ｚ=Ａ-Ｚ)";
assert(lowercase(str) == "(a-z=a-z à-ö=à-ö ø-þ=ø-þ ɖ-ɗ=ɖ-ɗ ʊ-ʋ=ʊ-ʋ έ-ί=έ-ί α-ρ=α-ρ σ-ϋ=σ-ϋ ύ-ώ=ύ-ώ а-я=а-я ё-ќ=ё-ќ ў-џ=ў-џ ա-ֆ=ա-ֆ ἀ-ἇ=ἀ-ἇ ἐ-ἕ=ἐ-ἕ ἠ-ἧ=ἠ-ἧ ἰ-ἷ=ἰ-ἷ ὀ-ὅ=ὀ-ὅ ὠ-ὧ=ὠ-ὧ ὰ-ά=ὰ-ά ὲ-ή=ὲ-ή ὶ-ί=ὶ-ί ὸ-ό=ὸ-ό ὺ-ύ=ὺ-ύ ὼ-ώ=ὼ-ώ ᾀ-ᾇ=ᾀ-ᾇ ᾐ-ᾗ=ᾐ-ᾗ ᾠ-ᾧ=ᾠ-ᾧ ᾰ-ᾱ=ᾰ-ᾱ ῐ-ῑ=ῐ-ῑ ῠ-ῡ=ῠ-ῡ ⅰ-ⅿ=ⅰ-ⅿ ⓐ-ⓩ=ⓐ-ⓩ ａ-ｚ=ａ-ｚ)");
assert(uppercase(str) == "(A-Z=A-Z À-Ö=À-Ö Ø-Þ=Ø-Þ Ɖ-Ɗ=Ɖ-Ɗ Ʊ-Ʋ=Ʊ-Ʋ Έ-Ί=Έ-Ί Α-Ρ=Α-Ρ Σ-Ϋ=Σ-Ϋ Ύ-Ώ=Ύ-Ώ А-Я=А-Я Ё-Ќ=Ё-Ќ Ў-Џ=Ў-Џ Ա-Ֆ=Ա-Ֆ Ἀ-Ἇ=Ἀ-Ἇ Ἐ-Ἕ=Ἐ-Ἕ Ἠ-Ἧ=Ἠ-Ἧ Ἰ-Ἷ=Ἰ-Ἷ Ὀ-Ὅ=Ὀ-Ὅ Ὠ-Ὧ=Ὠ-Ὧ Ὰ-Ά=Ὰ-Ά Ὲ-Ή=Ὲ-Ή Ὶ-Ί=Ὶ-Ί Ὸ-Ό=Ὸ-Ό Ὺ-Ύ=Ὺ-Ύ Ὼ-Ώ=Ὼ-Ώ ᾈ-ᾏ=ᾈ-ᾏ ᾘ-ᾟ=ᾘ-ᾟ ᾨ-ᾯ=ᾨ-ᾯ Ᾰ-Ᾱ=Ᾰ-Ᾱ Ῐ-Ῑ=Ῐ-Ῑ Ῠ-Ῡ=Ῠ-Ῡ Ⅰ-Ⅿ=Ⅰ-Ⅿ Ⓐ-Ⓩ=Ⓐ-Ⓩ Ａ-Ｚ=Ａ-Ｚ)");
str = "(ÿ=Ÿ ā=Ā ă=Ă ą=Ą ć=Ć ĉ=Ĉ ċ=Ċ č=Č ď=Ď đ=Đ ē=Ē ĕ=Ĕ ė=Ė ę=Ę ě=Ě ĝ=Ĝ ğ=Ğ ġ=Ġ ģ=Ģ ĥ=Ĥ ħ=Ħ ĩ=Ĩ ī=Ī ĭ=Ĭ į=Į ı=I ĳ=Ĳ ĵ=Ĵ ķ=Ķ ĺ=Ĺ ļ=Ļ ľ=Ľ ŀ=Ŀ ł=Ł ń=Ń ņ=Ņ ň=Ň ŋ=Ŋ ō=Ō ŏ=Ŏ ő=Ő œ=Œ ŕ=Ŕ ŗ=Ŗ ř=Ř ś=Ś ŝ=Ŝ ş=Ş š=Š ţ=Ţ ť=Ť ŧ=Ŧ ũ=Ũ ū=Ū ŭ=Ŭ ů=Ů ű=Ű ų=Ų ŵ=Ŵ ŷ=Ŷ ź=Ź ż=Ż ž=Ž ſ=S ƃ=Ƃ ƅ=Ƅ ƈ=Ƈ ƌ=Ƌ ƒ=Ƒ ƙ=Ƙ ơ=Ơ ƣ=Ƣ ƥ=Ƥ ƨ=Ƨ ƭ=Ƭ ư=Ư ƴ=Ƴ ƶ=Ƶ ƹ=Ƹ ƽ=Ƽ ǅ=Ǆ ǆ=Ǆ ǈ=Ǉ ǉ=Ǉ ǋ=Ǌ ǌ=Ǌ ǎ=Ǎ ǐ=Ǐ ǒ=Ǒ ǔ=Ǔ ǖ=Ǖ ǘ=Ǘ ǚ=Ǚ ǜ=Ǜ ǟ=Ǟ ǡ=Ǡ ǣ=Ǣ ǥ=Ǥ ǧ=Ǧ ǩ=Ǩ ǫ=Ǫ ǭ=Ǭ ǯ=Ǯ ǲ=Ǳ ǳ=Ǳ ǵ=Ǵ ǻ=Ǻ ǽ=Ǽ ǿ=Ǿ ȁ=Ȁ ȃ=Ȃ ȅ=Ȅ ȇ=Ȇ ȉ=Ȉ ȋ=Ȋ ȍ=Ȍ ȏ=Ȏ ȑ=Ȑ ȓ=Ȓ ȕ=Ȕ ȗ=Ȗ ɓ=Ɓ ɔ=Ɔ ə=Ə ɛ=Ɛ ɠ=Ɠ ɣ=Ɣ ɨ=Ɨ ɩ=Ɩ ɯ=Ɯ ɲ=Ɲ ʃ=Ʃ ʈ=Ʈ ʒ=Ʒ ά=Ά ό=Ό ϐ=Β ϑ=Θ ϕ=Φ ϖ=Π ϣ=Ϣ ϥ=Ϥ ϧ=Ϧ ϩ=Ϩ ϫ=Ϫ ϭ=Ϭ ϯ=Ϯ ϰ=Κ ϱ=Ρ ѡ=Ѡ ѣ=Ѣ ѥ=Ѥ ѧ=Ѧ ѩ=Ѩ ѫ=Ѫ ѭ=Ѭ ѯ=Ѯ ѱ=Ѱ ѳ=Ѳ ѵ=Ѵ ѷ=Ѷ ѹ=Ѹ ѻ=Ѻ ѽ=Ѽ ѿ=Ѿ ҁ=Ҁ ґ=Ґ ғ=Ғ ҕ=Ҕ җ=Җ ҙ=Ҙ қ=Қ ҝ=Ҝ ҟ=Ҟ ҡ=Ҡ ң=Ң ҥ=Ҥ ҧ=Ҧ ҩ=Ҩ ҫ=Ҫ ҭ=Ҭ ү=Ү ұ=Ұ ҳ=Ҳ ҵ=Ҵ ҷ=Ҷ ҹ=Ҹ һ=Һ ҽ=Ҽ ҿ=Ҿ ӂ=Ӂ ӄ=Ӄ ӈ=Ӈ ӌ=Ӌ ӑ=Ӑ ӓ=Ӓ ӕ=Ӕ ӗ=Ӗ ә=Ә ӛ=Ӛ ӝ=Ӝ ӟ=Ӟ ӡ=Ӡ ӣ=Ӣ ӥ=Ӥ ӧ=Ӧ ө=Ө ӫ=Ӫ ӯ=Ӯ ӱ=Ӱ ӳ=Ӳ ӵ=Ӵ ӹ=Ӹ ḁ=Ḁ ḃ=Ḃ ḅ=Ḅ ḇ=Ḇ ḉ=Ḉ ḋ=Ḋ ḍ=Ḍ ḏ=Ḏ ḑ=Ḑ ḓ=Ḓ ḕ=Ḕ ḗ=Ḗ ḙ=Ḙ ḛ=Ḛ ḝ=Ḝ ḟ=Ḟ ḡ=Ḡ ḣ=Ḣ ḥ=Ḥ ḧ=Ḧ ḩ=Ḩ ḫ=Ḫ ḭ=Ḭ ḯ=Ḯ ḱ=Ḱ ḳ=Ḳ ḵ=Ḵ ḷ=Ḷ ḹ=Ḹ ḻ=Ḻ ḽ=Ḽ ḿ=Ḿ ṁ=Ṁ ṃ=Ṃ ṅ=Ṅ ṇ=Ṇ ṉ=Ṉ ṋ=Ṋ ṍ=Ṍ ṏ=Ṏ ṑ=Ṑ ṓ=Ṓ ṕ=Ṕ ṗ=Ṗ ṙ=Ṙ ṛ=Ṛ ṝ=Ṝ ṟ=Ṟ ṡ=Ṡ ṣ=Ṣ ṥ=Ṥ ṧ=Ṧ ṩ=Ṩ ṫ=Ṫ ṭ=Ṭ ṯ=Ṯ ṱ=Ṱ ṳ=Ṳ ṵ=Ṵ ṷ=Ṷ ṹ=Ṹ ṻ=Ṻ ṽ=Ṽ ṿ=Ṿ ẁ=Ẁ ẃ=Ẃ ẅ=Ẅ ẇ=Ẇ ẉ=Ẉ ẋ=Ẋ ẍ=Ẍ ẏ=Ẏ ẑ=Ẑ ẓ=Ẓ ẕ=Ẕ ạ=Ạ ả=Ả ấ=Ấ ầ=Ầ ẩ=Ẩ ẫ=Ẫ ậ=Ậ ắ=Ắ ằ=Ằ ẳ=Ẳ ẵ=Ẵ ặ=Ặ ẹ=Ẹ ẻ=Ẻ ẽ=Ẽ ế=Ế ề=Ề ể=Ể ễ=Ễ ệ=Ệ ỉ=Ỉ ị=Ị ọ=Ọ ỏ=Ỏ ố=Ố ồ=Ồ ổ=Ổ ỗ=Ỗ ộ=Ộ ớ=Ớ ờ=Ờ ở=Ở ỡ=Ỡ ợ=Ợ ụ=Ụ ủ=Ủ ứ=Ứ ừ=Ừ ử=Ử ữ=Ữ ự=Ự ỳ=Ỳ ỵ=Ỵ ỷ=Ỷ ỹ=Ỹ ὑ=Ὑ ὓ=Ὓ ὕ=Ὕ ὗ=Ὗ ᾳ=ᾼ ῃ=ῌ ῥ=Ῥ ῳ=ῼ)";
assert(lowercase(str) == "(ÿ=ÿ ā=ā ă=ă ą=ą ć=ć ĉ=ĉ ċ=ċ č=č ď=ď đ=đ ē=ē ĕ=ĕ ė=ė ę=ę ě=ě ĝ=ĝ ğ=ğ ġ=ġ ģ=ģ ĥ=ĥ ħ=ħ ĩ=ĩ ī=ī ĭ=ĭ į=į ı=i ĳ=ĳ ĵ=ĵ ķ=ķ ĺ=ĺ ļ=ļ ľ=ľ ŀ=ŀ ł=ł ń=ń ņ=ņ ň=ň ŋ=ŋ ō=ō ŏ=ŏ ő=ő œ=œ ŕ=ŕ ŗ=ŗ ř=ř ś=ś ŝ=ŝ ş=ş š=š ţ=ţ ť=ť ŧ=ŧ ũ=ũ ū=ū ŭ=ŭ ů=ů ű=ű ų=ų ŵ=ŵ ŷ=ŷ ź=ź ż=ż ž=ž ſ=s ƃ=ƃ ƅ=ƅ ƈ=ƈ ƌ=ƌ ƒ=ƒ ƙ=ƙ ơ=ơ ƣ=ƣ ƥ=ƥ ƨ=ƨ ƭ=ƭ ư=ư ƴ=ƴ ƶ=ƶ ƹ=ƹ ƽ=ƽ ǆ=ǆ ǆ=ǆ ǉ=ǉ ǉ=ǉ ǌ=ǌ ǌ=ǌ ǎ=ǎ ǐ=ǐ ǒ=ǒ ǔ=ǔ ǖ=ǖ ǘ=ǘ ǚ=ǚ ǜ=ǜ ǟ=ǟ ǡ=ǡ ǣ=ǣ ǥ=ǥ ǧ=ǧ ǩ=ǩ ǫ=ǫ ǭ=ǭ ǯ=ǯ ǳ=ǳ ǳ=ǳ ǵ=ǵ ǻ=ǻ ǽ=ǽ ǿ=ǿ ȁ=ȁ ȃ=ȃ ȅ=ȅ ȇ=ȇ ȉ=ȉ ȋ=ȋ ȍ=ȍ ȏ=ȏ ȑ=ȑ ȓ=ȓ ȕ=ȕ ȗ=ȗ ɓ=ɓ ɔ=ɔ ə=ə ɛ=ɛ ɠ=ɠ ɣ=ɣ ɨ=ɨ ɩ=ɩ ɯ=ɯ ɲ=ɲ ʃ=ʃ ʈ=ʈ ʒ=ʒ ά=ά ό=ό ϐ=β ϑ=θ ϕ=φ ϖ=π ϣ=ϣ ϥ=ϥ ϧ=ϧ ϩ=ϩ ϫ=ϫ ϭ=ϭ ϯ=ϯ ϰ=κ ϱ=ρ ѡ=ѡ ѣ=ѣ ѥ=ѥ ѧ=ѧ ѩ=ѩ ѫ=ѫ ѭ=ѭ ѯ=ѯ ѱ=ѱ ѳ=ѳ ѵ=ѵ ѷ=ѷ ѹ=ѹ ѻ=ѻ ѽ=ѽ ѿ=ѿ ҁ=ҁ ґ=ґ ғ=ғ ҕ=ҕ җ=җ ҙ=ҙ қ=қ ҝ=ҝ ҟ=ҟ ҡ=ҡ ң=ң ҥ=ҥ ҧ=ҧ ҩ=ҩ ҫ=ҫ ҭ=ҭ ү=ү ұ=ұ ҳ=ҳ ҵ=ҵ ҷ=ҷ ҹ=ҹ һ=һ ҽ=ҽ ҿ=ҿ ӂ=ӂ ӄ=ӄ ӈ=ӈ ӌ=ӌ ӑ=ӑ ӓ=ӓ ӕ=ӕ ӗ=ӗ ә=ә ӛ=ӛ ӝ=ӝ ӟ=ӟ ӡ=ӡ ӣ=ӣ ӥ=ӥ ӧ=ӧ ө=ө ӫ=ӫ ӯ=ӯ ӱ=ӱ ӳ=ӳ ӵ=ӵ ӹ=ӹ ḁ=ḁ ḃ=ḃ ḅ=ḅ ḇ=ḇ ḉ=ḉ ḋ=ḋ ḍ=ḍ ḏ=ḏ ḑ=ḑ ḓ=ḓ ḕ=ḕ ḗ=ḗ ḙ=ḙ ḛ=ḛ ḝ=ḝ ḟ=ḟ ḡ=ḡ ḣ=ḣ ḥ=ḥ ḧ=ḧ ḩ=ḩ ḫ=ḫ ḭ=ḭ ḯ=ḯ ḱ=ḱ ḳ=ḳ ḵ=ḵ ḷ=ḷ ḹ=ḹ ḻ=ḻ ḽ=ḽ ḿ=ḿ ṁ=ṁ ṃ=ṃ ṅ=ṅ ṇ=ṇ ṉ=ṉ ṋ=ṋ ṍ=ṍ ṏ=ṏ ṑ=ṑ ṓ=ṓ ṕ=ṕ ṗ=ṗ ṙ=ṙ ṛ=ṛ ṝ=ṝ ṟ=ṟ ṡ=ṡ ṣ=ṣ ṥ=ṥ ṧ=ṧ ṩ=ṩ ṫ=ṫ ṭ=ṭ ṯ=ṯ ṱ=ṱ ṳ=ṳ ṵ=ṵ ṷ=ṷ ṹ=ṹ ṻ=ṻ ṽ=ṽ ṿ=ṿ ẁ=ẁ ẃ=ẃ ẅ=ẅ ẇ=ẇ ẉ=ẉ ẋ=ẋ ẍ=ẍ ẏ=ẏ ẑ=ẑ ẓ=ẓ ẕ=ẕ ạ=ạ ả=ả ấ=ấ ầ=ầ ẩ=ẩ ẫ=ẫ ậ=ậ ắ=ắ ằ=ằ ẳ=ẳ ẵ=ẵ ặ=ặ ẹ=ẹ ẻ=ẻ ẽ=ẽ ế=ế ề=ề ể=ể ễ=ễ ệ=ệ ỉ=ỉ ị=ị ọ=ọ ỏ=ỏ ố=ố ồ=ồ ổ=ổ ỗ=ỗ ộ=ộ ớ=ớ ờ=ờ ở=ở ỡ=ỡ ợ=ợ ụ=ụ ủ=ủ ứ=ứ ừ=ừ ử=ử ữ=ữ ự=ự ỳ=ỳ ỵ=ỵ ỷ=ỷ ỹ=ỹ ὑ=ὑ ὓ=ὓ ὕ=ὕ ὗ=ὗ ᾳ=ᾳ ῃ=ῃ ῥ=ῥ ῳ=ῳ)");
assert(uppercase(str) == "(Ÿ=Ÿ Ā=Ā Ă=Ă Ą=Ą Ć=Ć Ĉ=Ĉ Ċ=Ċ Č=Č Ď=Ď Đ=Đ Ē=Ē Ĕ=Ĕ Ė=Ė Ę=Ę Ě=Ě Ĝ=Ĝ Ğ=Ğ Ġ=Ġ Ģ=Ģ Ĥ=Ĥ Ħ=Ħ Ĩ=Ĩ Ī=Ī Ĭ=Ĭ Į=Į I=I Ĳ=Ĳ Ĵ=Ĵ Ķ=Ķ Ĺ=Ĺ Ļ=Ļ Ľ=Ľ Ŀ=Ŀ Ł=Ł Ń=Ń Ņ=Ņ Ň=Ň Ŋ=Ŋ Ō=Ō Ŏ=Ŏ Ő=Ő Œ=Œ Ŕ=Ŕ Ŗ=Ŗ Ř=Ř Ś=Ś Ŝ=Ŝ Ş=Ş Š=Š Ţ=Ţ Ť=Ť Ŧ=Ŧ Ũ=Ũ Ū=Ū Ŭ=Ŭ Ů=Ů Ű=Ű Ų=Ų Ŵ=Ŵ Ŷ=Ŷ Ź=Ź Ż=Ż Ž=Ž S=S Ƃ=Ƃ Ƅ=Ƅ Ƈ=Ƈ Ƌ=Ƌ Ƒ=Ƒ Ƙ=Ƙ Ơ=Ơ Ƣ=Ƣ Ƥ=Ƥ Ƨ=Ƨ Ƭ=Ƭ Ư=Ư Ƴ=Ƴ Ƶ=Ƶ Ƹ=Ƹ Ƽ=Ƽ Ǆ=Ǆ Ǆ=Ǆ Ǉ=Ǉ Ǉ=Ǉ Ǌ=Ǌ Ǌ=Ǌ Ǎ=Ǎ Ǐ=Ǐ Ǒ=Ǒ Ǔ=Ǔ Ǖ=Ǖ Ǘ=Ǘ Ǚ=Ǚ Ǜ=Ǜ Ǟ=Ǟ Ǡ=Ǡ Ǣ=Ǣ Ǥ=Ǥ Ǧ=Ǧ Ǩ=Ǩ Ǫ=Ǫ Ǭ=Ǭ Ǯ=Ǯ Ǳ=Ǳ Ǳ=Ǳ Ǵ=Ǵ Ǻ=Ǻ Ǽ=Ǽ Ǿ=Ǿ Ȁ=Ȁ Ȃ=Ȃ Ȅ=Ȅ Ȇ=Ȇ Ȉ=Ȉ Ȋ=Ȋ Ȍ=Ȍ Ȏ=Ȏ Ȑ=Ȑ Ȓ=Ȓ Ȕ=Ȕ Ȗ=Ȗ Ɓ=Ɓ Ɔ=Ɔ Ə=Ə Ɛ=Ɛ Ɠ=Ɠ Ɣ=Ɣ Ɨ=Ɨ Ɩ=Ɩ Ɯ=Ɯ Ɲ=Ɲ Ʃ=Ʃ Ʈ=Ʈ Ʒ=Ʒ Ά=Ά Ό=Ό Β=Β Θ=Θ Φ=Φ Π=Π Ϣ=Ϣ Ϥ=Ϥ Ϧ=Ϧ Ϩ=Ϩ Ϫ=Ϫ Ϭ=Ϭ Ϯ=Ϯ Κ=Κ Ρ=Ρ Ѡ=Ѡ Ѣ=Ѣ Ѥ=Ѥ Ѧ=Ѧ Ѩ=Ѩ Ѫ=Ѫ Ѭ=Ѭ Ѯ=Ѯ Ѱ=Ѱ Ѳ=Ѳ Ѵ=Ѵ Ѷ=Ѷ Ѹ=Ѹ Ѻ=Ѻ Ѽ=Ѽ Ѿ=Ѿ Ҁ=Ҁ Ґ=Ґ Ғ=Ғ Ҕ=Ҕ Җ=Җ Ҙ=Ҙ Қ=Қ Ҝ=Ҝ Ҟ=Ҟ Ҡ=Ҡ Ң=Ң Ҥ=Ҥ Ҧ=Ҧ Ҩ=Ҩ Ҫ=Ҫ Ҭ=Ҭ Ү=Ү Ұ=Ұ Ҳ=Ҳ Ҵ=Ҵ Ҷ=Ҷ Ҹ=Ҹ Һ=Һ Ҽ=Ҽ Ҿ=Ҿ Ӂ=Ӂ Ӄ=Ӄ Ӈ=Ӈ Ӌ=Ӌ Ӑ=Ӑ Ӓ=Ӓ Ӕ=Ӕ Ӗ=Ӗ Ә=Ә Ӛ=Ӛ Ӝ=Ӝ Ӟ=Ӟ Ӡ=Ӡ Ӣ=Ӣ Ӥ=Ӥ Ӧ=Ӧ Ө=Ө Ӫ=Ӫ Ӯ=Ӯ Ӱ=Ӱ Ӳ=Ӳ Ӵ=Ӵ Ӹ=Ӹ Ḁ=Ḁ Ḃ=Ḃ Ḅ=Ḅ Ḇ=Ḇ Ḉ=Ḉ Ḋ=Ḋ Ḍ=Ḍ Ḏ=Ḏ Ḑ=Ḑ Ḓ=Ḓ Ḕ=Ḕ Ḗ=Ḗ Ḙ=Ḙ Ḛ=Ḛ Ḝ=Ḝ Ḟ=Ḟ Ḡ=Ḡ Ḣ=Ḣ Ḥ=Ḥ Ḧ=Ḧ Ḩ=Ḩ Ḫ=Ḫ Ḭ=Ḭ Ḯ=Ḯ Ḱ=Ḱ Ḳ=Ḳ Ḵ=Ḵ Ḷ=Ḷ Ḹ=Ḹ Ḻ=Ḻ Ḽ=Ḽ Ḿ=Ḿ Ṁ=Ṁ Ṃ=Ṃ Ṅ=Ṅ Ṇ=Ṇ Ṉ=Ṉ Ṋ=Ṋ Ṍ=Ṍ Ṏ=Ṏ Ṑ=Ṑ Ṓ=Ṓ Ṕ=Ṕ Ṗ=Ṗ Ṙ=Ṙ Ṛ=Ṛ Ṝ=Ṝ Ṟ=Ṟ Ṡ=Ṡ Ṣ=Ṣ Ṥ=Ṥ Ṧ=Ṧ Ṩ=Ṩ Ṫ=Ṫ Ṭ=Ṭ Ṯ=Ṯ Ṱ=Ṱ Ṳ=Ṳ Ṵ=Ṵ Ṷ=Ṷ Ṹ=Ṹ Ṻ=Ṻ Ṽ=Ṽ Ṿ=Ṿ Ẁ=Ẁ Ẃ=Ẃ Ẅ=Ẅ Ẇ=Ẇ Ẉ=Ẉ Ẋ=Ẋ Ẍ=Ẍ Ẏ=Ẏ Ẑ=Ẑ Ẓ=Ẓ Ẕ=Ẕ Ạ=Ạ Ả=Ả Ấ=Ấ Ầ=Ầ Ẩ=Ẩ Ẫ=Ẫ Ậ=Ậ Ắ=Ắ Ằ=Ằ Ẳ=Ẳ Ẵ=Ẵ Ặ=Ặ Ẹ=Ẹ Ẻ=Ẻ Ẽ=Ẽ Ế=Ế Ề=Ề Ể=Ể Ễ=Ễ Ệ=Ệ Ỉ=Ỉ Ị=Ị Ọ=Ọ Ỏ=Ỏ Ố=Ố Ồ=Ồ Ổ=Ổ Ỗ=Ỗ Ộ=Ộ Ớ=Ớ Ờ=Ờ Ở=Ở Ỡ=Ỡ Ợ=Ợ Ụ=Ụ Ủ=Ủ Ứ=Ứ Ừ=Ừ Ử=Ử Ữ=Ữ Ự=Ự Ỳ=Ỳ Ỵ=Ỵ Ỷ=Ỷ Ỹ=Ỹ Ὑ=Ὑ Ὓ=Ὓ Ὕ=Ὕ Ὗ=Ὗ ᾼ=ᾼ ῌ=ῌ Ῥ=Ῥ ῼ=ῼ)");
for (i: int = 1; i < 65536; i++)
{
	if ((55296 <= i) && (i <= 57343))
		continue;
	char: string = new(string, 1, i);
	lower: string = lowercase(char);
	upper: string = uppercase(char);
	if (len(convert(bytes, upper)) == len(convert(bytes, lower)))
		continue;
	count: int = 10;
	origstring: string = "";
	for (j: int = 0; j < count; j++)
		origstring = origstring + char;
	l: string = new(string, count, lower[0]);
	u: string = new(string, count, upper[0]);
	assert(lowercase(origstring) == l);
	assert(uppercase(origstring) == u);
}
