assert(format("%T", true) == "bool");
assert(format("%T", convert(bytes, "")) == "bytes");
assert(format("%T", fingerprintof(now())) == "fingerprint");
assert(format("%T", 7.0) == "float");
assert(format("%T", 7) == "int");
assert(format("%T", "hello, sailor") == "string");
assert(format("%T", now()) == "time");
a: array of int = {0, 1, 2};
assert(format("%T", a) == "array of int");
m: map [string] of int = {"zero": 0, "one": 1, "two": 2};
assert(format("%T", m) == "map [string] of int");
f: function(a: int): int {
	return a;
}
;
assert(format("%T", f) == "function(a: int): int");
type ProtoTuple = {x: int = 42 @ 1, y: float = 3.1415 @ 2, t: time @ 3, s: bytes @ 4, static kInt: int = 123, type Tuple = {i: int, f: float}};
t: ProtoTuple = convert(ProtoTuple, B"");
assert(format("%T", t) == "ProtoTuple");
assert(format("%#T", t) == "{x: int = 42 @ 1, y: float = 3.1415 @ 2, t: time @ 3, s: bytes @ 4, static kInt: int = 123, type Tuple = {i: int, f: float}}");
tt: ProtoTuple.Tuple = {1, 1.0};
assert(format("%T", tt) == "ProtoTuple.Tuple");
assert(format("%#T", tt) == "{i: int, f: float}");
