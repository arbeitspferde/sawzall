# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# testing various function declarations

# valid declarations
f1: function () {};
f2: function (x: array of array of float) {};
f3: function (): array of array of float {
  return new (array of array of float, 10, new (array of float, 10, 2.18));
};

# test both syntaxes for recursive function definition
f4 := function(a: int): int { if (a >= 0) return f4(a - 1); return 0; };
f5: function(a: int): int { if (a >= 0) return f5(a - 1); return 0; };

# valid calls
f1();
f2(new (array of array of float, 10, new (array of float, 10, 2.18)));
f3()[3][4];
f4(10);
f5(10);

# testing various return types

type P = { x: float, y: float };
type M = map [key: string] of value: P;
type Ai = array of int;
type As = array of string;
type AM = array of M;
type AP = array of P;

Fi: function (x: int): int {
  return x;
};

FP: function (x: int): P {
  if (x > 5)
    return { FP(x-1).x * FP(x-2).y, FP(x-1).x / FP(x-2).y };
  else
    return { float(x), float(x) - 0.5 };
};

FM: function (x: int): M {
  m: M = {:};
  for (i: int = 0; i < x; i++)
    m[string(i)] = FP(i);
  return m;
};

FAi: function (x: int): Ai {
  return new(Ai, x, x);
};

FAs: function (x: int): As {
  return new(As, x, "0123456789"[0:x]);
};

FAP: function (x: int): AP {
  return new(AP, x, FP(x));
};

FP_expected: array of P = {
  { 0.0, -0.5 },
  { 1.0, 0.5 },
  { 2.0, 1.5 },
  { 3.0, 2.5 },
  { 4.0, 3.5 },
  { 5.0, 4.5 },
  { 17.5, 1.4285714285714286 },
  { 78.75, 3.8888888888888889 },
  { 112.5, 55.125 },
  { 437.5, 28.928571428571432 }
};

for (i: int = 0; i < 10; i++)
  assert(Fi(i) == i);

for (i: int = 0; i < 10; i++)
  assert(FP(i) == FP_expected[i]);

for (i: int = 0; i < 5; i++) {
  actual := FM(i);
  for (j: int = 0; j < len(actual); j++)
    assert(actual[string(j)] == FP_expected[j]);
}

for (i: int = 0; i < 10; i++) {
  actual := FAi(i);
  for (j: int = 0; j < len(actual); j++)
    assert(actual[j] == Ai({ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 })[i]);
}

for (i: int = 0; i < 10; i++) {
  actual := FAs(i);
  for (j: int = 0; j < len(actual); j++)
    assert(actual[j] == "0123456789"[0:i]);
}

for (i: int = 0; i < 10; i++) {
  actual := FAP(i);
  for (j: int = 0; j < len(actual); j++)
    assert(actual[j] == FP_expected[i]);
}


