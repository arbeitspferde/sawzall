# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

#!/bin/env szl

#szl_options

# each case opens a new scope
x: int = 0;
switch (x) {
  case 0:
    x: int = 0;
  case 1:
    x: int = 1;
  default:
    x: int = -1;
}

#desc:  different expressions at 'switch(expression){' part

#inst:  literals:

switch (1) {
  case -10: assert(false, "switch(1) goes to case 0 !!!");
  case 0: assert(false, "switch(1) goes to case 0 !!!");
  case 1: ; # switch(1) goes to case 1 !!!
  default: assert(false, "came to default");
}

i: int = 2;
f: function(): array of int { return {1,2,3,4,5}; };
switch (i) {
  case 2:
    switch(10+i) {
      case 12:
        switch(f()[1]) {
          case 1: assert(false, "came to the last level");
          default: ; # came to last default
        }
      default: assert(false, "default for 10+i");
    }
  default: assert(false, "default of switch(i)");
}

switch ("a") {
  case "a": ; # switch("a") goes to case "ai"!!!
  default: assert(false, "came to default");
}

switch ('a') {
  case 97: ; # "switch('a') goes to case 97 !!!
  case 'a':  assert(false, "switch('a') goes to case 'a' !!!");
  default: assert(false, "came to default");
}


switch (bytes({ 10, 11, 12, 13 })) {
  case { 10, 11, 12, 13 }:
    ; # switch(bytes{..}) goes to case {...}
  case bytes({ 10, 11, 12, 13 }):
    assert(false, "switch(bytes{..}) goes to case bytes({...}):");
  default:
    assert(false, "came to default");
}

switch (bytes({ 10, 11, 12, 13 })) {
  case bytes({ 10, 11, 12, 13}):
    ; # switch(bytes{..}) goes to case bytes({...})
  case { 10, 11, 12, 13 }:
    assert(false, "switch(bytes{..}) goes to case {...}:");
  default:
    assert(false, "came to default");
}

switch (trunctoyear(now())) {
  case now():
    assert(false, "switch(trunctoyear(now())) goes to case now()");
  case trunctoyear(now()): 
    ; # switch(trunctoyear(now())) goes to case trunctoyear(now)
  default:
    ;
}

switch (fingerprintof({ 1, 2, 3, 4, 5, 6, 7, 8 })) {
  case fingerprint(bytes({ 1, 2 ,3, 4, 5, 6, 7, 8 })):
    assert(false, "switch(fingerprint({1,2,3,4,5,6,7,8})) goes to case fingerprint(bytes({1,2,3,4,5,6,7,8}))"); 
  case fingerprintof({ 1, 2, 3, 4, 5, 6, 7, 8 }):
    ; # switch(fingerprint({1,2,3,4,5,6,7,8})) goes to case fingerprintof({1,2,3,4,5,6,7,8})
  default:
    assert(false, "came to default");
}

switch (fingerprint(bytes({ 1, 2, 3, 4, 5, 6, 7, 8 }))) {
  case fingerprint(bytes({ 1, 2, 3, 4, 5, 6, 7, 8 })):
    ; # switch(fingerprint(bytes({1,2,3,4,5,6,7,8}))) goes to case fingerprint(bytes({1,2,3,4,5,6,7,8}))
  case fingerprintof({ 1, 2, 3 }):
    assert(false, "switch(fingerprint(bytes({1,2,3,4,5,6,7,8}))) goes to case fingerprintof({1,2,3,4,5,6,7,8})");
  default:
    assert(false, "came to default");

}


switch (float(22 / 7)) {
  case 3.14:  assert(false, "switch(22/7) goes to 3.14");
  case float(22/7): ; # switch(22/7) goes to 22/7
  default: assert(false, "default for switch(22/7)");
}

switch (1 < 2) {
  case true:
    switch(2 != 2) {
      case false: ; # Humm This works
      default: assert(false, "bool default 2");
    }
  default:
    assert(false, "bool default 1");
}
