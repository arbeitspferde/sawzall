# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------




## Test 1: Rejection of normal tuples.
type T = { a: int, b: int };
t: T = { 1, 2 };
assert(!def(inprotocount(t)));

## Test 2: Inproto-count on a fully referenced, nested protobuf.
# Define some protos to test the intrinsic.
type InnerProto = parsedmessage {
  a: array of int @ 1,
  b: bytes @ 2
};

type OuterProto = parsedmessage {
  a: array of InnerProto @ 1,
  b: InnerProto @ 2,
  c: int @ 3,
  d: float @ 4
};

# Set p to the contents following contents using a wire format string
#
# {
#   {
#     { { 42, 24}, B"dummy1" },
#     { <not-inproto>, B"dummy1" }
#   },
#   { { 1, 2, 3 }, B"abc" },
#   <not-inproto>,
#   3.1415927
# }
#
p: OuterProto =
    X"0a0c082a0818120664756d6d79310a08120664756d6d793212" +
    X"0b08010802080312036162632197d17e5afb210940";

dummy_bytes: bytes = p;  # Byte conversions reference all fields.
assert(inprotocount(p) == 8);


## Test 3: Partially referenced protobuf
# The correct answer changed to 2 because we now preserve all fields
# of tuples passed to an intrinsic.

type OtherProto = parsedmessage {
  a: array of int @ 1,
  b: bytes @ 2
};

q: OtherProto = X"0801120178";  # { { 1 }, B"x" }
dummy_bytes = q.b;
assert(inprotocount(q) == 2);
