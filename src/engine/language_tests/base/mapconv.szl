# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# This test is generated by arraymapconv.sh; do not modify this file.
# Any changes should be made to the script.
#
# Test the array to map conversions.



# General-purpose input values for each type.
l1: bool = false;
l2: bool = true;
l3: bool = true;
l4: bool = false;
b1: bytes = B"abcdefgh";  # exactly 8 bytes so can convert to fpr, int, uint
b2: bytes = B"ijklmnop";
b3: bytes = B"qrstuvwx";
b4: bytes = B"yzabcdef";
p1: fingerprint = 1234567890p;
p2: fingerprint = 2345678901p;
p3: fingerprint = 3456789012p;
p4: fingerprint = 4567890123p;
f1: float = 1.1;
f2: float = 2.3;
f3: float = 3.5;
f4: float = 4.7;
i1: int = 5678901234;
i2: int = 6789012345;
i3: int = 7890123456;
i4: int = 8901234567;
s1: string = "abc";
s2: string = "def";
s3: string = "ghi";
s4: string = "jkl";
t1: time = 9876543210;
t2: time = 8765432109;
t3: time = 7654321098;
t4: time = 6543210987;
u1: uint = 5432109876u;
u2: uint = 4321098765u;
u3: uint = 3210987654u;
u4: uint = 2109876543u;

# Input values for string to xxx depend on the target type.
sl1: string = "F";
sl2: string = "T";
sl3: string = "T";
sl4: string = "F";
sb1: string = s1;
sb2: string = s2;
sb3: string = s3;
sb4: string = s4;
sp1: string = "1234567890";
sp2: string = "2345678901";
sp3: string = "3456789012";
sp4: string = "4567890123";
sf1: string = "1.1";
sf2: string = "2.3";
sf3: string = "3.5";
sf4: string = "4.7";
si1: string = "5678901234";
si2: string = "6789012345";
si3: string = "7890123456";
si4: string = "8901234567";
st1: string = "Mar  4 15:25:48 PST 2009";
st2: string = "Mar  5 15:25:48 PST 2009";
st3: string = "Mar  6 15:25:48 PST 2009";
st4: string = "Mar  7 15:25:48 PST 2009";
su1: string = "5432109876";
su2: string = "4321098765";
su3: string = "3210987654";
su4: string = "2109876543";



# array of bool to map[bool] of int

maplil: map[bool] of int = convert(map[bool] of int, { l1, l2, l3, l4 });
assert(len(maplil) == 2);
assert(maplil[l1] == int(l2));
assert(maplil[l3] == int(l4));

# array of bool to map[bool] of string

maplsl: map[bool] of string = convert(map[bool] of string, { l1, l2, l3, l4 });
assert(len(maplsl) == 2);
assert(maplsl[l1] == string(l2));
assert(maplsl[l3] == string(l4));

# array of bool to map[bool] of uint

maplul: map[bool] of uint = convert(map[bool] of uint, { l1, l2, l3, l4 });
assert(len(maplul) == 2);
assert(maplul[l1] == uint(l2));
assert(maplul[l3] == uint(l4));

# array of bool to map[int] of bool

mapill: map[int] of bool = convert(map[int] of bool, { l1, l2, l3, l4 });
assert(len(mapill) == 2);
assert(mapill[int(l1)] == l2);
assert(mapill[int(l3)] == l4);

# array of bool to map[int] of int

mapiil: map[int] of int = convert(map[int] of int, { l1, l2, l3, l4 });
assert(len(mapiil) == 2);
assert(mapiil[int(l1)] == int(l2));
assert(mapiil[int(l3)] == int(l4));

# array of bool to map[int] of string

mapisl: map[int] of string = convert(map[int] of string, { l1, l2, l3, l4 });
assert(len(mapisl) == 2);
assert(mapisl[int(l1)] == string(l2));
assert(mapisl[int(l3)] == string(l4));

# array of bool to map[int] of uint

mapiul: map[int] of uint = convert(map[int] of uint, { l1, l2, l3, l4 });
assert(len(mapiul) == 2);
assert(mapiul[int(l1)] == uint(l2));
assert(mapiul[int(l3)] == uint(l4));

# array of bool to map[string] of bool

mapsll: map[string] of bool = convert(map[string] of bool, { l1, l2, l3, l4 });
assert(len(mapsll) == 2);
assert(mapsll[string(l1)] == l2);
assert(mapsll[string(l3)] == l4);

# array of bool to map[string] of int

mapsil: map[string] of int = convert(map[string] of int, { l1, l2, l3, l4 });
assert(len(mapsil) == 2);
assert(mapsil[string(l1)] == int(l2));
assert(mapsil[string(l3)] == int(l4));

# array of bool to map[string] of string

mapssl: map[string] of string = convert(map[string] of string, { l1, l2, l3, l4 });
assert(len(mapssl) == 2);
assert(mapssl[string(l1)] == string(l2));
assert(mapssl[string(l3)] == string(l4));

# array of bool to map[string] of uint

mapsul: map[string] of uint = convert(map[string] of uint, { l1, l2, l3, l4 });
assert(len(mapsul) == 2);
assert(mapsul[string(l1)] == uint(l2));
assert(mapsul[string(l3)] == uint(l4));

# array of bool to map[uint] of bool

mapull: map[uint] of bool = convert(map[uint] of bool, { l1, l2, l3, l4 });
assert(len(mapull) == 2);
assert(mapull[uint(l1)] == l2);
assert(mapull[uint(l3)] == l4);

# array of bool to map[uint] of int

mapuil: map[uint] of int = convert(map[uint] of int, { l1, l2, l3, l4 });
assert(len(mapuil) == 2);
assert(mapuil[uint(l1)] == int(l2));
assert(mapuil[uint(l3)] == int(l4));

# array of bool to map[uint] of string

mapusl: map[uint] of string = convert(map[uint] of string, { l1, l2, l3, l4 });
assert(len(mapusl) == 2);
assert(mapusl[uint(l1)] == string(l2));
assert(mapusl[uint(l3)] == string(l4));

# array of bool to map[uint] of uint

mapuul: map[uint] of uint = convert(map[uint] of uint, { l1, l2, l3, l4 });
assert(len(mapuul) == 2);
assert(mapuul[uint(l1)] == uint(l2));
assert(mapuul[uint(l3)] == uint(l4));

# array of bytes to map[bytes] of fingerprint

mapbpb: map[bytes] of fingerprint = convert(map[bytes] of fingerprint, { b1, b2, b3, b4 });
assert(len(mapbpb) == 2);
assert(mapbpb[b1] == fingerprint(b2));
assert(mapbpb[b3] == fingerprint(b4));

# array of bytes to map[bytes] of string

mapbsb: map[bytes] of string = convert(map[bytes] of string, { b1, b2, b3, b4 });
assert(len(mapbsb) == 2);
assert(mapbsb[b1] == string(b2));
assert(mapbsb[b3] == string(b4));

# array of bytes to map[fingerprint] of bytes

mappbb: map[fingerprint] of bytes = convert(map[fingerprint] of bytes, { b1, b2, b3, b4 });
assert(len(mappbb) == 2);
assert(mappbb[fingerprint(b1)] == b2);
assert(mappbb[fingerprint(b3)] == b4);

# array of bytes to map[fingerprint] of fingerprint

mapppb: map[fingerprint] of fingerprint = convert(map[fingerprint] of fingerprint, { b1, b2, b3, b4 });
assert(len(mapppb) == 2);
assert(mapppb[fingerprint(b1)] == fingerprint(b2));
assert(mapppb[fingerprint(b3)] == fingerprint(b4));

# array of bytes to map[fingerprint] of string

mappsb: map[fingerprint] of string = convert(map[fingerprint] of string, { b1, b2, b3, b4 });
assert(len(mappsb) == 2);
assert(mappsb[fingerprint(b1)] == string(b2));
assert(mappsb[fingerprint(b3)] == string(b4));

# array of bytes to map[string] of bytes

mapsbb: map[string] of bytes = convert(map[string] of bytes, { b1, b2, b3, b4 });
assert(len(mapsbb) == 2);
assert(mapsbb[string(b1)] == b2);
assert(mapsbb[string(b3)] == b4);

# array of bytes to map[string] of fingerprint

mapspb: map[string] of fingerprint = convert(map[string] of fingerprint, { b1, b2, b3, b4 });
assert(len(mapspb) == 2);
assert(mapspb[string(b1)] == fingerprint(b2));
assert(mapspb[string(b3)] == fingerprint(b4));

# array of bytes to map[string] of string

mapssb: map[string] of string = convert(map[string] of string, { b1, b2, b3, b4 });
assert(len(mapssb) == 2);
assert(mapssb[string(b1)] == string(b2));
assert(mapssb[string(b3)] == string(b4));

# array of fingerprint to map[bytes] of bytes

mapbbp: map[bytes] of bytes = convert(map[bytes] of bytes, { p1, p2, p3, p4 });
assert(len(mapbbp) == 2);
assert(mapbbp[bytes(p1)] == bytes(p2));
assert(mapbbp[bytes(p3)] == bytes(p4));

# array of fingerprint to map[bytes] of fingerprint

mapbpp: map[bytes] of fingerprint = convert(map[bytes] of fingerprint, { p1, p2, p3, p4 });
assert(len(mapbpp) == 2);
assert(mapbpp[bytes(p1)] == p2);
assert(mapbpp[bytes(p3)] == p4);

# array of fingerprint to map[bytes] of int

mapbip: map[bytes] of int = convert(map[bytes] of int, { p1, p2, p3, p4 });
assert(len(mapbip) == 2);
assert(mapbip[bytes(p1)] == int(p2));
assert(mapbip[bytes(p3)] == int(p4));

# array of fingerprint to map[bytes] of string

mapbsp: map[bytes] of string = convert(map[bytes] of string, { p1, p2, p3, p4 });
assert(len(mapbsp) == 2);
assert(mapbsp[bytes(p1)] == string(p2));
assert(mapbsp[bytes(p3)] == string(p4));

# array of fingerprint to map[fingerprint] of bytes

mappbp: map[fingerprint] of bytes = convert(map[fingerprint] of bytes, { p1, p2, p3, p4 });
assert(len(mappbp) == 2);
assert(mappbp[p1] == bytes(p2));
assert(mappbp[p3] == bytes(p4));

# array of fingerprint to map[fingerprint] of int

mappip: map[fingerprint] of int = convert(map[fingerprint] of int, { p1, p2, p3, p4 });
assert(len(mappip) == 2);
assert(mappip[p1] == int(p2));
assert(mappip[p3] == int(p4));

# array of fingerprint to map[fingerprint] of string

mappsp: map[fingerprint] of string = convert(map[fingerprint] of string, { p1, p2, p3, p4 });
assert(len(mappsp) == 2);
assert(mappsp[p1] == string(p2));
assert(mappsp[p3] == string(p4));

# array of fingerprint to map[int] of bytes

mapibp: map[int] of bytes = convert(map[int] of bytes, { p1, p2, p3, p4 });
assert(len(mapibp) == 2);
assert(mapibp[int(p1)] == bytes(p2));
assert(mapibp[int(p3)] == bytes(p4));

# array of fingerprint to map[int] of fingerprint

mapipp: map[int] of fingerprint = convert(map[int] of fingerprint, { p1, p2, p3, p4 });
assert(len(mapipp) == 2);
assert(mapipp[int(p1)] == p2);
assert(mapipp[int(p3)] == p4);

# array of fingerprint to map[int] of int

mapiip: map[int] of int = convert(map[int] of int, { p1, p2, p3, p4 });
assert(len(mapiip) == 2);
assert(mapiip[int(p1)] == int(p2));
assert(mapiip[int(p3)] == int(p4));

# array of fingerprint to map[int] of string

mapisp: map[int] of string = convert(map[int] of string, { p1, p2, p3, p4 });
assert(len(mapisp) == 2);
assert(mapisp[int(p1)] == string(p2));
assert(mapisp[int(p3)] == string(p4));

# array of fingerprint to map[string] of bytes

mapsbp: map[string] of bytes = convert(map[string] of bytes, { p1, p2, p3, p4 });
assert(len(mapsbp) == 2);
assert(mapsbp[string(p1)] == bytes(p2));
assert(mapsbp[string(p3)] == bytes(p4));

# array of fingerprint to map[string] of fingerprint

mapspp: map[string] of fingerprint = convert(map[string] of fingerprint, { p1, p2, p3, p4 });
assert(len(mapspp) == 2);
assert(mapspp[string(p1)] == p2);
assert(mapspp[string(p3)] == p4);

# array of fingerprint to map[string] of int

mapsip: map[string] of int = convert(map[string] of int, { p1, p2, p3, p4 });
assert(len(mapsip) == 2);
assert(mapsip[string(p1)] == int(p2));
assert(mapsip[string(p3)] == int(p4));

# array of fingerprint to map[string] of string

mapssp: map[string] of string = convert(map[string] of string, { p1, p2, p3, p4 });
assert(len(mapssp) == 2);
assert(mapssp[string(p1)] == string(p2));
assert(mapssp[string(p3)] == string(p4));

# array of float to map[float] of int

mapfif: map[float] of int = convert(map[float] of int, { f1, f2, f3, f4 });
assert(len(mapfif) == 2);
assert(mapfif[f1] == int(f2));
assert(mapfif[f3] == int(f4));

# array of float to map[float] of string

mapfsf: map[float] of string = convert(map[float] of string, { f1, f2, f3, f4 });
assert(len(mapfsf) == 2);
assert(mapfsf[f1] == string(f2));
assert(mapfsf[f3] == string(f4));

# array of float to map[float] of uint

mapfuf: map[float] of uint = convert(map[float] of uint, { f1, f2, f3, f4 });
assert(len(mapfuf) == 2);
assert(mapfuf[f1] == uint(f2));
assert(mapfuf[f3] == uint(f4));

# array of float to map[int] of float

mapiff: map[int] of float = convert(map[int] of float, { f1, f2, f3, f4 });
assert(len(mapiff) == 2);
assert(mapiff[int(f1)] == f2);
assert(mapiff[int(f3)] == f4);

# array of float to map[int] of int

mapiif: map[int] of int = convert(map[int] of int, { f1, f2, f3, f4 });
assert(len(mapiif) == 2);
assert(mapiif[int(f1)] == int(f2));
assert(mapiif[int(f3)] == int(f4));

# array of float to map[int] of string

mapisf: map[int] of string = convert(map[int] of string, { f1, f2, f3, f4 });
assert(len(mapisf) == 2);
assert(mapisf[int(f1)] == string(f2));
assert(mapisf[int(f3)] == string(f4));

# array of float to map[int] of uint

mapiuf: map[int] of uint = convert(map[int] of uint, { f1, f2, f3, f4 });
assert(len(mapiuf) == 2);
assert(mapiuf[int(f1)] == uint(f2));
assert(mapiuf[int(f3)] == uint(f4));

# array of float to map[string] of float

mapsff: map[string] of float = convert(map[string] of float, { f1, f2, f3, f4 });
assert(len(mapsff) == 2);
assert(mapsff[string(f1)] == f2);
assert(mapsff[string(f3)] == f4);

# array of float to map[string] of int

mapsif: map[string] of int = convert(map[string] of int, { f1, f2, f3, f4 });
assert(len(mapsif) == 2);
assert(mapsif[string(f1)] == int(f2));
assert(mapsif[string(f3)] == int(f4));

# array of float to map[string] of string

mapssf: map[string] of string = convert(map[string] of string, { f1, f2, f3, f4 });
assert(len(mapssf) == 2);
assert(mapssf[string(f1)] == string(f2));
assert(mapssf[string(f3)] == string(f4));

# array of float to map[string] of uint

mapsuf: map[string] of uint = convert(map[string] of uint, { f1, f2, f3, f4 });
assert(len(mapsuf) == 2);
assert(mapsuf[string(f1)] == uint(f2));
assert(mapsuf[string(f3)] == uint(f4));

# array of float to map[uint] of float

mapuff: map[uint] of float = convert(map[uint] of float, { f1, f2, f3, f4 });
assert(len(mapuff) == 2);
assert(mapuff[uint(f1)] == f2);
assert(mapuff[uint(f3)] == f4);

# array of float to map[uint] of int

mapuif: map[uint] of int = convert(map[uint] of int, { f1, f2, f3, f4 });
assert(len(mapuif) == 2);
assert(mapuif[uint(f1)] == int(f2));
assert(mapuif[uint(f3)] == int(f4));

# array of float to map[uint] of string

mapusf: map[uint] of string = convert(map[uint] of string, { f1, f2, f3, f4 });
assert(len(mapusf) == 2);
assert(mapusf[uint(f1)] == string(f2));
assert(mapusf[uint(f3)] == string(f4));

# array of float to map[uint] of uint

mapuuf: map[uint] of uint = convert(map[uint] of uint, { f1, f2, f3, f4 });
assert(len(mapuuf) == 2);
assert(mapuuf[uint(f1)] == uint(f2));
assert(mapuuf[uint(f3)] == uint(f4));

# array of int to map[fingerprint] of fingerprint

mapppi: map[fingerprint] of fingerprint = convert(map[fingerprint] of fingerprint, { i1, i2, i3, i4 });
assert(len(mapppi) == 2);
assert(mapppi[fingerprint(i1)] == fingerprint(i2));
assert(mapppi[fingerprint(i3)] == fingerprint(i4));

# array of int to map[fingerprint] of float

mappfi: map[fingerprint] of float = convert(map[fingerprint] of float, { i1, i2, i3, i4 });
assert(len(mappfi) == 2);
assert(mappfi[fingerprint(i1)] == float(i2));
assert(mappfi[fingerprint(i3)] == float(i4));

# array of int to map[fingerprint] of int

mappii: map[fingerprint] of int = convert(map[fingerprint] of int, { i1, i2, i3, i4 });
assert(len(mappii) == 2);
assert(mappii[fingerprint(i1)] == i2);
assert(mappii[fingerprint(i3)] == i4);

# array of int to map[fingerprint] of string

mappsi: map[fingerprint] of string = convert(map[fingerprint] of string, { i1, i2, i3, i4 });
assert(len(mappsi) == 2);
assert(mappsi[fingerprint(i1)] == string(i2));
assert(mappsi[fingerprint(i3)] == string(i4));

# array of int to map[fingerprint] of time

mappti: map[fingerprint] of time = convert(map[fingerprint] of time, { i1, i2, i3, i4 });
assert(len(mappti) == 2);
assert(mappti[fingerprint(i1)] == time(i2));
assert(mappti[fingerprint(i3)] == time(i4));

# array of int to map[fingerprint] of uint

mappui: map[fingerprint] of uint = convert(map[fingerprint] of uint, { i1, i2, i3, i4 });
assert(len(mappui) == 2);
assert(mappui[fingerprint(i1)] == uint(i2));
assert(mappui[fingerprint(i3)] == uint(i4));

# array of int to map[float] of fingerprint

mapfpi: map[float] of fingerprint = convert(map[float] of fingerprint, { i1, i2, i3, i4 });
assert(len(mapfpi) == 2);
assert(mapfpi[float(i1)] == fingerprint(i2));
assert(mapfpi[float(i3)] == fingerprint(i4));

# array of int to map[float] of float

mapffi: map[float] of float = convert(map[float] of float, { i1, i2, i3, i4 });
assert(len(mapffi) == 2);
assert(mapffi[float(i1)] == float(i2));
assert(mapffi[float(i3)] == float(i4));

# array of int to map[float] of int

mapfii: map[float] of int = convert(map[float] of int, { i1, i2, i3, i4 });
assert(len(mapfii) == 2);
assert(mapfii[float(i1)] == i2);
assert(mapfii[float(i3)] == i4);

# array of int to map[float] of string

mapfsi: map[float] of string = convert(map[float] of string, { i1, i2, i3, i4 });
assert(len(mapfsi) == 2);
assert(mapfsi[float(i1)] == string(i2));
assert(mapfsi[float(i3)] == string(i4));

# array of int to map[float] of time

mapfti: map[float] of time = convert(map[float] of time, { i1, i2, i3, i4 });
assert(len(mapfti) == 2);
assert(mapfti[float(i1)] == time(i2));
assert(mapfti[float(i3)] == time(i4));

# array of int to map[float] of uint

mapfui: map[float] of uint = convert(map[float] of uint, { i1, i2, i3, i4 });
assert(len(mapfui) == 2);
assert(mapfui[float(i1)] == uint(i2));
assert(mapfui[float(i3)] == uint(i4));

# array of int to map[int] of fingerprint

mapipi: map[int] of fingerprint = convert(map[int] of fingerprint, { i1, i2, i3, i4 });
assert(len(mapipi) == 2);
assert(mapipi[i1] == fingerprint(i2));
assert(mapipi[i3] == fingerprint(i4));

# array of int to map[int] of float

mapifi: map[int] of float = convert(map[int] of float, { i1, i2, i3, i4 });
assert(len(mapifi) == 2);
assert(mapifi[i1] == float(i2));
assert(mapifi[i3] == float(i4));

# array of int to map[int] of string

mapisi: map[int] of string = convert(map[int] of string, { i1, i2, i3, i4 });
assert(len(mapisi) == 2);
assert(mapisi[i1] == string(i2));
assert(mapisi[i3] == string(i4));

# array of int to map[int] of time

mapiti: map[int] of time = convert(map[int] of time, { i1, i2, i3, i4 });
assert(len(mapiti) == 2);
assert(mapiti[i1] == time(i2));
assert(mapiti[i3] == time(i4));

# array of int to map[int] of uint

mapiui: map[int] of uint = convert(map[int] of uint, { i1, i2, i3, i4 });
assert(len(mapiui) == 2);
assert(mapiui[i1] == uint(i2));
assert(mapiui[i3] == uint(i4));

# array of int to map[string] of fingerprint

mapspi: map[string] of fingerprint = convert(map[string] of fingerprint, { i1, i2, i3, i4 });
assert(len(mapspi) == 2);
assert(mapspi[string(i1)] == fingerprint(i2));
assert(mapspi[string(i3)] == fingerprint(i4));

# array of int to map[string] of float

mapsfi: map[string] of float = convert(map[string] of float, { i1, i2, i3, i4 });
assert(len(mapsfi) == 2);
assert(mapsfi[string(i1)] == float(i2));
assert(mapsfi[string(i3)] == float(i4));

# array of int to map[string] of int

mapsii: map[string] of int = convert(map[string] of int, { i1, i2, i3, i4 });
assert(len(mapsii) == 2);
assert(mapsii[string(i1)] == i2);
assert(mapsii[string(i3)] == i4);

# array of int to map[string] of string

mapssi: map[string] of string = convert(map[string] of string, { i1, i2, i3, i4 });
assert(len(mapssi) == 2);
assert(mapssi[string(i1)] == string(i2));
assert(mapssi[string(i3)] == string(i4));

# array of int to map[string] of time

mapsti: map[string] of time = convert(map[string] of time, { i1, i2, i3, i4 });
assert(len(mapsti) == 2);
assert(mapsti[string(i1)] == time(i2));
assert(mapsti[string(i3)] == time(i4));

# array of int to map[string] of uint

mapsui: map[string] of uint = convert(map[string] of uint, { i1, i2, i3, i4 });
assert(len(mapsui) == 2);
assert(mapsui[string(i1)] == uint(i2));
assert(mapsui[string(i3)] == uint(i4));

# array of int to map[time] of fingerprint

maptpi: map[time] of fingerprint = convert(map[time] of fingerprint, { i1, i2, i3, i4 });
assert(len(maptpi) == 2);
assert(maptpi[time(i1)] == fingerprint(i2));
assert(maptpi[time(i3)] == fingerprint(i4));

# array of int to map[time] of float

maptfi: map[time] of float = convert(map[time] of float, { i1, i2, i3, i4 });
assert(len(maptfi) == 2);
assert(maptfi[time(i1)] == float(i2));
assert(maptfi[time(i3)] == float(i4));

# array of int to map[time] of int

maptii: map[time] of int = convert(map[time] of int, { i1, i2, i3, i4 });
assert(len(maptii) == 2);
assert(maptii[time(i1)] == i2);
assert(maptii[time(i3)] == i4);

# array of int to map[time] of string

maptsi: map[time] of string = convert(map[time] of string, { i1, i2, i3, i4 });
assert(len(maptsi) == 2);
assert(maptsi[time(i1)] == string(i2));
assert(maptsi[time(i3)] == string(i4));

# array of int to map[time] of time

maptti: map[time] of time = convert(map[time] of time, { i1, i2, i3, i4 });
assert(len(maptti) == 2);
assert(maptti[time(i1)] == time(i2));
assert(maptti[time(i3)] == time(i4));

# array of int to map[time] of uint

maptui: map[time] of uint = convert(map[time] of uint, { i1, i2, i3, i4 });
assert(len(maptui) == 2);
assert(maptui[time(i1)] == uint(i2));
assert(maptui[time(i3)] == uint(i4));

# array of int to map[uint] of fingerprint

mapupi: map[uint] of fingerprint = convert(map[uint] of fingerprint, { i1, i2, i3, i4 });
assert(len(mapupi) == 2);
assert(mapupi[uint(i1)] == fingerprint(i2));
assert(mapupi[uint(i3)] == fingerprint(i4));

# array of int to map[uint] of float

mapufi: map[uint] of float = convert(map[uint] of float, { i1, i2, i3, i4 });
assert(len(mapufi) == 2);
assert(mapufi[uint(i1)] == float(i2));
assert(mapufi[uint(i3)] == float(i4));

# array of int to map[uint] of int

mapuii: map[uint] of int = convert(map[uint] of int, { i1, i2, i3, i4 });
assert(len(mapuii) == 2);
assert(mapuii[uint(i1)] == i2);
assert(mapuii[uint(i3)] == i4);

# array of int to map[uint] of string

mapusi: map[uint] of string = convert(map[uint] of string, { i1, i2, i3, i4 });
assert(len(mapusi) == 2);
assert(mapusi[uint(i1)] == string(i2));
assert(mapusi[uint(i3)] == string(i4));

# array of int to map[uint] of time

maputi: map[uint] of time = convert(map[uint] of time, { i1, i2, i3, i4 });
assert(len(maputi) == 2);
assert(maputi[uint(i1)] == time(i2));
assert(maputi[uint(i3)] == time(i4));

# array of int to map[uint] of uint

mapuui: map[uint] of uint = convert(map[uint] of uint, { i1, i2, i3, i4 });
assert(len(mapuui) == 2);
assert(mapuui[uint(i1)] == uint(i2));
assert(mapuui[uint(i3)] == uint(i4));

# array of string to map[bool] of bool

maplls: map[bool] of bool = convert(map[bool] of bool, { sl1, sl2, sl3, sl4 });
assert(len(maplls) == 2);
assert(maplls[bool(sl1)] == bool(sl2));
assert(maplls[bool(sl3)] == bool(sl4));

# array of string to map[bool] of bytes

maplbs: map[bool] of bytes = convert(map[bool] of bytes, { sl1, sl2, sl3, sl4 });
assert(len(maplbs) == 2);
assert(maplbs[bool(sl1)] == bytes(sl2));
assert(maplbs[bool(sl3)] == bytes(sl4));

# array of string to map[bool] of string

maplss: map[bool] of string = convert(map[bool] of string, { sl1, sl2, sl3, sl4 });
assert(len(maplss) == 2);
assert(maplss[bool(sl1)] == sl2);
assert(maplss[bool(sl3)] == sl4);

# array of string to map[bytes] of bool

mapbls: map[bytes] of bool = convert(map[bytes] of bool, { sl1, sl2, sl3, sl4 });
assert(len(mapbls) == 2);
assert(mapbls[bytes(sl1)] == bool(sl2));
assert(mapbls[bytes(sl3)] == bool(sl4));

# array of string to map[bytes] of bytes

mapbbs: map[bytes] of bytes = convert(map[bytes] of bytes, { sb1, sb2, sb3, sb4 });
assert(len(mapbbs) == 2);
assert(mapbbs[bytes(sb1)] == bytes(sb2));
assert(mapbbs[bytes(sb3)] == bytes(sb4));

# array of string to map[bytes] of fingerprint

mapbps: map[bytes] of fingerprint = convert(map[bytes] of fingerprint, { sp1, sp2, sp3, sp4 });
assert(len(mapbps) == 2);
assert(mapbps[bytes(sp1)] == fingerprint(sp2));
assert(mapbps[bytes(sp3)] == fingerprint(sp4));

# array of string to map[bytes] of float

mapbfs: map[bytes] of float = convert(map[bytes] of float, { sf1, sf2, sf3, sf4 });
assert(len(mapbfs) == 2);
assert(mapbfs[bytes(sf1)] == float(sf2));
assert(mapbfs[bytes(sf3)] == float(sf4));

# array of string to map[bytes] of int

mapbis: map[bytes] of int = convert(map[bytes] of int, { si1, si2, si3, si4 });
assert(len(mapbis) == 2);
assert(mapbis[bytes(si1)] == int(si2, 10));
assert(mapbis[bytes(si3)] == int(si4, 10));

# array of string to map[bytes] of string

mapbss: map[bytes] of string = convert(map[bytes] of string, { sb1, sb2, sb3, sb4 });
assert(len(mapbss) == 2);
assert(mapbss[bytes(sb1)] == sb2);
assert(mapbss[bytes(sb3)] == sb4);

# array of string to map[bytes] of time

mapbts: map[bytes] of time = convert(map[bytes] of time, { st1, st2, st3, st4 });
assert(len(mapbts) == 2);
assert(mapbts[bytes(st1)] == time(st2));
assert(mapbts[bytes(st3)] == time(st4));

# array of string to map[bytes] of uint

mapbus: map[bytes] of uint = convert(map[bytes] of uint, { su1, su2, su3, su4 });
assert(len(mapbus) == 2);
assert(mapbus[bytes(su1)] == uint(su2, 10));
assert(mapbus[bytes(su3)] == uint(su4, 10));

# array of string to map[fingerprint] of bytes

mappbs: map[fingerprint] of bytes = convert(map[fingerprint] of bytes, { sp1, sp2, sp3, sp4 });
assert(len(mappbs) == 2);
assert(mappbs[fingerprint(sp1)] == bytes(sp2));
assert(mappbs[fingerprint(sp3)] == bytes(sp4));

# array of string to map[fingerprint] of fingerprint

mappps: map[fingerprint] of fingerprint = convert(map[fingerprint] of fingerprint, { sp1, sp2, sp3, sp4 });
assert(len(mappps) == 2);
assert(mappps[fingerprint(sp1)] == fingerprint(sp2));
assert(mappps[fingerprint(sp3)] == fingerprint(sp4));

# array of string to map[fingerprint] of float

mappfs: map[fingerprint] of float = convert(map[fingerprint] of float, { si1, si2, si3, si4 });
assert(len(mappfs) == 2);
assert(mappfs[fingerprint(si1)] == float(si2));
assert(mappfs[fingerprint(si3)] == float(si4));

# array of string to map[fingerprint] of int

mappis: map[fingerprint] of int = convert(map[fingerprint] of int, { si1, si2, si3, si4 });
assert(len(mappis) == 2);
assert(mappis[fingerprint(si1)] == int(si2, 10));
assert(mappis[fingerprint(si3)] == int(si4, 10));

# array of string to map[fingerprint] of string

mappss: map[fingerprint] of string = convert(map[fingerprint] of string, { sp1, sp2, sp3, sp4 });
assert(len(mappss) == 2);
assert(mappss[fingerprint(sp1)] == sp2);
assert(mappss[fingerprint(sp3)] == sp4);

# array of string to map[fingerprint] of uint

mappus: map[fingerprint] of uint = convert(map[fingerprint] of uint, { si1, si2, si3, si4 });
assert(len(mappus) == 2);
assert(mappus[fingerprint(si1)] == uint(si2, 10));
assert(mappus[fingerprint(si3)] == uint(si4, 10));

# array of string to map[float] of bytes

mapfbs: map[float] of bytes = convert(map[float] of bytes, { sf1, sf2, sf3, sf4 });
assert(len(mapfbs) == 2);
assert(mapfbs[float(sf1)] == bytes(sf2));
assert(mapfbs[float(sf3)] == bytes(sf4));

# array of string to map[float] of fingerprint

mapfps: map[float] of fingerprint = convert(map[float] of fingerprint, { si1, si2, si3, si4 });
assert(len(mapfps) == 2);
assert(mapfps[float(si1)] == fingerprint(si2));
assert(mapfps[float(si3)] == fingerprint(si4));

# array of string to map[float] of float

mapffs: map[float] of float = convert(map[float] of float, { sf1, sf2, sf3, sf4 });
assert(len(mapffs) == 2);
assert(mapffs[float(sf1)] == float(sf2));
assert(mapffs[float(sf3)] == float(sf4));

# array of string to map[float] of int

mapfis: map[float] of int = convert(map[float] of int, { si1, si2, si3, si4 });
assert(len(mapfis) == 2);
assert(mapfis[float(si1)] == int(si2, 10));
assert(mapfis[float(si3)] == int(si4, 10));

# array of string to map[float] of string

mapfss: map[float] of string = convert(map[float] of string, { sf1, sf2, sf3, sf4 });
assert(len(mapfss) == 2);
assert(mapfss[float(sf1)] == sf2);
assert(mapfss[float(sf3)] == sf4);

# array of string to map[float] of uint

mapfus: map[float] of uint = convert(map[float] of uint, { si1, si2, si3, si4 });
assert(len(mapfus) == 2);
assert(mapfus[float(si1)] == uint(si2, 10));
assert(mapfus[float(si3)] == uint(si4, 10));

# array of string to map[int] of bytes

mapibs: map[int] of bytes = convert(map[int] of bytes, { si1, si2, si3, si4 });
assert(len(mapibs) == 2);
assert(mapibs[int(si1, 10)] == bytes(si2));
assert(mapibs[int(si3, 10)] == bytes(si4));

# array of string to map[int] of fingerprint

mapips: map[int] of fingerprint = convert(map[int] of fingerprint, { si1, si2, si3, si4 });
assert(len(mapips) == 2);
assert(mapips[int(si1, 10)] == fingerprint(si2));
assert(mapips[int(si3, 10)] == fingerprint(si4));

# array of string to map[int] of float

mapifs: map[int] of float = convert(map[int] of float, { si1, si2, si3, si4 });
assert(len(mapifs) == 2);
assert(mapifs[int(si1, 10)] == float(si2));
assert(mapifs[int(si3, 10)] == float(si4));

# array of string to map[int] of int

mapiis: map[int] of int = convert(map[int] of int, { si1, si2, si3, si4 });
assert(len(mapiis) == 2);
assert(mapiis[int(si1, 10)] == int(si2, 10));
assert(mapiis[int(si3, 10)] == int(si4, 10));

# array of string to map[int] of string

mapiss: map[int] of string = convert(map[int] of string, { si1, si2, si3, si4 });
assert(len(mapiss) == 2);
assert(mapiss[int(si1, 10)] == si2);
assert(mapiss[int(si3, 10)] == si4);

# array of string to map[int] of uint

mapius: map[int] of uint = convert(map[int] of uint, { si1, si2, si3, si4 });
assert(len(mapius) == 2);
assert(mapius[int(si1, 10)] == uint(si2, 10));
assert(mapius[int(si3, 10)] == uint(si4, 10));

# array of string to map[string] of bool

mapsls: map[string] of bool = convert(map[string] of bool, { sl1, sl2, sl3, sl4 });
assert(len(mapsls) == 2);
assert(mapsls[sl1] == bool(sl2));
assert(mapsls[sl3] == bool(sl4));

# array of string to map[string] of bytes

mapsbs: map[string] of bytes = convert(map[string] of bytes, { sb1, sb2, sb3, sb4 });
assert(len(mapsbs) == 2);
assert(mapsbs[sb1] == bytes(sb2));
assert(mapsbs[sb3] == bytes(sb4));

# array of string to map[string] of fingerprint

mapsps: map[string] of fingerprint = convert(map[string] of fingerprint, { sp1, sp2, sp3, sp4 });
assert(len(mapsps) == 2);
assert(mapsps[sp1] == fingerprint(sp2));
assert(mapsps[sp3] == fingerprint(sp4));

# array of string to map[string] of float

mapsfs: map[string] of float = convert(map[string] of float, { sf1, sf2, sf3, sf4 });
assert(len(mapsfs) == 2);
assert(mapsfs[sf1] == float(sf2));
assert(mapsfs[sf3] == float(sf4));

# array of string to map[string] of int

mapsis: map[string] of int = convert(map[string] of int, { si1, si2, si3, si4 });
assert(len(mapsis) == 2);
assert(mapsis[si1] == int(si2, 10));
assert(mapsis[si3] == int(si4, 10));

# array of string to map[string] of time

mapsts: map[string] of time = convert(map[string] of time, { st1, st2, st3, st4 });
assert(len(mapsts) == 2);
assert(mapsts[st1] == time(st2));
assert(mapsts[st3] == time(st4));

# array of string to map[string] of uint

mapsus: map[string] of uint = convert(map[string] of uint, { su1, su2, su3, su4 });
assert(len(mapsus) == 2);
assert(mapsus[su1] == uint(su2, 10));
assert(mapsus[su3] == uint(su4, 10));

# array of string to map[time] of bytes

maptbs: map[time] of bytes = convert(map[time] of bytes, { st1, st2, st3, st4 });
assert(len(maptbs) == 2);
assert(maptbs[time(st1)] == bytes(st2));
assert(maptbs[time(st3)] == bytes(st4));

# array of string to map[time] of string

maptss: map[time] of string = convert(map[time] of string, { st1, st2, st3, st4 });
assert(len(maptss) == 2);
assert(maptss[time(st1)] == st2);
assert(maptss[time(st3)] == st4);

# array of string to map[time] of time

maptts: map[time] of time = convert(map[time] of time, { st1, st2, st3, st4 });
assert(len(maptts) == 2);
assert(maptts[time(st1)] == time(st2));
assert(maptts[time(st3)] == time(st4));

# array of string to map[uint] of bytes

mapubs: map[uint] of bytes = convert(map[uint] of bytes, { su1, su2, su3, su4 });
assert(len(mapubs) == 2);
assert(mapubs[uint(su1, 10)] == bytes(su2));
assert(mapubs[uint(su3, 10)] == bytes(su4));

# array of string to map[uint] of fingerprint

mapups: map[uint] of fingerprint = convert(map[uint] of fingerprint, { si1, si2, si3, si4 });
assert(len(mapups) == 2);
assert(mapups[uint(si1, 10)] == fingerprint(si2));
assert(mapups[uint(si3, 10)] == fingerprint(si4));

# array of string to map[uint] of float

mapufs: map[uint] of float = convert(map[uint] of float, { si1, si2, si3, si4 });
assert(len(mapufs) == 2);
assert(mapufs[uint(si1, 10)] == float(si2));
assert(mapufs[uint(si3, 10)] == float(si4));

# array of string to map[uint] of int

mapuis: map[uint] of int = convert(map[uint] of int, { si1, si2, si3, si4 });
assert(len(mapuis) == 2);
assert(mapuis[uint(si1, 10)] == int(si2, 10));
assert(mapuis[uint(si3, 10)] == int(si4, 10));

# array of string to map[uint] of string

mapuss: map[uint] of string = convert(map[uint] of string, { su1, su2, su3, su4 });
assert(len(mapuss) == 2);
assert(mapuss[uint(su1, 10)] == su2);
assert(mapuss[uint(su3, 10)] == su4);

# array of string to map[uint] of uint

mapuus: map[uint] of uint = convert(map[uint] of uint, { su1, su2, su3, su4 });
assert(len(mapuus) == 2);
assert(mapuus[uint(su1, 10)] == uint(su2, 10));
assert(mapuus[uint(su3, 10)] == uint(su4, 10));

# array of time to map[int] of int

mapiit: map[int] of int = convert(map[int] of int, { t1, t2, t3, t4 });
assert(len(mapiit) == 2);
assert(mapiit[int(t1)] == int(t2));
assert(mapiit[int(t3)] == int(t4));

# array of time to map[int] of string

mapist: map[int] of string = convert(map[int] of string, { t1, t2, t3, t4 });
assert(len(mapist) == 2);
assert(mapist[int(t1)] == string(t2));
assert(mapist[int(t3)] == string(t4));

# array of time to map[int] of time

mapitt: map[int] of time = convert(map[int] of time, { t1, t2, t3, t4 });
assert(len(mapitt) == 2);
assert(mapitt[int(t1)] == t2);
assert(mapitt[int(t3)] == t4);

# array of time to map[int] of uint

mapiut: map[int] of uint = convert(map[int] of uint, { t1, t2, t3, t4 });
assert(len(mapiut) == 2);
assert(mapiut[int(t1)] == uint(t2));
assert(mapiut[int(t3)] == uint(t4));

# array of time to map[string] of int

mapsit: map[string] of int = convert(map[string] of int, { t1, t2, t3, t4 });
assert(len(mapsit) == 2);
assert(mapsit[string(t1)] == int(t2));
assert(mapsit[string(t3)] == int(t4));

# array of time to map[string] of string

mapsst: map[string] of string = convert(map[string] of string, { t1, t2, t3, t4 });
assert(len(mapsst) == 2);
assert(mapsst[string(t1)] == string(t2));
assert(mapsst[string(t3)] == string(t4));

# array of time to map[string] of time

mapstt: map[string] of time = convert(map[string] of time, { t1, t2, t3, t4 });
assert(len(mapstt) == 2);
assert(mapstt[string(t1)] == t2);
assert(mapstt[string(t3)] == t4);

# array of time to map[string] of uint

mapsut: map[string] of uint = convert(map[string] of uint, { t1, t2, t3, t4 });
assert(len(mapsut) == 2);
assert(mapsut[string(t1)] == uint(t2));
assert(mapsut[string(t3)] == uint(t4));

# array of time to map[time] of int

maptit: map[time] of int = convert(map[time] of int, { t1, t2, t3, t4 });
assert(len(maptit) == 2);
assert(maptit[t1] == int(t2));
assert(maptit[t3] == int(t4));

# array of time to map[time] of string

maptst: map[time] of string = convert(map[time] of string, { t1, t2, t3, t4 });
assert(len(maptst) == 2);
assert(maptst[t1] == string(t2));
assert(maptst[t3] == string(t4));

# array of time to map[time] of uint

maptut: map[time] of uint = convert(map[time] of uint, { t1, t2, t3, t4 });
assert(len(maptut) == 2);
assert(maptut[t1] == uint(t2));
assert(maptut[t3] == uint(t4));

# array of time to map[uint] of int

mapuit: map[uint] of int = convert(map[uint] of int, { t1, t2, t3, t4 });
assert(len(mapuit) == 2);
assert(mapuit[uint(t1)] == int(t2));
assert(mapuit[uint(t3)] == int(t4));

# array of time to map[uint] of string

mapust: map[uint] of string = convert(map[uint] of string, { t1, t2, t3, t4 });
assert(len(mapust) == 2);
assert(mapust[uint(t1)] == string(t2));
assert(mapust[uint(t3)] == string(t4));

# array of time to map[uint] of time

maputt: map[uint] of time = convert(map[uint] of time, { t1, t2, t3, t4 });
assert(len(maputt) == 2);
assert(maputt[uint(t1)] == t2);
assert(maputt[uint(t3)] == t4);

# array of time to map[uint] of uint

mapuut: map[uint] of uint = convert(map[uint] of uint, { t1, t2, t3, t4 });
assert(len(mapuut) == 2);
assert(mapuut[uint(t1)] == uint(t2));
assert(mapuut[uint(t3)] == uint(t4));

# array of uint to map[fingerprint] of fingerprint

mapppu: map[fingerprint] of fingerprint = convert(map[fingerprint] of fingerprint, { u1, u2, u3, u4 });
assert(len(mapppu) == 2);
assert(mapppu[fingerprint(u1)] == fingerprint(u2));
assert(mapppu[fingerprint(u3)] == fingerprint(u4));

# array of uint to map[fingerprint] of float

mappfu: map[fingerprint] of float = convert(map[fingerprint] of float, { u1, u2, u3, u4 });
assert(len(mappfu) == 2);
assert(mappfu[fingerprint(u1)] == float(u2));
assert(mappfu[fingerprint(u3)] == float(u4));

# array of uint to map[fingerprint] of int

mappiu: map[fingerprint] of int = convert(map[fingerprint] of int, { u1, u2, u3, u4 });
assert(len(mappiu) == 2);
assert(mappiu[fingerprint(u1)] == int(u2));
assert(mappiu[fingerprint(u3)] == int(u4));

# array of uint to map[fingerprint] of string

mappsu: map[fingerprint] of string = convert(map[fingerprint] of string, { u1, u2, u3, u4 });
assert(len(mappsu) == 2);
assert(mappsu[fingerprint(u1)] == string(u2));
assert(mappsu[fingerprint(u3)] == string(u4));

# array of uint to map[fingerprint] of time

mapptu: map[fingerprint] of time = convert(map[fingerprint] of time, { u1, u2, u3, u4 });
assert(len(mapptu) == 2);
assert(mapptu[fingerprint(u1)] == time(u2));
assert(mapptu[fingerprint(u3)] == time(u4));

# array of uint to map[fingerprint] of uint

mappuu: map[fingerprint] of uint = convert(map[fingerprint] of uint, { u1, u2, u3, u4 });
assert(len(mappuu) == 2);
assert(mappuu[fingerprint(u1)] == u2);
assert(mappuu[fingerprint(u3)] == u4);

# array of uint to map[float] of fingerprint

mapfpu: map[float] of fingerprint = convert(map[float] of fingerprint, { u1, u2, u3, u4 });
assert(len(mapfpu) == 2);
assert(mapfpu[float(u1)] == fingerprint(u2));
assert(mapfpu[float(u3)] == fingerprint(u4));

# array of uint to map[float] of float

mapffu: map[float] of float = convert(map[float] of float, { u1, u2, u3, u4 });
assert(len(mapffu) == 2);
assert(mapffu[float(u1)] == float(u2));
assert(mapffu[float(u3)] == float(u4));

# array of uint to map[float] of int

mapfiu: map[float] of int = convert(map[float] of int, { u1, u2, u3, u4 });
assert(len(mapfiu) == 2);
assert(mapfiu[float(u1)] == int(u2));
assert(mapfiu[float(u3)] == int(u4));

# array of uint to map[float] of string

mapfsu: map[float] of string = convert(map[float] of string, { u1, u2, u3, u4 });
assert(len(mapfsu) == 2);
assert(mapfsu[float(u1)] == string(u2));
assert(mapfsu[float(u3)] == string(u4));

# array of uint to map[float] of time

mapftu: map[float] of time = convert(map[float] of time, { u1, u2, u3, u4 });
assert(len(mapftu) == 2);
assert(mapftu[float(u1)] == time(u2));
assert(mapftu[float(u3)] == time(u4));

# array of uint to map[float] of uint

mapfuu: map[float] of uint = convert(map[float] of uint, { u1, u2, u3, u4 });
assert(len(mapfuu) == 2);
assert(mapfuu[float(u1)] == u2);
assert(mapfuu[float(u3)] == u4);

# array of uint to map[int] of fingerprint

mapipu: map[int] of fingerprint = convert(map[int] of fingerprint, { u1, u2, u3, u4 });
assert(len(mapipu) == 2);
assert(mapipu[int(u1)] == fingerprint(u2));
assert(mapipu[int(u3)] == fingerprint(u4));

# array of uint to map[int] of float

mapifu: map[int] of float = convert(map[int] of float, { u1, u2, u3, u4 });
assert(len(mapifu) == 2);
assert(mapifu[int(u1)] == float(u2));
assert(mapifu[int(u3)] == float(u4));

# array of uint to map[int] of int

mapiiu: map[int] of int = convert(map[int] of int, { u1, u2, u3, u4 });
assert(len(mapiiu) == 2);
assert(mapiiu[int(u1)] == int(u2));
assert(mapiiu[int(u3)] == int(u4));

# array of uint to map[int] of string

mapisu: map[int] of string = convert(map[int] of string, { u1, u2, u3, u4 });
assert(len(mapisu) == 2);
assert(mapisu[int(u1)] == string(u2));
assert(mapisu[int(u3)] == string(u4));

# array of uint to map[int] of time

mapitu: map[int] of time = convert(map[int] of time, { u1, u2, u3, u4 });
assert(len(mapitu) == 2);
assert(mapitu[int(u1)] == time(u2));
assert(mapitu[int(u3)] == time(u4));

# array of uint to map[int] of uint

mapiuu: map[int] of uint = convert(map[int] of uint, { u1, u2, u3, u4 });
assert(len(mapiuu) == 2);
assert(mapiuu[int(u1)] == u2);
assert(mapiuu[int(u3)] == u4);

# array of uint to map[string] of fingerprint

mapspu: map[string] of fingerprint = convert(map[string] of fingerprint, { u1, u2, u3, u4 });
assert(len(mapspu) == 2);
assert(mapspu[string(u1)] == fingerprint(u2));
assert(mapspu[string(u3)] == fingerprint(u4));

# array of uint to map[string] of float

mapsfu: map[string] of float = convert(map[string] of float, { u1, u2, u3, u4 });
assert(len(mapsfu) == 2);
assert(mapsfu[string(u1)] == float(u2));
assert(mapsfu[string(u3)] == float(u4));

# array of uint to map[string] of int

mapsiu: map[string] of int = convert(map[string] of int, { u1, u2, u3, u4 });
assert(len(mapsiu) == 2);
assert(mapsiu[string(u1)] == int(u2));
assert(mapsiu[string(u3)] == int(u4));

# array of uint to map[string] of string

mapssu: map[string] of string = convert(map[string] of string, { u1, u2, u3, u4 });
assert(len(mapssu) == 2);
assert(mapssu[string(u1)] == string(u2));
assert(mapssu[string(u3)] == string(u4));

# array of uint to map[string] of time

mapstu: map[string] of time = convert(map[string] of time, { u1, u2, u3, u4 });
assert(len(mapstu) == 2);
assert(mapstu[string(u1)] == time(u2));
assert(mapstu[string(u3)] == time(u4));

# array of uint to map[string] of uint

mapsuu: map[string] of uint = convert(map[string] of uint, { u1, u2, u3, u4 });
assert(len(mapsuu) == 2);
assert(mapsuu[string(u1)] == u2);
assert(mapsuu[string(u3)] == u4);

# array of uint to map[time] of fingerprint

maptpu: map[time] of fingerprint = convert(map[time] of fingerprint, { u1, u2, u3, u4 });
assert(len(maptpu) == 2);
assert(maptpu[time(u1)] == fingerprint(u2));
assert(maptpu[time(u3)] == fingerprint(u4));

# array of uint to map[time] of float

maptfu: map[time] of float = convert(map[time] of float, { u1, u2, u3, u4 });
assert(len(maptfu) == 2);
assert(maptfu[time(u1)] == float(u2));
assert(maptfu[time(u3)] == float(u4));

# array of uint to map[time] of int

maptiu: map[time] of int = convert(map[time] of int, { u1, u2, u3, u4 });
assert(len(maptiu) == 2);
assert(maptiu[time(u1)] == int(u2));
assert(maptiu[time(u3)] == int(u4));

# array of uint to map[time] of string

maptsu: map[time] of string = convert(map[time] of string, { u1, u2, u3, u4 });
assert(len(maptsu) == 2);
assert(maptsu[time(u1)] == string(u2));
assert(maptsu[time(u3)] == string(u4));

# array of uint to map[time] of time

mapttu: map[time] of time = convert(map[time] of time, { u1, u2, u3, u4 });
assert(len(mapttu) == 2);
assert(mapttu[time(u1)] == time(u2));
assert(mapttu[time(u3)] == time(u4));

# array of uint to map[time] of uint

maptuu: map[time] of uint = convert(map[time] of uint, { u1, u2, u3, u4 });
assert(len(maptuu) == 2);
assert(maptuu[time(u1)] == u2);
assert(maptuu[time(u3)] == u4);

# array of uint to map[uint] of fingerprint

mapupu: map[uint] of fingerprint = convert(map[uint] of fingerprint, { u1, u2, u3, u4 });
assert(len(mapupu) == 2);
assert(mapupu[u1] == fingerprint(u2));
assert(mapupu[u3] == fingerprint(u4));

# array of uint to map[uint] of float

mapufu: map[uint] of float = convert(map[uint] of float, { u1, u2, u3, u4 });
assert(len(mapufu) == 2);
assert(mapufu[u1] == float(u2));
assert(mapufu[u3] == float(u4));

# array of uint to map[uint] of int

mapuiu: map[uint] of int = convert(map[uint] of int, { u1, u2, u3, u4 });
assert(len(mapuiu) == 2);
assert(mapuiu[u1] == int(u2));
assert(mapuiu[u3] == int(u4));

# array of uint to map[uint] of string

mapusu: map[uint] of string = convert(map[uint] of string, { u1, u2, u3, u4 });
assert(len(mapusu) == 2);
assert(mapusu[u1] == string(u2));
assert(mapusu[u3] == string(u4));

# array of uint to map[uint] of time

maputu: map[uint] of time = convert(map[uint] of time, { u1, u2, u3, u4 });
assert(len(maputu) == 2);
assert(maputu[u1] == time(u2));
assert(maputu[u3] == time(u4));
