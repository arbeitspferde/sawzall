# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# various string conversions.  these have been sources of bugs.

s: string = "string";
b: bytes = bytes("bytes");
i: int = 17;
f: float = 2.3;
t: time = time("Thu Oct  9 00:44:37 PDT 2003");
p: fingerprint = fingerprint("0x12345");

assert(string(b) == `bytes`);
assert(string(i) == `17`);
assert(string(f) == `2.3`);
assert(string(t) == `Thu Oct  9 00:44:37 PDT 2003`);
assert(string(p) == `0x0000000000012345p`);

ai: array of int = { 1, 2, 3, -4 };
assert(string(ai) == `{ 1, 2, 3, -4 }`);

af: array of float = { .1, .2, .3, -.4 };
assert(string(af) == `{ 0.1, 0.2, 0.3, -0.4 }`);

as: array of string = { "one", "two", "three", "four", "hello \"\33" };
assert(string(as) == `{ "one", "two", "three", "four", "hello \"\x1b" }`);

at: array of time = { t, addyear(t, 1), addyear(t, 2) };
assert(string(at) == `{ "Thu Oct  9 00:44:37 PDT 2003", "Sat Oct  9 00:44:37 PDT 2004", "Sun Oct  9 00:44:37 PDT 2005" }`);

ap: array of fingerprint = { fingerprint(1), fingerprint(2), fingerprint(3) };
assert(string(ap) == `{ 0x0000000000000001P, 0x0000000000000002P, 0x0000000000000003P }`);

ab: array of bytes = { bytes("abc"), bytes("\1\2\3") };
assert(string(ab) == `{ B"abc", X"010203" }`);

msi: map[string] of int = { "one" : 1, "two" : 2, "three" : 3 };
assert(string(msi) == `{ "one": 1, "two": 2, "three": 3 }`);

msf: map[string] of float = { "one" : 1., "two" : 2., "three" : 3. };
assert(string(msf) == `{ "one": 1.0, "two": 2.0, "three": 3.0 }`);

mss: map[string] of string = { "one" : "1", "two" : "2", "three" : "3" };
assert(string(mss) == `{ "one": "1", "two": "2", "three": "3" }`);

msb: map[string] of bytes = { "one" : bytes("1"), "two" : bytes("2"),
                              "three" : bytes("3") };
assert(string(msb) == `{ "one": B"1", "two": B"2", "three": B"3" }`);

mst: map[string] of time = { "one" : t, "two" : t, "three" : t };
assert(string(mst) == `{ "one": "Thu Oct  9 00:44:37 PDT 2003", "two": "Thu Oct  9 00:44:37 PDT 2003", "three": "Thu Oct  9 00:44:37 PDT 2003" }`);

msp: map[string] of fingerprint = { "one" : p, "two" : p, "three" : p };
assert(string(msp) == `{ "one": 0x0000000000012345P, "two": 0x0000000000012345P, "three": 0x0000000000012345P }`);

mii: map[int] of int = { 1 : 11, 2 : 22, 3 : 33 };
assert(string(mii) == `{ 1: 11, 2: 22, 3: 33 }`);

mfi: map[float] of int = { 1.0 : 11, 2.0 : 22, 3.0 : 33 };
assert(string(mfi) == `{ 1.0: 11, 2.0: 22, 3.0: 33 }`);

mti: map[time] of int = { t : 11, addyear(t, 1) : 22, addyear(t, 2) : 33 };
assert(string(mti) == `{ "Thu Oct  9 00:44:37 PDT 2003": 11, "Sat Oct  9 00:44:37 PDT 2004": 22, "Sun Oct  9 00:44:37 PDT 2005": 33 }`);

mpi: map[fingerprint] of int = { 1p : 11, 2p : 22, 3p : 33 };
assert(string(mpi) == `{ 0x0000000000000001P: 11, 0x0000000000000002P: 22, 0x0000000000000003P: 33 }`);

mbi: map[bytes] of int = { bytes("1") : 11, bytes("2") : 22, bytes("3") : 33 };
assert(string(mbi) == `{ B"1": 11, B"2": 22, B"3": 33 }`);


type T = { int, string, float, bytes, fingerprint, time, array of int };
t1: T = { i, s, f, b, p, t, ai };
assert(string(t1) == `{ 17, "string", 2.3, B"bytes", 0x0000000000012345P, "Thu Oct  9 00:44:37 PDT 2003", { 1, 2, 3, -4 } }`);

t2: { int, T, string } = { i, t1, s };
assert(string(t2) == `{ 17, { 17, "string", 2.3, B"bytes", 0x0000000000012345P, "Thu Oct  9 00:44:37 PDT 2003", { 1, 2, 3, -4 } }, "string" }`);

maa: map[array of int] of array of int = { ai : ai };
assert(string(maa) == `{ { 1, 2, 3, -4 }: { 1, 2, 3, -4 } }`);

mtt: map[T] of T = { t1 : t1 };
assert(string(mtt) == `{ { 17, "string", 2.3, B"bytes", 0x0000000000012345P, "Thu Oct  9 00:44:37 PDT 2003", { 1, 2, 3, -4 } }: { 17, "string", 2.3, B"bytes", 0x0000000000012345P, "Thu Oct  9 00:44:37 PDT 2003", { 1, 2, 3, -4 } } }`);

t3: { map[string] of int, int } = { msi, 4 };
assert(string(t3) == `{ { "one": 1, "two": 2, "three": 3 }, 4 }`);

am: array of map[string] of int = { msi, msi };
assert(string(am) == `{ { "one": 1, "two": 2, "three": 3 }, { "one": 1, "two": 2, "three": 3 } }`);

aT: array of T = { t1, t1 };
assert(string(aT) == `{ { 17, "string", 2.3, B"bytes", 0x0000000000012345P, "Thu Oct  9 00:44:37 PDT 2003", { 1, 2, 3, -4 } }, { 17, "string", 2.3, B"bytes", 0x0000000000012345P, "Thu Oct  9 00:44:37 PDT 2003", { 1, 2, 3, -4 } } }`);


# look at variant bytes<->string conversion
a: bytes = bytes("\xfc\xfd\xfe",  "latin-1");
l: string = string(a, "latin-1");
assert(string(a, "array-literal") == `X"FCFDFE"`);
assert(l == `üýþ`);
assert(string(a, "hex") == `fcfdfe`);
assert(string(bytes(string(a, "hex"), "hex"), "hex") == `fcfdfe`);
assert(a == bytes("fcfdfe", "hex"));
assert(l == string(bytes("fcfdfe", "hex"), "latin-1"));

b1: bytes = { 0xd0 };
s1: string = string(b1, "latin-1");
assert(s1 == `Ð`);
assert(len(s1) == 1);
b2: bytes = bytes(s1, "latin-1");
assert(b2 == b1);

# check case-independent identification of conversion type
assert(bytes("\xfc\xfd\xfe",  "latin-1") == bytes("\xfc\xfd\xfe",  "LaTiN-1"));

