# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

#! /bin/env szl

#desc: Finds various file characteristics using output types

#szl_options 

#szl_input outputType_fileops.szl

#szl_output non_unique_words unique_word_count numlines numwords numchars numbytes
#NOTE: szl_output points to names of all files related to the output variables
#NOTE: used by the script. So it is mandatory to keep the filename in sync with
#NOTE: the one specified in the output variable declaration

type OCs = table collection of word:string
               file("non_unique_words") format("%s\n", word);

type OCsi = table collection [query:string] of numchars: int
              file("unique_word_count") format("%d ", numchars);

#inst: Getting a collection of unique words and non-unique words
#NOTE: Since we are writing to a file the unique words collection
#      is not giving correct results. We need to use the external
#      mechanism to verify that we get unique words only

unique_words_collection: OCsi;
nonunique_words_collection: OCs;
words:array of string = sawzall(string(input), "[^ \t]+");
for (i:int = 0; i < len(words); i++) {
    emit unique_words_collection[words[i]] <- 1;
    emit nonunique_words_collection <- words[i];
}

#inst: wc example from document
nlines: table collection of i:int format("%d ", i) file("/tmp/numlines"); 
nwords: table collection of i:int format("%d ", i) file("/tmp/numwords");
nchars: table collection of i:int format("%d ", i) file("/tmp/numchars");
nbytes: table collection of i:int format("%d ", i) file("/tmp/numbytes");

emit nlines <- 1;
emit nwords <- len(sawzall(string(input), "[^ \t]+"));
emit nchars <- len(string(input));
emit nbytes <- len(input);


