# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

#!/bin/env szl

#szl_options -noexecute

empty: string = new(string, nrand(1), 1);

#desc:		script is for testing different declarations for the Sawzall variables

### 			Variable declarations:
#  	Grammer:
#  1) 	VarCal := ['static'] var_name ':' Type [ '=' Expression | block ] ';'
#  2)	var_name := identifier
#  3)	identifier := (letter | '_') { letter | '_' | digit }
#  4)	letter =: 'A' ... 'Z' | 'a' ... 'z' 
#  5)	digit =: '0' .. '9'

#inst: ##############      Variable declaration without initialization      #################

a : int ;			# integer  Simple identifier declaration
b : bool ;			# bool
d_l__j324f : time ;		# time  Testing _ and numbers in the identifier declaration
p_FDSLdsdf28735 : fingerprint ;	# fingerprint
a______: bytes ;                # bytes
static sdl__fkj : int = 10 ;    # usig static ... Works

#   _sadf76482SDFK: int;        # Identifier starting with '_' followed by letter/underscore/
				# numbers is a valid identifier ... but interpreter doesnt accept

#   ______ : bytes ;		# Identifier with only underscores should be a valid 
				# declaration ... but gives error!

#   $%__asfd12sa@: float  	# identifier should start with a letter or '_'... so this is 
#   213ASFD : string ;		# Interpreter rejects this one too ... Good !		


#######################  Testing for the use of basic type names as variable names ##############

#int: string = "dfgdfg";	# Observation ... if basic type name like int, string,
#integer: int = "9587";		# float etc. are used as variable names ... then they 
#DEBUG("print","%s\n",int);	# loose their nature of being 'type'.

#string : int = 123;		# So after their use as variable, they can not be used to declear
#pqr: string = "sfs";		# a variable of their type
#DEBUG("print","%d",string);	# e.g. Once 'int' is used as a variable name, we can not 
				# declare a variable of type int. Same is true for float and 
#float: int =10;		# string, bool
#fl: float = 10.2;
#DEBUG("print","%d",float);

#bool: int = 10;
#b: bool;
#DEBUG("print","%d",bool);

type string = int;
foo:string = 10;
foobar:int=foo;

type int = string;
foo1: int = "hi" + empty;
#DEBUG("print"

#inst: #############   Testing for limit on variable name length   #######################

kfjlksdjflkdsjlkfjlsdjflksdjflkjsdlfhdsjhfkjdshfksdghfgsjkdgfuiywedgfiuewgifuewhwdufhdskjcbkdjbkjdhsfkjgdhkjfgssssssssssssssaflweuilrwopyuroewiyrfhuioewhdhfoiejdhfowiejhfeoiuhfiouedhfwjkqehfiouwehi4y98236489326478926892698542165893689682365816458143urhfuwejfhdksdahru8w56028936ru3hdirou32648923hskdfhksdjhfkjsdhfksdhfkhdskjfhdkslhflkdsjflksdjflkjsdlfkjdslkfjlsdkjflksdjflkjsdlfjs:int = 0;

#inst: #########  Testing UTF-8 character set for variable name  #################

#ναφάωσπασμέναγυαλιάχωρίςναπάθωτίποτα:int;

#inst: ################  Testing UTF-8 characters in the literal string ####################

str1:string = "ναφάωσπασμέναγυαλιάχωρίςναπάθωτίποτα" + empty;
