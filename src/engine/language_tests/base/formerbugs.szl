# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# conversion of incomplete types
# (crashed with a too strong assertion in ir.cc)
f0: fingerprint = {};
f1: fingerprint = {:};
s0: string = {};
s1: string = {:};

# min/max intrinsics w/o arguments crashed the parser
x: int = max();
y: int = min();

# keys() w/o arguments crashed the parser
m: map [int] of string;
k1: array of int = keys();

# keys() w/ non-map argument crashed the parser
a: array of int;
k2: array of int = keys(a);

# for loops w/ missing pieces crashed code generator and printer
i: int = 0;
for (i: int = 0;;)
  break;

for (; i < 10;)
  i++;

for (;; i++)
  break;

for (;;)
  break;

# proto fields that are tuples, must be proto tuples
#
type proto1 = {
  f1: { x: int, s: string } @ 1 # this should be an error
};

type T1 = { x: int };
type proto2 = {
  f1: T1 @ 1 # this should be an error
};

# tuple (and array) fields cannot be used "stand-alone", i.e.,
# w/o qualification of the "object", and thus never hide pre-
# defined identifiers - used to cause the parser to emit
# superfluous warnings
t: { max: int, now: time };

# conversions of bytes to proto tuples and vice versa
# must not accept parameters - extra parameters were
# not checked and then caused the code generator to
# crash w/ an assertion failure if the extra parameters
# were of incomplete type
type T = {
  a: bytes @ 1,
  b: array of int @ 2
};
p: T = T(bytes(""), {});  # no parameters allowed error
bytes(p, {});  # no parameters allowed error

# buggy (proto) tuple declarations caused the type system to crash
# when building default proto tuples and related data structures.
type SlimMessage = proto {
  value_id: ValueIdMessage,
  value_set: array of OtherMessage,
};

# if sawzall() or sawn() had a 'rest' clause anywhere but last,
# the behavior was unexpected and different from the same
# call without a 'rest'  clause.  the manual disallowed this case
# anyway, so now we catch it in the parser.
restv: string;
resta1: array of string = sawzall("123456789", "..", rest restv, ".", ".");
resta2: array of string = sawn(2, "123456789", "..", rest restv, ".");
