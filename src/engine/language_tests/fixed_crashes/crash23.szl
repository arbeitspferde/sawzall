# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# Verify that output tuple temps are cleared at the end of each record.
# Prior to the bug fix there was a memory leak warning (debug builds)
# and another failure, e.g. a segment fault or assertion failure, depending
# on the kind of build and kind of code generation.

# In an opt build:
#   When reading the first record our first allocation is the temporary tuple.
#   When reading the second record our first allocation is for "t"; when the
#   temporary tuple is allocated, if the previous one had not been cleared then
#   it will incorrectly refer to "t" and decrement its reference count.
#   We print the reference count of "t" before and after the emit and verify
#   that it did not change.

# In a debug build:
#   After the first record the heap is compacted as a way to catch reference
#   counting errors.  If the temporary tuple is not cleared then there will be
#   a reference count inconsistency.  When the temporary tuple is allocated in
#   the second record, the dangling pointer will refer to some other object
#   and will likely cause an assert failure or segfault.  But the real
#   problem indicator is the reference counting warning.
#

type T = { int };
t: T;
u: T;

divisor: int;

if (input[0] == 'a') {
  divisor = 0;
} else {
  divisor = 1;
  t = { 1 };
  u = t;
}

old_count: int;
new_count: int;
if (input[0] == 'b')
  old_count = DEBUG("ref",t);
tbl: table collection of e: int format("(%d)", 10/divisor);
emit tbl <- 2;
if (input[0] == 'b')
  new_count = DEBUG("ref",t);
if (input[0] == 'b') {
  emit stdout <- format("counts: old = %d  new = %d\n", old_count, new_count);
  assert(new_count == old_count);
}
