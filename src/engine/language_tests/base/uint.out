a: uint = convert(uint, ~0);
b: uint = convert(uint, 2);
z: uint = convert(uint, 0);
c: uint;
al: uint = 18446744073709551615U ^ 0U;
assert(al == a);
bl: uint = 2U;
assert(bl == b);
zl: uint = 0U;
assert(zl == z);
assert(convert(string, a) == "18446744073709551615");
assert(convert(string, a) == format("%u", a));
assert(format("%x", a) == "ffffffffffffffff");
c = a;
assert(format("%x", c) == "ffffffffffffffff");
c = a + b;
assert(format("%x", c) == "1");
c = a - b;
assert(format("%x", c) == "fffffffffffffffd");
c = a * b;
assert(format("%x", c) == "fffffffffffffffe");
c = a / b;
assert(format("%x", c) == "7fffffffffffffff");
c = a % b;
assert(format("%x", c) == "1");
c = a >> b;
assert(format("%x", c) == "3fffffffffffffff");
c = a << b;
assert(format("%x", c) == "fffffffffffffffc");
c = (a << b) | b;
assert(format("%x", c) == "fffffffffffffffe");
c = (a >> b) ^ b;
assert(format("%x", c) == "3ffffffffffffffd");
c = (a >> b) & b;
assert(format("%x", c) == "2");
c = 18446744073709551615U ^ a;
assert(format("%x", c) == "0");
c = 18446744073709551615U ^ b;
assert(format("%x", c) == "fffffffffffffffd");
c = a;
assert(c == a);
assert(c > z);
assert(c >= z);
assert(c >= c);
assert(z < c);
assert((c / b) < c);
assert((c / b) <= c);
assert((c / b) <= (c / b));
assert(c != z);
assert(convert(uint, 2) == b);
assert(convert(uint, 2.0) == b);
assert(convert(uint, 0x0000000000000002P) == b);
assert(convert(uint, 2T) == b);
assert(convert(uint, "2") == b);
assert(convert(int, b) == 2);
assert(convert(float, b) == 2.0);
assert(convert(fingerprint, b) == 0x0000000000000002P);
assert(convert(time, b) == 2T);
assert(convert(string, b) == "2");
su: array of uint = convert(array of uint, {"0", "1", "2", "3", "4"});
for (i: int = 0; i < len(su); i++)
	assert(su[i] == convert(uint, i));
