# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

#!/bin/env szl

#szl_options -noexecute

#desc:	Testing different declarations for the Sawzall variables

### 			Variable declarations:
#  	Grammer:
#  1) 	VarCal := ['static'] var_name ':' Type [ '=' Expression | block ] ';'
#  2)	var_name := identifier
#  3)	identifier := (letter | '_') { letter | '_' | digit }
#  4)	letter =: 'A' ... 'Z' | 'a' ... 'z' 
#  5)	digit =: '0' .. '9'

#######################  Testing for the use of basic type names as variable names ##############

int: string = "dfgdfg";	# Observation ... if basic type name like int, string,
integer: int = "9587";		# float etc. are used as variable names ... then they 
DEBUG("print","%s\n",int);	# loose their nature of being 'type'.

string : int = 123;		# So after their use as variable, they can not be used to declear
pqr: string = "sfs";		# a variable of their type
DEBUG("print","%d",string);	# e.g. Once 'int' is used as a variable name, we can not 
				# declare a variable of type int. Same is true for float and 
float: int =10;		# string, bool
fl: float = 10.2;
DEBUG("print","%d",float);

bool: int = 10;
b: bool;
DEBUG("print","%d",bool);

type string = int;
foo:string = 10;
foobar:int=foo;

type int = string;
foo1: int = "hi";

# Some intrinsics are okay to redefine; the rest get warnings
addweek: bytes;  # generates a warning
adclicks:bytes;  # no warning
adevents:bytes;  # no warning
