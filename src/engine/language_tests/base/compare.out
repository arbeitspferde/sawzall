b1: bool = true;
b2: bool = false;
i1: int = 5;
i2: int = 10;
p1: fingerprint = convert(fingerprint, 0);
p2: fingerprint = convert(fingerprint, 100);
f1: float = 5.0;
f2: float = 10.0;
s1: string = "abc";
s2: string = "abcdef";
t1: time = HOUR;
t2: time = convert(time, 24 * convert(int, HOUR));
a1: array of string = {"one", "two", "three"};
a2: array of string = {"one", "three", "two"};
m1: map [string] of int = {"one": 1, "two": 2};
m2: map [string] of int = {"two": 2, "three": 3};
m1r: map [string] of int = {"two": 2, "one": 1};
m1k: map [string] of int = {"one": 2, "two": 2};
m1v: map [string] of int = {"two": 1, "one": 2};
M1: map [int] of string = {1: "one", 2: "two"};
M2: map [int] of string = {2: "two", 3: "three"};
M1r: map [int] of string = {2: "two", 1: "one"};
M1k: map [int] of string = {2: "one", 2: "two"};
M1v: map [int] of string = {1: "two", 2: "one"};
type TT = {int, string};
type T = {TT, map [string] of int};
T1: T = {{1, "one"}, m1};
T2: T = {{2, "two"}, m1};
T3: T = {{1, "two"}, m1};
T4: T = {{2, "one"}, m1};
T5: T = {{1, "one"}, m2};
c1: function() {
}
;
c2: function() {
}
;
assert(true == (b1 == b1));
assert(!(b1 != b1));
assert(!(b1 == b2));
assert(true == (b1 != b2));
assert(!(i1 < i1));
assert(true == (i1 < i2));
assert(!(i2 < i1));
assert(true == (i1 <= i1));
assert(true == (i1 <= i2));
assert(!(i2 <= i1));
assert(true == (i1 == i1));
assert(!(i1 == i2));
assert(!(i2 == i1));
assert(!(i1 > i1));
assert(!(i1 > i2));
assert(true == (i2 > i1));
assert(true == (i1 >= i1));
assert(!(i1 >= i2));
assert(true == (i2 >= i1));
assert(true == (p1 == p1));
assert(!(p1 != p1));
assert(!(p1 == p2));
assert(true == (p1 != p2));
assert(!(f1 < f1));
assert(true == (f1 < f2));
assert(!(f2 < f1));
assert(true == (f1 <= f1));
assert(true == (f1 <= f2));
assert(!(f2 <= f1));
assert(true == (f1 == f1));
assert(!(f1 == f2));
assert(!(f2 == f1));
assert(!(f1 > f1));
assert(!(f1 > f2));
assert(true == (f2 > f1));
assert(true == (f1 >= f1));
assert(!(f1 >= f2));
assert(true == (f2 >= f1));
assert(!(s1 < s1));
assert(true == (s1 < s2));
assert(!(s2 < s1));
assert(true == (s1 <= s1));
assert(true == (s1 <= s2));
assert(!(s2 <= s1));
assert(true == (s1 == s1));
assert(!(s1 == s2));
assert(!(s2 == s1));
assert(!(s1 > s1));
assert(!(s1 > s2));
assert(true == (s2 > s1));
assert(true == (s1 >= s1));
assert(!(s1 >= s2));
assert(true == (s2 >= s1));
assert(!(t1 < t1));
assert(true == (t1 < t2));
assert(!(t2 < t1));
assert(true == (t1 <= t1));
assert(true == (t1 <= t2));
assert(!(t2 <= t1));
assert(true == (t1 == t1));
assert(!(t1 == t2));
assert(!(t2 == t1));
assert(!(t1 > t1));
assert(!(t1 > t2));
assert(true == (t2 > t1));
assert(true == (t1 >= t1));
assert(!(t1 >= t2));
assert(true == (t2 >= t1));
assert(true == (a1 == a1));
assert(!(a1 != a1));
assert(true == (a1 != a2));
assert(!(a1 == a2));
assert(true == (m1 == m1));
assert(!(m1 != m1));
assert(true == (m1 == m1r));
assert(!(m1 != m1r));
assert(true == (m1 != m2));
assert(!(m1 == m2));
assert(true == (m1 != m1k));
assert(!(m1 == m1k));
assert(true == (m1 != m1v));
assert(!(m1 == m1v));
assert(true == (M1 == M1));
assert(!(M1 != M1));
assert(true == (M1 == M1r));
assert(!(M1 != M1r));
assert(true == (M1 != M2));
assert(!(M1 == M2));
assert(true == (M1 != M1k));
assert(!(M1 == M1k));
assert(true == (M1 != M1v));
assert(!(M1 == M1v));
assert(true == (T1 == T1));
assert(!(T1 != T1));
assert(true == (T1 != T2));
assert(!(T1 == T2));
assert(true == (T1 != T3));
assert(!(T1 == T3));
assert(true == (T1 != T4));
assert(!(T1 == T4));
assert(true == (T1 != T5));
assert(!(T1 == T5));
assert(true == (c1 == c1));
assert(!(c1 != c1));
assert(true == (c1 != c2));
assert(!(c1 == c2));
