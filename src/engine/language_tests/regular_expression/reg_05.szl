# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

#!/bin/env szl
#szl_options

#desc: Greedy and non-greedy quantifiers.

s0: string;
matchArray: array of string;

#inst: in each cases below:
#inst:      first instance is for greedy quantifiers.
#inst:      second instance is for non-greedy quantifiers.

#inst: * quantifier.
s0 = "mississippi";

matchArray = matchstrs("i.*s", s0);
if (matchArray[0] != "ississ")
{
    emit stdout <- format(`matchstrs("i.*s", "%s") Failed !!!`, s0);
}

matchArray = matchstrs("i.*?s", s0);
if (matchArray[0] != "is")
{
    emit stdout <- format(`matchstrs("i.*?s", "%s") Failed !!!`, s0);
}

#inst: + quantifier.
s0 = "@@@axax@@@";

matchArray = matchstrs("(ax)+", s0);
if (matchArray[0] != "axax")
{
    emit stdout <- format(`matchstrs("(ax)+", "%s") Failed !!!`, s0);
}

matchArray = matchstrs("(ax)+?", s0);
if (matchArray[0] != "ax")
{
    emit stdout <- format(`matchstrs("(ax)+?", "%s") Failed !!!`, s0);
}

#inst: ? quantifier.
s0 = "@@@aaa@@@";

matchArray = matchstrs("a?", s0);
if (matchArray[0] != "")
{
    emit stdout <- format(`matchstrs("a?", "%s") Failed !!!`, s0);
}

matchArray = matchstrs("a??", s0);
for (i: int = 0; i < len(matchArray); i++)
if (matchArray[0] != "")
{
    emit stdout <- format(`matchstrs("a??", "%s") Failed !!!`, s0);
}

#inst: {n} quantifier (both greedy and non-greedy has the same result).
s0 = "@@@aaaa@@@";

matchArray = matchstrs("a{2}", s0);
if (matchArray[0] != "aa")
{
    emit stdout <- format(`matchstrs("a{2}", "%s") Failed !!!`, s0);
}

matchArray = matchstrs("a{2}?", s0);
for (i: int = 0; i < len(matchArray); i++)
if (matchArray[0] != "aa")
{
    emit stdout <- format(`matchstrs("a{2}?", "%s") Failed !!!`, s0);
}

#inst: {n, } quantifier
s0 = "@@@aaaa@@@";

matchArray = matchstrs("a{2,}", s0);
if (matchArray[0] != "aaaa")
{
    emit stdout <- format(`matchstrs("a{2,}", "%s") Failed !!!`, s0);
}

matchArray = matchstrs("a{2,}?", s0);
for (i: int = 0; i < len(matchArray); i++)
if (matchArray[0] != "aa")
{
    emit stdout <- format(`matchstrs("a{2,}?", "%s") Failed !!!`, s0);
}

#inst: {n, m} quantifier
s0 = "@@@aaaaa@@@";

matchArray = matchstrs("a{2,4}", s0);
if (matchArray[0] != "aaaa")
{
    emit stdout <- format(`matchstrs("a{2,4}", "%s") Failed !!!`, s0);
}

matchArray = matchstrs("a{2,4}?", s0);
for (i: int = 0; i < len(matchArray); i++)
if (matchArray[0] != "aa")
{
    emit stdout <- format(`matchstrs("a{2,4}?", "%s") Failed !!!`, s0);
}
