# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

#
# prerequisites
#
type ftype = function (x: int): int;
type gtype = ftype;

#
# various legal ways to define functions
#
f1: function(x: int): int {
  return x + 1;
};
assert(f1(0) == 1, "f1(0) == 1");

f2: function(x: int): int = function(x: int): int {
  return x + 2;
};
assert(f2(0) == 2, "f2(0) == 2");

f3: ftype {
  return x + 3;
};
assert(f3(0) == 3, "f3(0) == 3");

f4: ftype = ftype {
  return x + 4;
};
assert(f3(0) == 3, "f3(0) == 4");


#
# some legal assignments
#
f1 = f2;
f2 = f3;
f3 = f4;
f4 = f1;
assert(f1(1) == 3, "f1(1) == 3");
assert(f2(1) == 4, "f2(1) == 4");
assert(f3(1) == 5, "f3(1) == 5");
assert(f4(1) == 3, "f4(1) == 3");


#
# more legal assignments involving an outer scope
#
f5: ftype;
f_array: array of ftype;
f_map: map[int] of ftype;
f_tuple: { f: ftype };

g: function() {
  f6: ftype;   # moving to an inner scope
  f6 = f1;
  assert(f6(1) == f1(1));
  f5 = f1;     # keeping at the same scope
  assert(f5(1) == f1(1));
  f7: ftype;
  f7 = f6;
  assert(f6(1) == f7(1));
  f8: ftype;   # literal at the same scope
  f8 = function(x: int): int { return x + 8; };
  assert(f8(1) == 9);
  f_array = { f1 };  # array, map, tuple containing function
  assert(f_array[0](1) == f1(1));
  f_map = { 1:f1 };
  assert(f_map[1](1) == f1(1));
  f_tuple = { f1 };
  assert(f_tuple.f(1) == f1(1));
};
g();


#
# a more complicated nested example
#
static b: int = 3;
f: ftype {
  g: function(): int {
    return x + b;
  };
  h: function(k: function(): int, n: int): int {
    if (n > 0)
      return h(k, n-1);
    else
      return k();
  };
  return h(g, 100);
};
assert(f(7) == 10);


#
# using a closure
#
cool: function(y: int): int {
  return function(x: int): int { return x + y; } (1);
};
assert(cool(7) == 8, "cool(7) == 8");


#
# converting to strings
#

assert(string(f1) == "function(x: int): int {\n\treturn x + 2;\n}\n");
assert(string(function() {}) == "function() {\n}\n");
assert(string(function(x: int, y: int): float { return 0.0; }) ==
       "function(x: int, y: int): float {\n\treturn 0.0;\n}\n");
assert(string(f) == "f");

#
# an interesting legal function assignment
# (was bug - gri 4/14/05)
#
functions: map[string] of function(x: int): string = {:};

p: function(x: int): string {
  return string(x);
};

t: function() {
  functions["p"] = p;
};
t();
assert(functions["p"](10) == "10");
