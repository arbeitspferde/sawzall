type T1 = {t: array of T1 @ 1};
t1: T1 = convert(T1, B"");
type T2 = parsedmessage {t: array of T2 @ 1};
t2: T2 = convert(T2, B"");
type T3 = {t: array of T3 @ 1};
t3: T3 = convert(T3, B"");
type T5 = {t: array of array of T5 @ 1};
t5: T5 = convert(T5, B"");
type T6 = parsedmessage {t: array of array of T6 @ 1};
t6: T6 = convert(T6, B"");
type T7 = {t: array of array of T7 @ 1};
t7: T5 = convert(T5, B"");
type T9 = {t: array of {tt: T9 @ 1} @ 1};
t9: T5 = convert(T5, B"");
type T10 = parsedmessage {t: array of parsedmessage {tt: T10 @ 1} @ 1};
t10: T5 = convert(T5, B"");
type T11 = {t: array of {tt: T11 @ 1} @ 1};
t11: T5 = convert(T5, B"");
type T12 = proto {t: array of proto {tt: T12}};
t12: T5 = convert(T5, B"");
type T = parsedmessage {a: bytes @ 1 : string, b: array of T @ 2, c: bytes @ 3 : string};
t: T = {convert(bytes, "a"), {{convert(bytes, "ba"), {}, convert(bytes, "bc")}}, convert(bytes, "c")};
assert(t.a == convert(bytes, "a"));
assert(t.b[0].a == convert(bytes, "ba"));
assert(len(t.b[0].b) == 0);
assert(t.b[0].c == convert(bytes, "bc"));
assert(t.c == convert(bytes, "c"));
b: bytes = convert(bytes, t);
u: T = convert(T, b);
assert(t == u);
assert(t.a == u.a);
assert(t.b[0].a == u.b[0].a);
assert(t.b[0].b == u.b[0].b);
assert(t.b[0].c == u.b[0].c);
assert(t.c == u.c);
type U = {a: int, b: array of U, c: int};
type PU = proto {a: int, b: array of PU, c: int};
pu: PU;
