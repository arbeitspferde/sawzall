# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

#!/bin/env szl

#desc:   Conversion between proto tuples and bytes and reverse conversions
# make sure to run this test with --use_underlying_type on

type TupleA = {
  a: fingerprint @ 1: fixed64,
  b: time @ 2: fixed64,
  c: bool @ 3: bool,
  d: bytes @ 4: string,
  e: array of int @ 5: fixed64,
  f: { x: int @ 6: fixed64, y: float @ 7: double } @ 8,
  g: int @ 9: int64,
  h: int @ 10: int32
};

# Check conversion between bytes and tuple
t: TupleA = { fingerprintof("abcde"), time(101112), true,
              bytes("fghij"), { 13, -14 }, { 15, -16.17 }, 5, -6 };
assert(t == TupleA(bytes(t)), "t == TupleA(bytes(t))");


type TupleB0 = {
  x: int @ 1: fixed64
};
type TupleB1 = {
  x: int @ 1: fixed32
};
type TupleB2 = {
  x: int @ 1: uint64
};

tb0: TupleB0 = { 5 };
tb1: TupleB1 = { 5 };
tb2: TupleB2 = { 5 };

# Check conversion between bytes and tuple
assert(TupleB0(bytes(tb0)) == tb0, "TupleB0(bytes(tb0)) == tb0");
assert(TupleB1(bytes(tb1)) == tb1, "TupleB1(bytes(tb1)) == tb1");
assert(TupleB2(bytes(tb2)) == tb2, "TupleB2(bytes(tb2)) == tb2");

# Check that tuples are same but bytes conversions are different
assert(tb0 == tb1, "tb0 == tb1");
assert(tb0 == tb2, "tb0 == tb2");
assert(bytes(tb0) != bytes(tb1), "bytes(tb0) != bytes(tb1)");
assert(bytes(tb0) != bytes(tb2), "bytes(tb0) != bytes(tb2)");
assert(bytes(tb1) != bytes(tb2), "bytes(tb1) != bytes(tb2)");


type TupleC0 = {
  x: float @ 1: double
};
type TupleC1 = {
  x: float @ 1: float
};

tc0: TupleC0 = { -5.25 };
tc1: TupleC1 = { -5.25 };

# Check conversion between bytes and tuple
assert(TupleC0(bytes(tc0)) == tc0, "TupleC0(bytes(tc0)) == tc0");
assert(TupleC1(bytes(tc1)) == tc1, "TupleC1(bytes(tc1)) == tc1");

# Check that tuples are same but bytes conversions are different
assert(tc0 == tc1, "tc0 == tc1");
assert(bytes(tc0) != bytes(tc1), "bytes(tc0) != bytes(tc1)");

