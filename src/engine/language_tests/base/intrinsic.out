x: int;
y: int;
maxi: int;
mini: int;
maxf: float;
minf: float;
maxt: time;
mint: time;
t1: time;
t2: time;
s1: string;
s2: string;
b1: bytes;
mins: string;
maxs: string;
x = 3;
y = 8;
a: array of int = {1, 2, 3, 4, -1, 5, 6, 6, 18, 19, 1, 3, 4};
b: array of float = {3.1, 4.0, -1.8, 5.9, 6.0, 6.0, 18.1, 19.1, 1.0, 3.0, 4.0};
f1: float = 1.1;
f2: float = 1.2;
f1 = f1 + f2;
s1 = "";
assert(strfind("hi", s1) == -1);
assert(strrfind("hi", s1) == -1);
s1 = "h";
assert(strfind("hi", s1) == -1);
assert(strrfind("hi", s1) == -1);
s1 = "hi";
assert(strfind("hi", s1) == 0);
assert(strrfind("hi", s1) == 0);
s1 = "xhi";
assert(strfind("hi", s1) == 1);
assert(strrfind("hi", s1) == 1);
s1 = "xhihi";
assert(strfind("hi", s1) == 1);
assert(strrfind("hi", s1) == 3);
s1 = "xhihix";
assert(strfind("hi", s1) == 1);
assert(strrfind("hi", s1) == 3);
s1 = "";
assert(strfind("日本", s1) == -1);
assert(strrfind("日本", s1) == -1);
s1 = "日";
assert(strfind("日本", s1) == -1);
assert(strrfind("日本", s1) == -1);
s1 = "日本";
assert(strfind("日本", s1) == 0);
assert(strrfind("日本", s1) == 0);
s1 = "x日本";
assert(strfind("日本", s1) == 1);
assert(strrfind("日本", s1) == 1);
s1 = "語日本";
assert(strfind("日本", s1) == 1);
assert(strrfind("日本", s1) == 1);
s1 = "x日本日本";
assert(strfind("日本", s1) == 1);
assert(strrfind("日本", s1) == 3);
s1 = "x日本日本x";
assert(strfind("日本", s1) == 1);
assert(strrfind("日本", s1) == 3);
s1 = "語日本日本語";
assert(strfind("日本", s1) == 1);
assert(strrfind("日本", s1) == 3);
b1 = B"000";
assert(bytesfind(B"", b1) == 0);
assert(bytesrfind(B"", b1) == 3);
b1 = B"000";
assert(bytesfind(B"0", b1) == 0);
assert(bytesrfind(B"0", b1) == 2);
b1 = B"";
assert(bytesfind(B"hi", b1) == -1);
assert(bytesrfind(B"hi", b1) == -1);
b1 = B"h";
assert(bytesfind(B"hi", b1) == -1);
assert(bytesrfind(B"hi", b1) == -1);
b1 = B"hi";
assert(bytesfind(B"hi", b1) == 0);
assert(bytesrfind(B"hi", b1) == 0);
b1 = B"xhi";
assert(bytesfind(B"hi", b1) == 1);
assert(bytesrfind(B"hi", b1) == 1);
b1 = B"xhihi";
assert(bytesfind(B"hi", b1) == 1);
assert(bytesrfind(B"hi", b1) == 3);
b1 = B"xhihix";
assert(bytesfind(B"hi", b1) == 1);
assert(bytesrfind(B"hi", b1) == 3);
b1 = X"000000";
assert(bytesfind(B"", b1) == 0);
assert(bytesrfind(B"", b1) == 3);
b1 = X"000000";
assert(bytesfind(X"00", b1) == 0);
assert(bytesrfind(X"00", b1) == 2);
b1 = B"";
assert(bytesfind(X"000102", b1) == -1);
assert(bytesrfind(X"000102", b1) == -1);
b1 = X"00";
assert(bytesfind(X"000102", b1) == -1);
assert(bytesrfind(X"000102", b1) == -1);
b1 = X"0001";
assert(bytesfind(X"000102", b1) == -1);
assert(bytesrfind(X"000102", b1) == -1);
b1 = X"000102";
assert(bytesfind(X"000102", b1) == 0);
assert(bytesrfind(X"000102", b1) == 0);
b1 = X"0000000102";
assert(bytesfind(X"000102", b1) == 2);
assert(bytesrfind(X"000102", b1) == 2);
b1 = X"0001020000";
assert(bytesfind(X"000102", b1) == 0);
assert(bytesrfind(X"000102", b1) == 0);
b1 = X"00000102030001020304";
assert(bytesfind(X"000102", b1) == 1);
assert(bytesrfind(X"000102", b1) == 5);
b1 = X"000102030001020300010203";
assert(bytesfind(X"000102", b1) == 0);
assert(bytesrfind(X"000102", b1) == 8);
assert(0 == highbit(0));
for (i: int = 0; i < 64; i++)
	assert((i + 1) == highbit(1 << i));
assert(32 == highbit(2147483649));
assert(32 == highbit(4294967295));
ivals: array of int = {-5, 5, 0, 0, 5, 5};
fvals: array of float = {-5.5, 5.5, 0.0, 0.0, 5.5, 5.5};
for (i: int = 0; i < len(ivals); i = i + 2)
{
	j: int = ivals[i];
	absj: int = ivals[i + 1];
	if (abs(j) != absj)
		format("int abs(%d) == %d not %d", j, abs(j), absj);
	f: float = fvals[i];
	absf: float = fvals[i + 1];
	if (abs(f) != absf)
		format("float abs(%g) == %g not %g", f, abs(f), absf);
}
mini = min(x, y);
maxi = max(x, y);
assert(mini == 3);
assert(maxi == 8);
minf = min(f1, f2);
maxf = max(f1, f2);
assert(convert(string, minf) == "1.2");
assert(convert(string, maxf) == "2.3");
t1 = convert(time, (1050453984 * 1000) * 1000);
t2 = convert(time, (1050713984 * 1000) * 1000);
mint = min(t1, t2);
maxt = max(t1, t2);
assert(mint == 1050453984000000T);
assert(maxt == 1050713984000000T);
s1 = "Foobar";
s2 = "Google";
mins = min(s1, s2);
maxs = max(s1, s2);
assert(mins == "Foobar");
assert(maxs == "Google");
for (i: int = 1; i < 10; i++)
{
	r: float = rand();
	n: int = nrand(i * 50);
	assert((r > 0.0) && (r < 1.0));
	assert((n >= 0) && (n < (i * 50)));
}
for (i: int = 0; i < 26; i++)
{
	b: bytes = convert(bytes, "qwertyuiopasdfghjklzxcvbnm"[0 : i]);
	regular: bytes = tobase64(b, false);
	websafe: bytes = tobase64(b, true);
	regularback: bytes = frombase64(regular, false);
	websafeback: bytes = frombase64(websafe, true);
	assert(b == regularback);
	assert(b == websafeback);
}
{
	empty: bytes = new(bytes, nrand(1), 1);
	b: bytes = frombase64(B"M@#$Q=!!=" + empty, true);
	assert(!def(b), "frombase64('M@#$Q=!!=') failed to return undefined");
}
line: string = "asdfgasdasdfgasasdfgaasdfg";
result: string = strreplace(line, "as", "", true);
expected: string = "dfgddfgdfgadfg";
assert(result == expected);
result = strreplace(line, "as", "", false);
expected = "dfgasdasdfgasasdfgaasdfg";
assert(result == expected);
line = "\"john\" john \"smith\"";
result = strreplace(line, "\"", "\"\"", true);
expected = "\"\"john\"\" john \"\"smith\"\"";
assert(result == expected);
line = "aaabbaaa";
result = strreplace(line, "aa", "a", true);
expected = "aabbaa";
assert(result == expected);
result = strreplace(line, "a", "cc", true);
expected = "ccccccbbcccccc";
assert(result == expected);
result = strreplace(line, "c", "d", true);
expected = "aaabbaaa";
assert(result == expected);
assert(getenv("USER") != "");
assert(!def(getenv("NON_EXISTING")));
