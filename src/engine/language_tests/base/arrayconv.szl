# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# This test is generated by arraymapconv.sh; do not modify this file.
# Any changes should be made to the script.
#
# Test the array to array conversions.



# General-purpose input values for each type.
l1: bool = false;
l2: bool = true;
l3: bool = true;
l4: bool = false;
b1: bytes = B"abcdefgh";  # exactly 8 bytes so can convert to fpr, int, uint
b2: bytes = B"ijklmnop";
b3: bytes = B"qrstuvwx";
b4: bytes = B"yzabcdef";
p1: fingerprint = 1234567890p;
p2: fingerprint = 2345678901p;
p3: fingerprint = 3456789012p;
p4: fingerprint = 4567890123p;
f1: float = 1.1;
f2: float = 2.3;
f3: float = 3.5;
f4: float = 4.7;
i1: int = 5678901234;
i2: int = 6789012345;
i3: int = 7890123456;
i4: int = 8901234567;
s1: string = "abc";
s2: string = "def";
s3: string = "ghi";
s4: string = "jkl";
t1: time = 9876543210;
t2: time = 8765432109;
t3: time = 7654321098;
t4: time = 6543210987;
u1: uint = 5432109876u;
u2: uint = 4321098765u;
u3: uint = 3210987654u;
u4: uint = 2109876543u;

# Input values for string to xxx depend on the target type.
sl1: string = "F";
sl2: string = "T";
sl3: string = "T";
sl4: string = "F";
sb1: string = s1;
sb2: string = s2;
sb3: string = s3;
sb4: string = s4;
sp1: string = "1234567890";
sp2: string = "2345678901";
sp3: string = "3456789012";
sp4: string = "4567890123";
sf1: string = "1.1";
sf2: string = "2.3";
sf3: string = "3.5";
sf4: string = "4.7";
si1: string = "5678901234";
si2: string = "6789012345";
si3: string = "7890123456";
si4: string = "8901234567";
st1: string = "Mar  4 15:25:48 PST 2009";
st2: string = "Mar  5 15:25:48 PST 2009";
st3: string = "Mar  6 15:25:48 PST 2009";
st4: string = "Mar  7 15:25:48 PST 2009";
su1: string = "5432109876";
su2: string = "4321098765";
su3: string = "3210987654";
su4: string = "2109876543";



# array of bool to array of int

arr_il: array of int = convert(array of int, { l1, l2, l3 });
assert(len(arr_il) == 3);
assert(arr_il[0] == int(l1));
assert(arr_il[1] == int(l2));
assert(arr_il[2] == int(l3));

# array of bool to array of string

arr_sl: array of string = convert(array of string, { l1, l2, l3 });
assert(len(arr_sl) == 3);
assert(arr_sl[0] == string(l1));
assert(arr_sl[1] == string(l2));
assert(arr_sl[2] == string(l3));

# array of bool to array of uint

arr_ul: array of uint = convert(array of uint, { l1, l2, l3 });
assert(len(arr_ul) == 3);
assert(arr_ul[0] == uint(l1));
assert(arr_ul[1] == uint(l2));
assert(arr_ul[2] == uint(l3));

# array of bytes to array of fingerprint

arr_pb: array of fingerprint = convert(array of fingerprint, { b1, b2, b3 });
assert(len(arr_pb) == 3);
assert(arr_pb[0] == fingerprint(b1));
assert(arr_pb[1] == fingerprint(b2));
assert(arr_pb[2] == fingerprint(b3));

# array of bytes to array of int

arr_ib: array of int = convert(array of int, { b1, b2, b3 }, "szl");
assert(len(arr_ib) == 3);
assert(arr_ib[0] == int(b1, "szl"));
assert(arr_ib[1] == int(b2, "szl"));
assert(arr_ib[2] == int(b3, "szl"));

# array of bytes to array of string

arr_sb: array of string = convert(array of string, { b1, b2, b3 });
assert(len(arr_sb) == 3);
assert(arr_sb[0] == string(b1));
assert(arr_sb[1] == string(b2));
assert(arr_sb[2] == string(b3));

# array of bytes to array of uint

arr_ub: array of uint = convert(array of uint, { b1, b2, b3 }, "szl");
assert(len(arr_ub) == 3);
assert(arr_ub[0] == uint(b1, "szl"));
assert(arr_ub[1] == uint(b2, "szl"));
assert(arr_ub[2] == uint(b3, "szl"));

# array of fingerprint to array of bytes

arr_bp: array of bytes = convert(array of bytes, { p1, p2, p3 });
assert(len(arr_bp) == 3);
assert(arr_bp[0] == bytes(p1));
assert(arr_bp[1] == bytes(p2));
assert(arr_bp[2] == bytes(p3));

# array of fingerprint to array of int

arr_ip: array of int = convert(array of int, { p1, p2, p3 });
assert(len(arr_ip) == 3);
assert(arr_ip[0] == int(p1));
assert(arr_ip[1] == int(p2));
assert(arr_ip[2] == int(p3));

# array of fingerprint to array of string

arr_sp: array of string = convert(array of string, { p1, p2, p3 });
assert(len(arr_sp) == 3);
assert(arr_sp[0] == string(p1));
assert(arr_sp[1] == string(p2));
assert(arr_sp[2] == string(p3));

# array of float to array of int

arr_if: array of int = convert(array of int, { f1, f2, f3 });
assert(len(arr_if) == 3);
assert(arr_if[0] == int(f1));
assert(arr_if[1] == int(f2));
assert(arr_if[2] == int(f3));

# array of float to array of string

arr_sf: array of string = convert(array of string, { f1, f2, f3 });
assert(len(arr_sf) == 3);
assert(arr_sf[0] == string(f1));
assert(arr_sf[1] == string(f2));
assert(arr_sf[2] == string(f3));

# array of float to array of uint

arr_uf: array of uint = convert(array of uint, { f1, f2, f3 });
assert(len(arr_uf) == 3);
assert(arr_uf[0] == uint(f1));
assert(arr_uf[1] == uint(f2));
assert(arr_uf[2] == uint(f3));

# array of int to array of bytes

arr_bi: array of bytes = convert(array of bytes, { i1, i2, i3 }, "szl");
assert(len(arr_bi) == 3);
assert(arr_bi[0] == bytes(i1, "szl"));
assert(arr_bi[1] == bytes(i2, "szl"));
assert(arr_bi[2] == bytes(i3, "szl"));

# array of int to array of fingerprint

arr_pi: array of fingerprint = convert(array of fingerprint, { i1, i2, i3 });
assert(len(arr_pi) == 3);
assert(arr_pi[0] == fingerprint(i1));
assert(arr_pi[1] == fingerprint(i2));
assert(arr_pi[2] == fingerprint(i3));

# array of int to array of float

arr_fi: array of float = convert(array of float, { i1, i2, i3 });
assert(len(arr_fi) == 3);
assert(arr_fi[0] == float(i1));
assert(arr_fi[1] == float(i2));
assert(arr_fi[2] == float(i3));

# array of int to array of string

arr_si: array of string = convert(array of string, { i1, i2, i3 });
assert(len(arr_si) == 3);
assert(arr_si[0] == string(i1));
assert(arr_si[1] == string(i2));
assert(arr_si[2] == string(i3));

# array of int to array of time

arr_ti: array of time = convert(array of time, { i1, i2, i3 });
assert(len(arr_ti) == 3);
assert(arr_ti[0] == time(i1));
assert(arr_ti[1] == time(i2));
assert(arr_ti[2] == time(i3));

# array of int to array of uint

arr_ui: array of uint = convert(array of uint, { i1, i2, i3 });
assert(len(arr_ui) == 3);
assert(arr_ui[0] == uint(i1));
assert(arr_ui[1] == uint(i2));
assert(arr_ui[2] == uint(i3));

# array of string to array of bool

arr_ls: array of bool = convert(array of bool, { sl1, sl2, sl3 });
assert(len(arr_ls) == 3);
assert(arr_ls[0] == bool(sl1));
assert(arr_ls[1] == bool(sl2));
assert(arr_ls[2] == bool(sl3));

# array of string to array of bytes

arr_bs: array of bytes = convert(array of bytes, { sb1, sb2, sb3 });
assert(len(arr_bs) == 3);
assert(arr_bs[0] == bytes(sb1));
assert(arr_bs[1] == bytes(sb2));
assert(arr_bs[2] == bytes(sb3));

# array of string to array of fingerprint

arr_ps: array of fingerprint = convert(array of fingerprint, { sp1, sp2, sp3 });
assert(len(arr_ps) == 3);
assert(arr_ps[0] == fingerprint(sp1));
assert(arr_ps[1] == fingerprint(sp2));
assert(arr_ps[2] == fingerprint(sp3));

# array of string to array of float

arr_fs: array of float = convert(array of float, { sf1, sf2, sf3 });
assert(len(arr_fs) == 3);
assert(arr_fs[0] == float(sf1));
assert(arr_fs[1] == float(sf2));
assert(arr_fs[2] == float(sf3));

# array of string to array of int

arr_is: array of int = convert(array of int, { si1, si2, si3 }, 10);
assert(len(arr_is) == 3);
assert(arr_is[0] == int(si1, 10));
assert(arr_is[1] == int(si2, 10));
assert(arr_is[2] == int(si3, 10));

# array of string to array of time

arr_ts: array of time = convert(array of time, { st1, st2, st3 });
assert(len(arr_ts) == 3);
assert(arr_ts[0] == time(st1));
assert(arr_ts[1] == time(st2));
assert(arr_ts[2] == time(st3));

# array of string to array of uint

arr_us: array of uint = convert(array of uint, { su1, su2, su3 }, 10);
assert(len(arr_us) == 3);
assert(arr_us[0] == uint(su1, 10));
assert(arr_us[1] == uint(su2, 10));
assert(arr_us[2] == uint(su3, 10));

# array of time to array of int

arr_it: array of int = convert(array of int, { t1, t2, t3 });
assert(len(arr_it) == 3);
assert(arr_it[0] == int(t1));
assert(arr_it[1] == int(t2));
assert(arr_it[2] == int(t3));

# array of time to array of string

arr_st: array of string = convert(array of string, { t1, t2, t3 });
assert(len(arr_st) == 3);
assert(arr_st[0] == string(t1));
assert(arr_st[1] == string(t2));
assert(arr_st[2] == string(t3));

# array of time to array of uint

arr_ut: array of uint = convert(array of uint, { t1, t2, t3 });
assert(len(arr_ut) == 3);
assert(arr_ut[0] == uint(t1));
assert(arr_ut[1] == uint(t2));
assert(arr_ut[2] == uint(t3));

# array of uint to array of bytes

arr_bu: array of bytes = convert(array of bytes, { u1, u2, u3 }, "szl");
assert(len(arr_bu) == 3);
assert(arr_bu[0] == bytes(u1, "szl"));
assert(arr_bu[1] == bytes(u2, "szl"));
assert(arr_bu[2] == bytes(u3, "szl"));

# array of uint to array of fingerprint

arr_pu: array of fingerprint = convert(array of fingerprint, { u1, u2, u3 });
assert(len(arr_pu) == 3);
assert(arr_pu[0] == fingerprint(u1));
assert(arr_pu[1] == fingerprint(u2));
assert(arr_pu[2] == fingerprint(u3));

# array of uint to array of float

arr_fu: array of float = convert(array of float, { u1, u2, u3 });
assert(len(arr_fu) == 3);
assert(arr_fu[0] == float(u1));
assert(arr_fu[1] == float(u2));
assert(arr_fu[2] == float(u3));

# array of uint to array of int

arr_iu: array of int = convert(array of int, { u1, u2, u3 });
assert(len(arr_iu) == 3);
assert(arr_iu[0] == int(u1));
assert(arr_iu[1] == int(u2));
assert(arr_iu[2] == int(u3));

# array of uint to array of string

arr_su: array of string = convert(array of string, { u1, u2, u3 });
assert(len(arr_su) == 3);
assert(arr_su[0] == string(u1));
assert(arr_su[1] == string(u2));
assert(arr_su[2] == string(u3));

# array of uint to array of time

arr_tu: array of time = convert(array of time, { u1, u2, u3 });
assert(len(arr_tu) == 3);
assert(arr_tu[0] == time(u1));
assert(arr_tu[1] == time(u2));
assert(arr_tu[2] == time(u3));
