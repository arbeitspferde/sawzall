type myproto0 = {x: int = 42 @ 1, y: float = 3.1415 @ 2, t: time @ 3, b: bytes @ 5, z: bool = true @ 6, p: {x: int = 21 @ 8, y: float = 2.718 @ 9} @ 10};
type myproto1 = {y: float = 3.1415 @ 2, t: time @ 3, b: bytes @ 5, z: bool = true @ 6, p: {x: int = 21 @ 8, y: float = 2.718 @ 9} @ 10};
type myproto2 = {t: time @ 3, b: bytes @ 5, z: bool = true @ 6, p: {x: int = 21 @ 8, y: float = 2.718 @ 9} @ 10};
type myproto3 = {b: bytes @ 5, z: bool = true @ 6, p: {x: int = 21 @ 8, y: float = 2.718 @ 9} @ 10};
type myproto4 = {z: bool = true @ 6, p: {x: int = 21 @ 8, y: float = 2.718 @ 9} @ 10};
type myproto5 = {p: {x: int = 21 @ 8, y: float = 2.718 @ 9} @ 10};
type myproto6 = {p: {x: int = 21 @ 8} @ 10};
p0: myproto0 = {24, 5141.3, 17592186044415T, {1, 2, 3}, false, {-5, -1.2}};
p1: myproto1 = {5141.3, 17592186044415T, {1, 2, 3}, false, {-5, -1.2}};
p2: myproto2 = {17592186044415T, {1, 2, 3}, false, {-5, -1.2}};
p3: myproto3 = {{1, 2, 3}, false, {-5, -1.2}};
p4: myproto4 = {false, {-5, -1.2}};
p5: myproto5 = {{-5, -1.2}};
p6: myproto6 = {{-5}};
b0: bytes = convert(bytes, p0);
assert(convert(string, b0, "hex") == "081811cdcccccc4c15b44019ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
b1: bytes = convert(bytes, p1);
assert(convert(string, b1, "hex") == "11cdcccccc4c15b44019ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
b2: bytes = convert(bytes, p2);
assert(convert(string, b2, "hex") == "19ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
b3: bytes = convert(bytes, p3);
assert(convert(string, b3, "hex") == "2a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
b4: bytes = convert(bytes, p4);
assert(convert(string, b4, "hex") == "30005340fbffffffffffffffff0149333333333333f3bf54");
b5: bytes = convert(bytes, p5);
assert(convert(string, b5, "hex") == "5340fbffffffffffffffff0149333333333333f3bf54");
b6: bytes = convert(bytes, p6);
assert(convert(string, b6, "hex") == "5340fbffffffffffffffff0154");
q0: myproto0 = convert(myproto0, b0);
assert(convert(string, q0) == "{ 24, 5141.3, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { -5, -1.2 } }");
q1: myproto0 = convert(myproto0, b1);
assert(convert(string, q1) == "{ 42, 5141.3, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { -5, -1.2 } }");
q2: myproto0 = convert(myproto0, b2);
assert(convert(string, q2) == "{ 42, 3.1415, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { -5, -1.2 } }");
q3: myproto0 = convert(myproto0, b3);
assert(convert(string, q3) == "{ 42, 3.1415, \"Wed Dec 31 16:00:00 PST 1969\", X\"010203\", false, { -5, -1.2 } }");
q4: myproto0 = convert(myproto0, b4);
assert(convert(string, q4) == "{ 42, 3.1415, \"Wed Dec 31 16:00:00 PST 1969\", B\"\", false, { -5, -1.2 } }");
q5: myproto0 = convert(myproto0, b5);
assert(convert(string, q5) == "{ 42, 3.1415, \"Wed Dec 31 16:00:00 PST 1969\", B\"\", true, { -5, -1.2 } }");
q6: myproto0 = convert(myproto0, b6);
assert(convert(string, q6) == "{ 42, 3.1415, \"Wed Dec 31 16:00:00 PST 1969\", B\"\", true, { -5, 2.718 } }");
T: function(b: bool) {
	assert(b);
}
;
Verify: function(name: string, a0: myproto0, a1: myproto0, a2: myproto0, a3: myproto0, a4: myproto0, a5: myproto0, a6: myproto0) {
	T(inproto(a0.x));
	T(inproto(a0.y));
	T(inproto(a0.t));
	T(inproto(a0.b));
	T(inproto(a0.z));
	T(inproto(a0.p));
	T(inproto(a0.p.x));
	T(inproto(a0.p.y));
	T(!inproto(a1.x));
	T(inproto(a1.y));
	T(inproto(a1.t));
	T(inproto(a1.b));
	T(inproto(a1.z));
	T(inproto(a1.p));
	T(inproto(a1.p.x));
	T(inproto(a1.p.y));
	T(!inproto(a2.x));
	T(!inproto(a2.y));
	T(inproto(a2.t));
	T(inproto(a2.b));
	T(inproto(a2.z));
	T(inproto(a2.p));
	T(inproto(a2.p.x));
	T(inproto(a2.p.y));
	T(!inproto(a3.x));
	T(!inproto(a3.y));
	T(!inproto(a3.t));
	T(inproto(a3.b));
	T(inproto(a3.z));
	T(inproto(a3.p));
	T(inproto(a3.p.x));
	T(inproto(a3.p.y));
	T(!inproto(a4.x));
	T(!inproto(a4.y));
	T(!inproto(a4.t));
	T(!inproto(a4.b));
	T(inproto(a4.z));
	T(inproto(a4.p));
	T(inproto(a4.p.x));
	T(inproto(a4.p.y));
	T(!inproto(a5.x));
	T(!inproto(a5.y));
	T(!inproto(a5.t));
	T(!inproto(a5.b));
	T(!inproto(a5.z));
	T(inproto(a5.p));
	T(inproto(a5.p.x));
	T(inproto(a5.p.y));
	T(!inproto(a6.x));
	T(!inproto(a6.y));
	T(!inproto(a6.t));
	T(!inproto(a6.b));
	T(!inproto(a6.z));
	T(inproto(a6.p));
	T(inproto(a6.p.x));
	T(!inproto(a6.p.y));
}
;
Verify("q", q0, q1, q2, q3, q4, q5, q6);
r0: myproto0 = q0;
r1: myproto0 = q1;
r2: myproto0 = q2;
r3: myproto0 = q3;
r4: myproto0 = q4;
r5: myproto0 = q5;
r6: myproto0 = q6;
Verify("r", r0, r1, r2, r3, r4, r5, r6);
equal: function(a: bytes, b: bytes): bool {
	if (len(a) == len(b))
	{
		for (i: int = 0; i < len(a); i++)
			if (a[i] != b[i])
				return false;
		return true;
	}
	return false;
}
;
c0: bytes = convert(bytes, r0);
assert(convert(string, c0, "hex") == "081811cdcccccc4c15b44019ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
c1: bytes = convert(bytes, r1);
assert(convert(string, c1, "hex") == "11cdcccccc4c15b44019ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
c2: bytes = convert(bytes, r2);
assert(convert(string, c2, "hex") == "19ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
c3: bytes = convert(bytes, r3);
assert(convert(string, c3, "hex") == "2a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
c4: bytes = convert(bytes, r4);
assert(convert(string, c4, "hex") == "30005340fbffffffffffffffff0149333333333333f3bf54");
c5: bytes = convert(bytes, r5);
assert(convert(string, c5, "hex") == "5340fbffffffffffffffff0149333333333333f3bf54");
c6: bytes = convert(bytes, r6);
assert(convert(string, c6, "hex") == "5340fbffffffffffffffff0154");
T(equal(b0, c0));
T(equal(b1, c1));
T(equal(b2, c2));
T(equal(b3, c3));
T(equal(b4, c4));
T(equal(b5, c5));
T(equal(b6, c6));
t: myproto0 = r6;
T(!inproto(t.x));
T(t.x == 42);
t.x = 0;
T(inproto(t.x));
T(!inproto(t.y));
T(t.y == 3.1415);
t.y = 1.2;
T(inproto(t.y));
T(!inproto(t.t));
t.t = 1T;
T(inproto(t.t));
T(!inproto(t.b));
t.b = {1, 2, 3};
T(inproto(t.b));
T(!inproto(t.z));
T(t.z);
t.z = t.z;
T(inproto(t.z));
T(!inproto(t.p.y));
t.p.y = 0.0;
T(inproto(t.p.y));
u: myproto0 = convert(myproto0, convert(bytes, ""));
T(!inproto(u.p));
T(!inproto(u.p.y));
u.p.y = 0.0;
T(inproto(u.p));
T(inproto(u.p.y));
v: myproto0 = convert(myproto0, convert(bytes, ""));
T(v.p.x == 21);
T(!inproto(v.p));
T(!inproto(v.p.x));
w: array of int = new(array of int, 22, 0);
w[v.p.x] = 123;
T(!inproto(v.p));
T(!inproto(v.p.x));
T(w[21] == 123);
f: function(x: int): int {
	return 1;
}
;
w[f(v.p.x)] = 456;
T(!inproto(v.p));
T(!inproto(v.p.x));
T(w[1] == 456);
type myproto7 = {x: int @ 1};
a: array of myproto7 = {convert(myproto7, convert(bytes, ""))};
T(!inproto(a[0].x));
b: int = 0;
g: function(): int {
	b++;
	return 0;
}
;
a[g()].x = 0;
T(inproto(a[0].x));
T(b == 1);
