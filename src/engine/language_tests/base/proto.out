type myproto0 = {x: int = 42 @ 1, y: float = 3.1415 @ 2, t: time @ 3, b: bytes @ 5, z: bool = true @ 6, p: {x: int = 21 @ 8, y: float = 2.718 @ 9} @ 10};
type myproto1 = {y: float = 3.1415 @ 2, t: time @ 3, b: bytes @ 5, z: bool = true @ 6, p: {x: int = 21 @ 8, y: float = 2.718 @ 9} @ 10};
type myproto2 = {t: time @ 3, b: bytes @ 5, z: bool = true @ 6};
type myproto3 = {b: bytes @ 5, z: bool = true @ 6};
type myproto4 = {z: bool = true @ 6, p: {y: float = 2.718 @ 9} @ 10};
type myproto5 = {x: int = 42 @ 1, p: {x: int = 21 @ 8} @ 10};
p0: myproto0 = {24, 5141.3, convert(time, 17592186044415), {1, 2, 3}, false, {-5, -1.2}};
p1: myproto1 = {5141.3, convert(time, 17592186044415), {1, 2, 3}, false, {-5, -1.2}};
p2: myproto2 = {convert(time, 17592186044415), {1, 2, 3}, false};
p3: myproto3 = {{1, 2, 3}, false};
p4: myproto4 = {false, {-1.2}};
p5: myproto5 = {24, {-5}};
assert(convert(string, convert(bytes, p0), "hex") == "081811cdcccccc4c15b44019ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
assert(convert(string, convert(bytes, p1), "hex") == "11cdcccccc4c15b44019ffffffffff0f00002a0301020330005340fbffffffffffffffff0149333333333333f3bf54");
assert(convert(string, convert(bytes, p2), "hex") == "19ffffffffff0f00002a030102033000");
assert(convert(string, convert(bytes, p3), "hex") == "2a030102033000");
assert(convert(string, convert(bytes, p4), "hex") == "30005349333333333333f3bf54");
assert(convert(string, convert(bytes, p5), "hex") == "08185340fbffffffffffffffff0154");
b0: bytes = convert(bytes, "09180000000000000011cdcccccc4c15b44019ffffffffff0f00002a0301020330005341fbffffffffffffff49333333333333f3bf54", "hex");
b1: bytes = convert(bytes, "11cdcccccc4c15b44019ffffffffff0f00002a0301020330005341fbffffffffffffff49333333333333f3bf54", "hex");
b2: bytes = convert(bytes, "19ffffffffff0f00002a030102033000", "hex");
b3: bytes = convert(bytes, "2a030102033000", "hex");
b4: bytes = convert(bytes, "30005349333333333333f3bf54", "hex");
b5: bytes = convert(bytes, "0918000000000000005341fbffffffffffffff54", "hex");
q0: myproto0 = convert(myproto0, b0);
q1: myproto0 = convert(myproto0, b1);
q2: myproto0 = convert(myproto0, b2);
q3: myproto0 = convert(myproto0, b3);
q4: myproto0 = convert(myproto0, b4);
q5: myproto0 = convert(myproto0, b5);
assert(convert(string, p0) == "{ 24, 5141.3, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { -5, -1.2 } }");
assert(convert(string, q0) == "{ 24, 5141.3, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { -5, -1.2 } }");
assert(convert(string, p1) == "{ 5141.3, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { -5, -1.2 } }");
assert(convert(string, q1) == "{ 42, 5141.3, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { -5, -1.2 } }");
assert(convert(string, p2) == "{ \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false }");
assert(convert(string, q2) == "{ 42, 3.1415, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { 21, 2.718 } }");
assert(convert(string, p3) == "{ X\"010203\", false }");
assert(convert(string, q3) == "{ 42, 3.1415, \"Wed Dec 31 16:00:00 PST 1969\", X\"010203\", false, { 21, 2.718 } }");
assert(convert(string, p4) == "{ false, { -1.2 } }");
assert(convert(string, q4) == "{ 42, 3.1415, \"Wed Dec 31 16:00:00 PST 1969\", B\"\", false, { 21, -1.2 } }");
assert(convert(string, p5) == "{ 24, { -5 } }");
assert(convert(string, q5) == "{ 24, 3.1415, \"Wed Dec 31 16:00:00 PST 1969\", B\"\", true, { -5, 2.718 } }");
q1.x = 41;
q2.y = 0.005;
q2.p.x = 1;
q4.p.y = -5.1;
q5.p.y = -6.1;
assert(convert(string, q0) == "{ 24, 5141.3, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { -5, -1.2 } }");
assert(convert(string, q1) == "{ 41, 5141.3, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { -5, -1.2 } }");
assert(convert(string, q2) == "{ 42, 0.005, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { 1, 2.718 } }");
assert(convert(string, q3) == "{ 42, 3.1415, \"Wed Dec 31 16:00:00 PST 1969\", X\"010203\", false, { 21, 2.718 } }");
assert(convert(string, q4) == "{ 42, 3.1415, \"Wed Dec 31 16:00:00 PST 1969\", B\"\", false, { 21, -5.1 } }");
assert(convert(string, q5) == "{ 24, 3.1415, \"Wed Dec 31 16:00:00 PST 1969\", B\"\", true, { -5, -6.1 } }");
r0: myproto0 = convert(myproto0, b0);
r1: myproto0 = convert(myproto0, b1);
r2: myproto0 = convert(myproto0, b2);
r3: myproto0 = convert(myproto0, b3);
r4: myproto0 = convert(myproto0, b4);
r5: myproto0 = convert(myproto0, b5);
assert(convert(string, r0) == "{ 24, 5141.3, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { -5, -1.2 } }");
assert(convert(string, r1) == "{ 42, 5141.3, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { -5, -1.2 } }");
assert(convert(string, r2) == "{ 42, 3.1415, \"Thu Jul 23 07:43:06 PDT 1970\", X\"010203\", false, { 21, 2.718 } }");
assert(convert(string, r3) == "{ 42, 3.1415, \"Wed Dec 31 16:00:00 PST 1969\", X\"010203\", false, { 21, 2.718 } }");
assert(convert(string, r4) == "{ 42, 3.1415, \"Wed Dec 31 16:00:00 PST 1969\", B\"\", false, { 21, -1.2 } }");
assert(convert(string, r5) == "{ 24, 3.1415, \"Wed Dec 31 16:00:00 PST 1969\", B\"\", true, { -5, 2.718 } }");
type TestEQ = parsedmessage {type Proto1Message = parsedmessage {type NestedMessage = parsedmessage {a: int @ 1 : int64, b: int @ 2 : fixed32, c: int @ 3 : fixed32}, value: TestEQ.Proto1Message.NestedMessage @ 4}, type Message2 = {message1: TestEQ.Proto1Message @ 1}, event: array of TestEQ.Message2 @ 2};
type TestNE = {type Proto1Message = {type NestedMessage = {a: int @ 1 : int64, b: int @ 2 : fixed32, c: int @ 3 : fixed32}, value: TestNE.Proto1Message.NestedMessage @ 4}, type Message2 = {message1: TestNE.Proto1Message @ 1}, event: array of TestNE.Message2 @ 2};
session_bytes: bytes = X"130A0E220C080D151A0000001D2700000014130A0E220C081115220000001D3300000014";
session_eq: TestEQ = convert(TestEQ, session_bytes);
assert(!(session_eq.event[0].message1.value == session_eq.event[1].message1.value), "Tuples should not be equal");
session_ne: TestNE = convert(TestNE, session_bytes);
assert(session_ne.event[0].message1.value != session_ne.event[1].message1.value, "Tuples should not be equal");
