f: function() {
	b1: bool = true;
	b2: bool = false;
	b3c: int = 0;
	b3: function(): bool 	{
		b3c++;
		return nrand(5) == 17;
	}
;
	x00: int = 1 / convert(int, b1 == b1);
	x01: int = 1 / convert(int, b1 == b2);
	x02: int = 1 / convert(int, b1 == b3());
	assert(b3c == 1);
	b3c = 0;
	x03: int = 1 / convert(int, b2 == b1);
	x04: int = 1 / convert(int, b2 == b2);
	x05: int = 1 / convert(int, b2 == b3());
	assert(b3c == 1);
	b3c = 0;
	x06: int = 1 / convert(int, b3() == b1);
	assert(b3c == 1);
	b3c = 0;
	x07: int = 1 / convert(int, b3() == b2);
	assert(b3c == 1);
	b3c = 0;
	x08: int = 1 / convert(int, b3() == b3());
	assert(b3c == 2);
	b3c = 0;
	x09: int = 1 / convert(int, b1 != b1);
	x10: int = 1 / convert(int, b1 != b2);
	x11: int = 1 / convert(int, b1 != b3());
	assert(b3c == 1);
	b3c = 0;
	x12: int = 1 / convert(int, b2 != b1);
	x13: int = 1 / convert(int, b2 != b2);
	x14: int = 1 / convert(int, b2 != b3());
	assert(b3c == 1);
	b3c = 0;
	x15: int = 1 / convert(int, b3() != b1);
	assert(b3c == 1);
	b3c = 0;
	x16: int = 1 / convert(int, b3() != b2);
	assert(b3c == 1);
	b3c = 0;
	x17: int = 1 / convert(int, b3() != b3());
	assert(b3c == 2);
	b3c = 0;
	x18: int = 1 / convert(int, b1 and b1);
	x19: int = 1 / convert(int, b1 and b2);
	x20: int = 1 / convert(int, b1 and b3());
	assert(b3c == 1);
	b3c = 0;
	x21: int = 1 / convert(int, b2 and b1);
	x22: int = 1 / convert(int, b2 and b2);
	x23: int = 1 / convert(int, b2 and b3());
	assert(b3c == 1);
	b3c = 0;
	x24: int = 1 / convert(int, b3() and b1);
	assert(b3c == 1);
	b3c = 0;
	x25: int = 1 / convert(int, b3() and b2);
	assert(b3c == 1);
	b3c = 0;
	x26: int = 1 / convert(int, b3() and b3());
	assert(b3c == 2);
	b3c = 0;
	x27: int = 1 / convert(int, b1 or b1);
	x28: int = 1 / convert(int, b1 or b2);
	x29: int = 1 / convert(int, b1 or b3());
	assert(b3c == 1);
	b3c = 0;
	x30: int = 1 / convert(int, b2 or b1);
	x31: int = 1 / convert(int, b2 or b2);
	x32: int = 1 / convert(int, b2 or b3());
	assert(b3c == 1);
	b3c = 0;
	x33: int = 1 / convert(int, b3() or b1);
	assert(b3c == 1);
	b3c = 0;
	x34: int = 1 / convert(int, b3() or b2);
	assert(b3c == 1);
	b3c = 0;
	x35: int = 1 / convert(int, b3() or b3());
	assert(b3c == 2);
	b3c = 0;
	x36: int = 1 / convert(int, b1 && b1);
	x37: int = 1 / convert(int, b1 && b2);
	x38: int = 1 / convert(int, b1 && b3());
	assert(b3c == 1);
	b3c = 0;
	x39: int = 1 / convert(int, b2 && b1);
	x40: int = 1 / convert(int, b2 && b2);
	x41: int = 1 / convert(int, b2 && b3());
	assert(b3c == 0);
	x42: int = 1 / convert(int, b3() && b1);
	assert(b3c == 1);
	b3c = 0;
	x43: int = 1 / convert(int, b3() && b2);
	assert(b3c == 1);
	b3c = 0;
	x44: int = 1 / convert(int, b3() && b3());
	assert(b3c == 1);
	b3c = 0;
	x45: int = 1 / convert(int, b1 || b1);
	x46: int = 1 / convert(int, b1 || b2);
	x47: int = 1 / convert(int, b1 || b3());
	assert(b3c == 0);
	x48: int = 1 / convert(int, b2 || b1);
	x49: int = 1 / convert(int, b2 || b2);
	x50: int = 1 / convert(int, b2 || b3());
	assert(b3c == 1);
	b3c = 0;
	x51: int = 1 / convert(int, b3() || b1);
	assert(b3c == 1);
	b3c = 0;
	x52: int = 1 / convert(int, b3() || b2);
	assert(b3c == 1);
	b3c = 0;
	x53: int = 1 / convert(int, b3() || b3());
	assert(b3c == 2);
	b3c = 0;
	y00: int = 1 / (convert(int, b1 == b1) - 1);
	y01: int = 1 / (convert(int, b1 == b2) - 1);
	y02: int = 1 / (convert(int, b1 == b3()) - 1);
	assert(b3c == 1);
	b3c = 0;
	y03: int = 1 / (convert(int, b2 == b1) - 1);
	y04: int = 1 / (convert(int, b2 == b2) - 1);
	y05: int = 1 / (convert(int, b2 == b3()) - 1);
	assert(b3c == 1);
	b3c = 0;
	y06: int = 1 / (convert(int, b3() == b1) - 1);
	assert(b3c == 1);
	b3c = 0;
	y07: int = 1 / (convert(int, b3() == b2) - 1);
	assert(b3c == 1);
	b3c = 0;
	y08: int = 1 / (convert(int, b3() == b3()) - 1);
	assert(b3c == 2);
	b3c = 0;
	y09: int = 1 / (convert(int, b1 != b1) - 1);
	y10: int = 1 / (convert(int, b1 != b2) - 1);
	y11: int = 1 / (convert(int, b1 != b3()) - 1);
	assert(b3c == 1);
	b3c = 0;
	y12: int = 1 / (convert(int, b2 != b1) - 1);
	y13: int = 1 / (convert(int, b2 != b2) - 1);
	y14: int = 1 / (convert(int, b2 != b3()) - 1);
	assert(b3c == 1);
	b3c = 0;
	y15: int = 1 / (convert(int, b3() != b1) - 1);
	assert(b3c == 1);
	b3c = 0;
	y16: int = 1 / (convert(int, b3() != b2) - 1);
	assert(b3c == 1);
	b3c = 0;
	y17: int = 1 / (convert(int, b3() != b3()) - 1);
	assert(b3c == 2);
	b3c = 0;
	y18: int = 1 / (convert(int, b1 and b1) - 1);
	y19: int = 1 / (convert(int, b1 and b2) - 1);
	y20: int = 1 / (convert(int, b1 and b3()) - 1);
	assert(b3c == 1);
	b3c = 0;
	y21: int = 1 / (convert(int, b2 and b1) - 1);
	y22: int = 1 / (convert(int, b2 and b2) - 1);
	y23: int = 1 / (convert(int, b2 and b3()) - 1);
	assert(b3c == 1);
	b3c = 0;
	y24: int = 1 / (convert(int, b3() and b1) - 1);
	assert(b3c == 1);
	b3c = 0;
	y25: int = 1 / (convert(int, b3() and b2) - 1);
	assert(b3c == 1);
	b3c = 0;
	y26: int = 1 / (convert(int, b3() and b3()) - 1);
	assert(b3c == 2);
	b3c = 0;
	y27: int = 1 / (convert(int, b1 or b1) - 1);
	y28: int = 1 / (convert(int, b1 or b2) - 1);
	y29: int = 1 / (convert(int, b1 or b3()) - 1);
	assert(b3c == 1);
	b3c = 0;
	y30: int = 1 / (convert(int, b2 or b1) - 1);
	y31: int = 1 / (convert(int, b2 or b2) - 1);
	y32: int = 1 / (convert(int, b2 or b3()) - 1);
	assert(b3c == 1);
	b3c = 0;
	y33: int = 1 / (convert(int, b3() or b1) - 1);
	assert(b3c == 1);
	b3c = 0;
	y34: int = 1 / (convert(int, b3() or b2) - 1);
	assert(b3c == 1);
	b3c = 0;
	y35: int = 1 / (convert(int, b3() or b3()) - 1);
	assert(b3c == 2);
	b3c = 0;
	y36: int = 1 / (convert(int, b1 && b1) - 1);
	y37: int = 1 / (convert(int, b1 && b2) - 1);
	y38: int = 1 / (convert(int, b1 && b3()) - 1);
	assert(b3c == 1);
	b3c = 0;
	y39: int = 1 / (convert(int, b2 && b1) - 1);
	y40: int = 1 / (convert(int, b2 && b2) - 1);
	y41: int = 1 / (convert(int, b2 && b3()) - 1);
	assert(b3c == 0);
	y42: int = 1 / (convert(int, b3() && b1) - 1);
	assert(b3c == 1);
	b3c = 0;
	y43: int = 1 / (convert(int, b3() && b2) - 1);
	assert(b3c == 1);
	b3c = 0;
	y44: int = 1 / (convert(int, b3() && b3()) - 1);
	assert(b3c == 1);
	b3c = 0;
	y45: int = 1 / (convert(int, b1 || b1) - 1);
	y46: int = 1 / (convert(int, b1 || b2) - 1);
	y47: int = 1 / (convert(int, b1 || b3()) - 1);
	assert(b3c == 0);
	y48: int = 1 / (convert(int, b2 || b1) - 1);
	y49: int = 1 / (convert(int, b2 || b2) - 1);
	y50: int = 1 / (convert(int, b2 || b3()) - 1);
	assert(b3c == 1);
	b3c = 0;
	y51: int = 1 / (convert(int, b3() || b1) - 1);
	assert(b3c == 1);
	b3c = 0;
	y52: int = 1 / (convert(int, b3() || b2) - 1);
	assert(b3c == 1);
	b3c = 0;
	y53: int = 1 / (convert(int, b3() || b3()) - 1);
	assert(b3c == 2);
	b3c = 0;
}
;
f();
if (nrand(5) == 17)
{
	i1: int = 4;
	i2: int = 4;
	i3: int = -4;
	i4: int = 0;
	i5: int = 3;
	1 / (i1 + i5);
	1 / (i1 + i3);
	1 / (i1 - i5);
	1 / (i1 - i2);
	1 / ((i1 * i1) - 15);
	1 / ((i1 * i1) - 16);
	1 / ((i1 / 2) - 3);
	1 / ((i1 / 2) - 2);
	1 % ((i1 / 2) - 3);
	1 % ((i1 / 2) - 2);
	1 / convert(int, i1 == i2);
	1 / convert(int, i1 == i3);
	1 / convert(int, i1 != i3);
	1 / convert(int, i1 != i2);
	1 / convert(int, i3 < i1);
	1 / convert(int, i1 < i3);
	1 / convert(int, i3 <= i1);
	1 / convert(int, i1 <= i3);
	1 / convert(int, i1 > i3);
	1 / convert(int, i3 > i1);
	1 / convert(int, i1 >= i3);
	1 / convert(int, i3 >= i1);
	1 / (i1 & i2);
	1 / (i1 & i5);
	1 / (i4 | i5);
	1 / (i4 | i4);
	1 / (i1 ^ i5);
	1 / (i1 ^ i2);
	1 / ((i1 << 2) - (i1 * 5));
	1 / ((i1 << 2) - (i1 * 4));
	1 / ((i2 >> 1) - (i1 / 1));
	1 / ((i2 >> 1) - (i1 / 2));
	f1: float = 4.0;
	f2: float = 4.0;
	f3: float = -4.0;
	1.0 / (f1 + f2);
	1.0 / (f1 + f3);
	1.0 / (f1 - f3);
	1.0 / (f1 - f2);
	1.0 / ((f1 * f1) - 15.0);
	1.0 / ((f1 * f1) - 16.0);
	1.0 / ((f1 / 2.0) - 3.0);
	1.0 / ((f1 / 2.0) - 2.0);
	1 / convert(int, f1 == f2);
	1 / convert(int, f1 == f3);
	1 / convert(int, f1 != f3);
	1 / convert(int, f1 != f2);
	1 / convert(int, f3 < f1);
	1 / convert(int, f1 < f3);
	1 / convert(int, f3 <= f1);
	1 / convert(int, f1 <= f3);
	1 / convert(int, f1 > f3);
	1 / convert(int, f3 > f1);
	1 / convert(int, f1 >= f3);
	1 / convert(int, f3 >= f1);
	t1: time = 123456789987654321T;
	t2: time = 123456789987654321T;
	t3: time = convert(time, -123456789987654321);
	1 / convert(int, t1 + t2);
	1 / convert(int, t1 + t3);
	1 / convert(int, t1 - t3);
	1 / convert(int, t1 - t2);
	1 / convert(int, t1 == t2);
	1 / convert(int, t1 == t3);
	1 / convert(int, t1 != t3);
	1 / convert(int, t1 != t2);
	1 / convert(int, t1 < t3);
	1 / convert(int, t3 < t1);
	1 / convert(int, t1 <= t3);
	1 / convert(int, t3 <= t1);
	1 / convert(int, t3 > t1);
	1 / convert(int, t1 > t3);
	1 / convert(int, t3 >= t1);
	1 / convert(int, t1 >= t3);
	fp1: fingerprint = 0x1234567887654321P;
	fp2: fingerprint = 0x1234567887654321P;
	fp3: fingerprint = 0x8765432112345678P;
	fp4: fingerprint = 0x18d0ca4e7f4c4550P;
	1 / (convert(int, fp1 + fp2) - convert(int, fp4));
	1 / (convert(int, fp1 + fp3) - convert(int, fp4));
	1 / convert(int, fp1 == fp2);
	1 / convert(int, fp1 == fp3);
	1 / convert(int, fp1 != fp3);
	1 / convert(int, fp1 != fp2);
	s1: string = "abc";
	s2: string = "abc";
	s3: string = "def";
	s4: string = "abcdef";
	1 / convert(int, (s1 + s2) != s4);
	1 / convert(int, (s1 + s3) != s4);
	1 / convert(int, s1 == s2);
	1 / convert(int, s1 == s3);
	1 / convert(int, s1 != s3);
	1 / convert(int, s1 != s2);
	1 / convert(int, s1 < s3);
	1 / convert(int, s3 < s1);
	1 / convert(int, s1 <= s3);
	1 / convert(int, s3 <= s1);
	1 / convert(int, s3 > s1);
	1 / convert(int, s1 > s3);
	1 / convert(int, s3 >= s1);
	by1: bytes = B"abc";
	by2: bytes = B"abc";
	by3: bytes = B"def";
	by4: bytes = B"abcdef";
	1 / convert(int, (by1 + by2) != by4);
	1 / convert(int, (by1 + by3) != by4);
	1 / convert(int, by1 == by2);
	1 / convert(int, by1 == by3);
	1 / convert(int, by1 != by3);
	1 / convert(int, by1 != by2);
	1 / convert(int, by1 < by3);
	1 / convert(int, by3 < by1);
	1 / convert(int, by1 <= by3);
	1 / convert(int, by3 <= by1);
	1 / convert(int, by3 > by1);
	1 / convert(int, by1 > by3);
	1 / convert(int, by3 >= by1);
	1 / convert(int, by1 >= by3);
}
