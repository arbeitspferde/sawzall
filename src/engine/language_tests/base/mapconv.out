l1: bool = false;
l2: bool = true;
l3: bool = true;
l4: bool = false;
b1: bytes = B"abcdefgh";
b2: bytes = B"ijklmnop";
b3: bytes = B"qrstuvwx";
b4: bytes = B"yzabcdef";
p1: fingerprint = 0x00000000499602d2P;
p2: fingerprint = 0x000000008bd03835P;
p3: fingerprint = 0x00000000ce0a6a14P;
p4: fingerprint = 0x00000001104478cbP;
f1: float = 1.1;
f2: float = 2.3;
f3: float = 3.5;
f4: float = 4.7;
i1: int = 5678901234;
i2: int = 6789012345;
i3: int = 7890123456;
i4: int = 8901234567;
s1: string = "abc";
s2: string = "def";
s3: string = "ghi";
s4: string = "jkl";
t1: time = convert(time, 9876543210);
t2: time = convert(time, 8765432109);
t3: time = convert(time, 7654321098);
t4: time = convert(time, 6543210987);
u1: uint = 5432109876U;
u2: uint = 4321098765U;
u3: uint = 3210987654U;
u4: uint = 2109876543U;
sl1: string = "F";
sl2: string = "T";
sl3: string = "T";
sl4: string = "F";
sb1: string = s1;
sb2: string = s2;
sb3: string = s3;
sb4: string = s4;
sp1: string = "1234567890";
sp2: string = "2345678901";
sp3: string = "3456789012";
sp4: string = "4567890123";
sf1: string = "1.1";
sf2: string = "2.3";
sf3: string = "3.5";
sf4: string = "4.7";
si1: string = "5678901234";
si2: string = "6789012345";
si3: string = "7890123456";
si4: string = "8901234567";
st1: string = "Mar  4 15:25:48 PST 2009";
st2: string = "Mar  5 15:25:48 PST 2009";
st3: string = "Mar  6 15:25:48 PST 2009";
st4: string = "Mar  7 15:25:48 PST 2009";
su1: string = "5432109876";
su2: string = "4321098765";
su3: string = "3210987654";
su4: string = "2109876543";
maplil: map [bool] of int = convert(map [bool] of int, {l1, l2, l3, l4});
assert(len(maplil) == 2);
assert(maplil[l1] == convert(int, l2));
assert(maplil[l3] == convert(int, l4));
maplsl: map [bool] of string = convert(map [bool] of string, {l1, l2, l3, l4});
assert(len(maplsl) == 2);
assert(maplsl[l1] == convert(string, l2));
assert(maplsl[l3] == convert(string, l4));
maplul: map [bool] of uint = convert(map [bool] of uint, {l1, l2, l3, l4});
assert(len(maplul) == 2);
assert(maplul[l1] == convert(uint, l2));
assert(maplul[l3] == convert(uint, l4));
mapill: map [int] of bool = convert(map [int] of bool, {l1, l2, l3, l4});
assert(len(mapill) == 2);
assert(mapill[convert(int, l1)] == l2);
assert(mapill[convert(int, l3)] == l4);
mapiil: map [int] of int = convert(map [int] of int, {l1, l2, l3, l4});
assert(len(mapiil) == 2);
assert(mapiil[convert(int, l1)] == convert(int, l2));
assert(mapiil[convert(int, l3)] == convert(int, l4));
mapisl: map [int] of string = convert(map [int] of string, {l1, l2, l3, l4});
assert(len(mapisl) == 2);
assert(mapisl[convert(int, l1)] == convert(string, l2));
assert(mapisl[convert(int, l3)] == convert(string, l4));
mapiul: map [int] of uint = convert(map [int] of uint, {l1, l2, l3, l4});
assert(len(mapiul) == 2);
assert(mapiul[convert(int, l1)] == convert(uint, l2));
assert(mapiul[convert(int, l3)] == convert(uint, l4));
mapsll: map [string] of bool = convert(map [string] of bool, {l1, l2, l3, l4});
assert(len(mapsll) == 2);
assert(mapsll[convert(string, l1)] == l2);
assert(mapsll[convert(string, l3)] == l4);
mapsil: map [string] of int = convert(map [string] of int, {l1, l2, l3, l4});
assert(len(mapsil) == 2);
assert(mapsil[convert(string, l1)] == convert(int, l2));
assert(mapsil[convert(string, l3)] == convert(int, l4));
mapssl: map [string] of string = convert(map [string] of string, {l1, l2, l3, l4});
assert(len(mapssl) == 2);
assert(mapssl[convert(string, l1)] == convert(string, l2));
assert(mapssl[convert(string, l3)] == convert(string, l4));
mapsul: map [string] of uint = convert(map [string] of uint, {l1, l2, l3, l4});
assert(len(mapsul) == 2);
assert(mapsul[convert(string, l1)] == convert(uint, l2));
assert(mapsul[convert(string, l3)] == convert(uint, l4));
mapull: map [uint] of bool = convert(map [uint] of bool, {l1, l2, l3, l4});
assert(len(mapull) == 2);
assert(mapull[convert(uint, l1)] == l2);
assert(mapull[convert(uint, l3)] == l4);
mapuil: map [uint] of int = convert(map [uint] of int, {l1, l2, l3, l4});
assert(len(mapuil) == 2);
assert(mapuil[convert(uint, l1)] == convert(int, l2));
assert(mapuil[convert(uint, l3)] == convert(int, l4));
mapusl: map [uint] of string = convert(map [uint] of string, {l1, l2, l3, l4});
assert(len(mapusl) == 2);
assert(mapusl[convert(uint, l1)] == convert(string, l2));
assert(mapusl[convert(uint, l3)] == convert(string, l4));
mapuul: map [uint] of uint = convert(map [uint] of uint, {l1, l2, l3, l4});
assert(len(mapuul) == 2);
assert(mapuul[convert(uint, l1)] == convert(uint, l2));
assert(mapuul[convert(uint, l3)] == convert(uint, l4));
mapbpb: map [bytes] of fingerprint = convert(map [bytes] of fingerprint, {b1, b2, b3, b4});
assert(len(mapbpb) == 2);
assert(mapbpb[b1] == convert(fingerprint, b2));
assert(mapbpb[b3] == convert(fingerprint, b4));
mapbsb: map [bytes] of string = convert(map [bytes] of string, {b1, b2, b3, b4});
assert(len(mapbsb) == 2);
assert(mapbsb[b1] == convert(string, b2));
assert(mapbsb[b3] == convert(string, b4));
mappbb: map [fingerprint] of bytes = convert(map [fingerprint] of bytes, {b1, b2, b3, b4});
assert(len(mappbb) == 2);
assert(mappbb[convert(fingerprint, b1)] == b2);
assert(mappbb[convert(fingerprint, b3)] == b4);
mapppb: map [fingerprint] of fingerprint = convert(map [fingerprint] of fingerprint, {b1, b2, b3, b4});
assert(len(mapppb) == 2);
assert(mapppb[convert(fingerprint, b1)] == convert(fingerprint, b2));
assert(mapppb[convert(fingerprint, b3)] == convert(fingerprint, b4));
mappsb: map [fingerprint] of string = convert(map [fingerprint] of string, {b1, b2, b3, b4});
assert(len(mappsb) == 2);
assert(mappsb[convert(fingerprint, b1)] == convert(string, b2));
assert(mappsb[convert(fingerprint, b3)] == convert(string, b4));
mapsbb: map [string] of bytes = convert(map [string] of bytes, {b1, b2, b3, b4});
assert(len(mapsbb) == 2);
assert(mapsbb[convert(string, b1)] == b2);
assert(mapsbb[convert(string, b3)] == b4);
mapspb: map [string] of fingerprint = convert(map [string] of fingerprint, {b1, b2, b3, b4});
assert(len(mapspb) == 2);
assert(mapspb[convert(string, b1)] == convert(fingerprint, b2));
assert(mapspb[convert(string, b3)] == convert(fingerprint, b4));
mapssb: map [string] of string = convert(map [string] of string, {b1, b2, b3, b4});
assert(len(mapssb) == 2);
assert(mapssb[convert(string, b1)] == convert(string, b2));
assert(mapssb[convert(string, b3)] == convert(string, b4));
mapbbp: map [bytes] of bytes = convert(map [bytes] of bytes, {p1, p2, p3, p4});
assert(len(mapbbp) == 2);
assert(mapbbp[convert(bytes, p1)] == convert(bytes, p2));
assert(mapbbp[convert(bytes, p3)] == convert(bytes, p4));
mapbpp: map [bytes] of fingerprint = convert(map [bytes] of fingerprint, {p1, p2, p3, p4});
assert(len(mapbpp) == 2);
assert(mapbpp[convert(bytes, p1)] == p2);
assert(mapbpp[convert(bytes, p3)] == p4);
mapbip: map [bytes] of int = convert(map [bytes] of int, {p1, p2, p3, p4});
assert(len(mapbip) == 2);
assert(mapbip[convert(bytes, p1)] == convert(int, p2));
assert(mapbip[convert(bytes, p3)] == convert(int, p4));
mapbsp: map [bytes] of string = convert(map [bytes] of string, {p1, p2, p3, p4});
assert(len(mapbsp) == 2);
assert(mapbsp[convert(bytes, p1)] == convert(string, p2));
assert(mapbsp[convert(bytes, p3)] == convert(string, p4));
mappbp: map [fingerprint] of bytes = convert(map [fingerprint] of bytes, {p1, p2, p3, p4});
assert(len(mappbp) == 2);
assert(mappbp[p1] == convert(bytes, p2));
assert(mappbp[p3] == convert(bytes, p4));
mappip: map [fingerprint] of int = convert(map [fingerprint] of int, {p1, p2, p3, p4});
assert(len(mappip) == 2);
assert(mappip[p1] == convert(int, p2));
assert(mappip[p3] == convert(int, p4));
mappsp: map [fingerprint] of string = convert(map [fingerprint] of string, {p1, p2, p3, p4});
assert(len(mappsp) == 2);
assert(mappsp[p1] == convert(string, p2));
assert(mappsp[p3] == convert(string, p4));
mapibp: map [int] of bytes = convert(map [int] of bytes, {p1, p2, p3, p4});
assert(len(mapibp) == 2);
assert(mapibp[convert(int, p1)] == convert(bytes, p2));
assert(mapibp[convert(int, p3)] == convert(bytes, p4));
mapipp: map [int] of fingerprint = convert(map [int] of fingerprint, {p1, p2, p3, p4});
assert(len(mapipp) == 2);
assert(mapipp[convert(int, p1)] == p2);
assert(mapipp[convert(int, p3)] == p4);
mapiip: map [int] of int = convert(map [int] of int, {p1, p2, p3, p4});
assert(len(mapiip) == 2);
assert(mapiip[convert(int, p1)] == convert(int, p2));
assert(mapiip[convert(int, p3)] == convert(int, p4));
mapisp: map [int] of string = convert(map [int] of string, {p1, p2, p3, p4});
assert(len(mapisp) == 2);
assert(mapisp[convert(int, p1)] == convert(string, p2));
assert(mapisp[convert(int, p3)] == convert(string, p4));
mapsbp: map [string] of bytes = convert(map [string] of bytes, {p1, p2, p3, p4});
assert(len(mapsbp) == 2);
assert(mapsbp[convert(string, p1)] == convert(bytes, p2));
assert(mapsbp[convert(string, p3)] == convert(bytes, p4));
mapspp: map [string] of fingerprint = convert(map [string] of fingerprint, {p1, p2, p3, p4});
assert(len(mapspp) == 2);
assert(mapspp[convert(string, p1)] == p2);
assert(mapspp[convert(string, p3)] == p4);
mapsip: map [string] of int = convert(map [string] of int, {p1, p2, p3, p4});
assert(len(mapsip) == 2);
assert(mapsip[convert(string, p1)] == convert(int, p2));
assert(mapsip[convert(string, p3)] == convert(int, p4));
mapssp: map [string] of string = convert(map [string] of string, {p1, p2, p3, p4});
assert(len(mapssp) == 2);
assert(mapssp[convert(string, p1)] == convert(string, p2));
assert(mapssp[convert(string, p3)] == convert(string, p4));
mapfif: map [float] of int = convert(map [float] of int, {f1, f2, f3, f4});
assert(len(mapfif) == 2);
assert(mapfif[f1] == convert(int, f2));
assert(mapfif[f3] == convert(int, f4));
mapfsf: map [float] of string = convert(map [float] of string, {f1, f2, f3, f4});
assert(len(mapfsf) == 2);
assert(mapfsf[f1] == convert(string, f2));
assert(mapfsf[f3] == convert(string, f4));
mapfuf: map [float] of uint = convert(map [float] of uint, {f1, f2, f3, f4});
assert(len(mapfuf) == 2);
assert(mapfuf[f1] == convert(uint, f2));
assert(mapfuf[f3] == convert(uint, f4));
mapiff: map [int] of float = convert(map [int] of float, {f1, f2, f3, f4});
assert(len(mapiff) == 2);
assert(mapiff[convert(int, f1)] == f2);
assert(mapiff[convert(int, f3)] == f4);
mapiif: map [int] of int = convert(map [int] of int, {f1, f2, f3, f4});
assert(len(mapiif) == 2);
assert(mapiif[convert(int, f1)] == convert(int, f2));
assert(mapiif[convert(int, f3)] == convert(int, f4));
mapisf: map [int] of string = convert(map [int] of string, {f1, f2, f3, f4});
assert(len(mapisf) == 2);
assert(mapisf[convert(int, f1)] == convert(string, f2));
assert(mapisf[convert(int, f3)] == convert(string, f4));
mapiuf: map [int] of uint = convert(map [int] of uint, {f1, f2, f3, f4});
assert(len(mapiuf) == 2);
assert(mapiuf[convert(int, f1)] == convert(uint, f2));
assert(mapiuf[convert(int, f3)] == convert(uint, f4));
mapsff: map [string] of float = convert(map [string] of float, {f1, f2, f3, f4});
assert(len(mapsff) == 2);
assert(mapsff[convert(string, f1)] == f2);
assert(mapsff[convert(string, f3)] == f4);
mapsif: map [string] of int = convert(map [string] of int, {f1, f2, f3, f4});
assert(len(mapsif) == 2);
assert(mapsif[convert(string, f1)] == convert(int, f2));
assert(mapsif[convert(string, f3)] == convert(int, f4));
mapssf: map [string] of string = convert(map [string] of string, {f1, f2, f3, f4});
assert(len(mapssf) == 2);
assert(mapssf[convert(string, f1)] == convert(string, f2));
assert(mapssf[convert(string, f3)] == convert(string, f4));
mapsuf: map [string] of uint = convert(map [string] of uint, {f1, f2, f3, f4});
assert(len(mapsuf) == 2);
assert(mapsuf[convert(string, f1)] == convert(uint, f2));
assert(mapsuf[convert(string, f3)] == convert(uint, f4));
mapuff: map [uint] of float = convert(map [uint] of float, {f1, f2, f3, f4});
assert(len(mapuff) == 2);
assert(mapuff[convert(uint, f1)] == f2);
assert(mapuff[convert(uint, f3)] == f4);
mapuif: map [uint] of int = convert(map [uint] of int, {f1, f2, f3, f4});
assert(len(mapuif) == 2);
assert(mapuif[convert(uint, f1)] == convert(int, f2));
assert(mapuif[convert(uint, f3)] == convert(int, f4));
mapusf: map [uint] of string = convert(map [uint] of string, {f1, f2, f3, f4});
assert(len(mapusf) == 2);
assert(mapusf[convert(uint, f1)] == convert(string, f2));
assert(mapusf[convert(uint, f3)] == convert(string, f4));
mapuuf: map [uint] of uint = convert(map [uint] of uint, {f1, f2, f3, f4});
assert(len(mapuuf) == 2);
assert(mapuuf[convert(uint, f1)] == convert(uint, f2));
assert(mapuuf[convert(uint, f3)] == convert(uint, f4));
mapppi: map [fingerprint] of fingerprint = convert(map [fingerprint] of fingerprint, {i1, i2, i3, i4});
assert(len(mapppi) == 2);
assert(mapppi[convert(fingerprint, i1)] == convert(fingerprint, i2));
assert(mapppi[convert(fingerprint, i3)] == convert(fingerprint, i4));
mappfi: map [fingerprint] of float = convert(map [fingerprint] of float, {i1, i2, i3, i4});
assert(len(mappfi) == 2);
assert(mappfi[convert(fingerprint, i1)] == convert(float, i2));
assert(mappfi[convert(fingerprint, i3)] == convert(float, i4));
mappii: map [fingerprint] of int = convert(map [fingerprint] of int, {i1, i2, i3, i4});
assert(len(mappii) == 2);
assert(mappii[convert(fingerprint, i1)] == i2);
assert(mappii[convert(fingerprint, i3)] == i4);
mappsi: map [fingerprint] of string = convert(map [fingerprint] of string, {i1, i2, i3, i4});
assert(len(mappsi) == 2);
assert(mappsi[convert(fingerprint, i1)] == convert(string, i2));
assert(mappsi[convert(fingerprint, i3)] == convert(string, i4));
mappti: map [fingerprint] of time = convert(map [fingerprint] of time, {i1, i2, i3, i4});
assert(len(mappti) == 2);
assert(mappti[convert(fingerprint, i1)] == convert(time, i2));
assert(mappti[convert(fingerprint, i3)] == convert(time, i4));
mappui: map [fingerprint] of uint = convert(map [fingerprint] of uint, {i1, i2, i3, i4});
assert(len(mappui) == 2);
assert(mappui[convert(fingerprint, i1)] == convert(uint, i2));
assert(mappui[convert(fingerprint, i3)] == convert(uint, i4));
mapfpi: map [float] of fingerprint = convert(map [float] of fingerprint, {i1, i2, i3, i4});
assert(len(mapfpi) == 2);
assert(mapfpi[convert(float, i1)] == convert(fingerprint, i2));
assert(mapfpi[convert(float, i3)] == convert(fingerprint, i4));
mapffi: map [float] of float = convert(map [float] of float, {i1, i2, i3, i4});
assert(len(mapffi) == 2);
assert(mapffi[convert(float, i1)] == convert(float, i2));
assert(mapffi[convert(float, i3)] == convert(float, i4));
mapfii: map [float] of int = convert(map [float] of int, {i1, i2, i3, i4});
assert(len(mapfii) == 2);
assert(mapfii[convert(float, i1)] == i2);
assert(mapfii[convert(float, i3)] == i4);
mapfsi: map [float] of string = convert(map [float] of string, {i1, i2, i3, i4});
assert(len(mapfsi) == 2);
assert(mapfsi[convert(float, i1)] == convert(string, i2));
assert(mapfsi[convert(float, i3)] == convert(string, i4));
mapfti: map [float] of time = convert(map [float] of time, {i1, i2, i3, i4});
assert(len(mapfti) == 2);
assert(mapfti[convert(float, i1)] == convert(time, i2));
assert(mapfti[convert(float, i3)] == convert(time, i4));
mapfui: map [float] of uint = convert(map [float] of uint, {i1, i2, i3, i4});
assert(len(mapfui) == 2);
assert(mapfui[convert(float, i1)] == convert(uint, i2));
assert(mapfui[convert(float, i3)] == convert(uint, i4));
mapipi: map [int] of fingerprint = convert(map [int] of fingerprint, {i1, i2, i3, i4});
assert(len(mapipi) == 2);
assert(mapipi[i1] == convert(fingerprint, i2));
assert(mapipi[i3] == convert(fingerprint, i4));
mapifi: map [int] of float = convert(map [int] of float, {i1, i2, i3, i4});
assert(len(mapifi) == 2);
assert(mapifi[i1] == convert(float, i2));
assert(mapifi[i3] == convert(float, i4));
mapisi: map [int] of string = convert(map [int] of string, {i1, i2, i3, i4});
assert(len(mapisi) == 2);
assert(mapisi[i1] == convert(string, i2));
assert(mapisi[i3] == convert(string, i4));
mapiti: map [int] of time = convert(map [int] of time, {i1, i2, i3, i4});
assert(len(mapiti) == 2);
assert(mapiti[i1] == convert(time, i2));
assert(mapiti[i3] == convert(time, i4));
mapiui: map [int] of uint = convert(map [int] of uint, {i1, i2, i3, i4});
assert(len(mapiui) == 2);
assert(mapiui[i1] == convert(uint, i2));
assert(mapiui[i3] == convert(uint, i4));
mapspi: map [string] of fingerprint = convert(map [string] of fingerprint, {i1, i2, i3, i4});
assert(len(mapspi) == 2);
assert(mapspi[convert(string, i1)] == convert(fingerprint, i2));
assert(mapspi[convert(string, i3)] == convert(fingerprint, i4));
mapsfi: map [string] of float = convert(map [string] of float, {i1, i2, i3, i4});
assert(len(mapsfi) == 2);
assert(mapsfi[convert(string, i1)] == convert(float, i2));
assert(mapsfi[convert(string, i3)] == convert(float, i4));
mapsii: map [string] of int = convert(map [string] of int, {i1, i2, i3, i4});
assert(len(mapsii) == 2);
assert(mapsii[convert(string, i1)] == i2);
assert(mapsii[convert(string, i3)] == i4);
mapssi: map [string] of string = convert(map [string] of string, {i1, i2, i3, i4});
assert(len(mapssi) == 2);
assert(mapssi[convert(string, i1)] == convert(string, i2));
assert(mapssi[convert(string, i3)] == convert(string, i4));
mapsti: map [string] of time = convert(map [string] of time, {i1, i2, i3, i4});
assert(len(mapsti) == 2);
assert(mapsti[convert(string, i1)] == convert(time, i2));
assert(mapsti[convert(string, i3)] == convert(time, i4));
mapsui: map [string] of uint = convert(map [string] of uint, {i1, i2, i3, i4});
assert(len(mapsui) == 2);
assert(mapsui[convert(string, i1)] == convert(uint, i2));
assert(mapsui[convert(string, i3)] == convert(uint, i4));
maptpi: map [time] of fingerprint = convert(map [time] of fingerprint, {i1, i2, i3, i4});
assert(len(maptpi) == 2);
assert(maptpi[convert(time, i1)] == convert(fingerprint, i2));
assert(maptpi[convert(time, i3)] == convert(fingerprint, i4));
maptfi: map [time] of float = convert(map [time] of float, {i1, i2, i3, i4});
assert(len(maptfi) == 2);
assert(maptfi[convert(time, i1)] == convert(float, i2));
assert(maptfi[convert(time, i3)] == convert(float, i4));
maptii: map [time] of int = convert(map [time] of int, {i1, i2, i3, i4});
assert(len(maptii) == 2);
assert(maptii[convert(time, i1)] == i2);
assert(maptii[convert(time, i3)] == i4);
maptsi: map [time] of string = convert(map [time] of string, {i1, i2, i3, i4});
assert(len(maptsi) == 2);
assert(maptsi[convert(time, i1)] == convert(string, i2));
assert(maptsi[convert(time, i3)] == convert(string, i4));
maptti: map [time] of time = convert(map [time] of time, {i1, i2, i3, i4});
assert(len(maptti) == 2);
assert(maptti[convert(time, i1)] == convert(time, i2));
assert(maptti[convert(time, i3)] == convert(time, i4));
maptui: map [time] of uint = convert(map [time] of uint, {i1, i2, i3, i4});
assert(len(maptui) == 2);
assert(maptui[convert(time, i1)] == convert(uint, i2));
assert(maptui[convert(time, i3)] == convert(uint, i4));
mapupi: map [uint] of fingerprint = convert(map [uint] of fingerprint, {i1, i2, i3, i4});
assert(len(mapupi) == 2);
assert(mapupi[convert(uint, i1)] == convert(fingerprint, i2));
assert(mapupi[convert(uint, i3)] == convert(fingerprint, i4));
mapufi: map [uint] of float = convert(map [uint] of float, {i1, i2, i3, i4});
assert(len(mapufi) == 2);
assert(mapufi[convert(uint, i1)] == convert(float, i2));
assert(mapufi[convert(uint, i3)] == convert(float, i4));
mapuii: map [uint] of int = convert(map [uint] of int, {i1, i2, i3, i4});
assert(len(mapuii) == 2);
assert(mapuii[convert(uint, i1)] == i2);
assert(mapuii[convert(uint, i3)] == i4);
mapusi: map [uint] of string = convert(map [uint] of string, {i1, i2, i3, i4});
assert(len(mapusi) == 2);
assert(mapusi[convert(uint, i1)] == convert(string, i2));
assert(mapusi[convert(uint, i3)] == convert(string, i4));
maputi: map [uint] of time = convert(map [uint] of time, {i1, i2, i3, i4});
assert(len(maputi) == 2);
assert(maputi[convert(uint, i1)] == convert(time, i2));
assert(maputi[convert(uint, i3)] == convert(time, i4));
mapuui: map [uint] of uint = convert(map [uint] of uint, {i1, i2, i3, i4});
assert(len(mapuui) == 2);
assert(mapuui[convert(uint, i1)] == convert(uint, i2));
assert(mapuui[convert(uint, i3)] == convert(uint, i4));
maplls: map [bool] of bool = convert(map [bool] of bool, {sl1, sl2, sl3, sl4});
assert(len(maplls) == 2);
assert(maplls[convert(bool, sl1)] == convert(bool, sl2));
assert(maplls[convert(bool, sl3)] == convert(bool, sl4));
maplbs: map [bool] of bytes = convert(map [bool] of bytes, {sl1, sl2, sl3, sl4});
assert(len(maplbs) == 2);
assert(maplbs[convert(bool, sl1)] == convert(bytes, sl2));
assert(maplbs[convert(bool, sl3)] == convert(bytes, sl4));
maplss: map [bool] of string = convert(map [bool] of string, {sl1, sl2, sl3, sl4});
assert(len(maplss) == 2);
assert(maplss[convert(bool, sl1)] == sl2);
assert(maplss[convert(bool, sl3)] == sl4);
mapbls: map [bytes] of bool = convert(map [bytes] of bool, {sl1, sl2, sl3, sl4});
assert(len(mapbls) == 2);
assert(mapbls[convert(bytes, sl1)] == convert(bool, sl2));
assert(mapbls[convert(bytes, sl3)] == convert(bool, sl4));
mapbbs: map [bytes] of bytes = convert(map [bytes] of bytes, {sb1, sb2, sb3, sb4});
assert(len(mapbbs) == 2);
assert(mapbbs[convert(bytes, sb1)] == convert(bytes, sb2));
assert(mapbbs[convert(bytes, sb3)] == convert(bytes, sb4));
mapbps: map [bytes] of fingerprint = convert(map [bytes] of fingerprint, {sp1, sp2, sp3, sp4});
assert(len(mapbps) == 2);
assert(mapbps[convert(bytes, sp1)] == convert(fingerprint, sp2));
assert(mapbps[convert(bytes, sp3)] == convert(fingerprint, sp4));
mapbfs: map [bytes] of float = convert(map [bytes] of float, {sf1, sf2, sf3, sf4});
assert(len(mapbfs) == 2);
assert(mapbfs[convert(bytes, sf1)] == convert(float, sf2));
assert(mapbfs[convert(bytes, sf3)] == convert(float, sf4));
mapbis: map [bytes] of int = convert(map [bytes] of int, {si1, si2, si3, si4});
assert(len(mapbis) == 2);
assert(mapbis[convert(bytes, si1)] == convert(int, si2, 10));
assert(mapbis[convert(bytes, si3)] == convert(int, si4, 10));
mapbss: map [bytes] of string = convert(map [bytes] of string, {sb1, sb2, sb3, sb4});
assert(len(mapbss) == 2);
assert(mapbss[convert(bytes, sb1)] == sb2);
assert(mapbss[convert(bytes, sb3)] == sb4);
mapbts: map [bytes] of time = convert(map [bytes] of time, {st1, st2, st3, st4});
assert(len(mapbts) == 2);
assert(mapbts[convert(bytes, st1)] == convert(time, st2));
assert(mapbts[convert(bytes, st3)] == convert(time, st4));
mapbus: map [bytes] of uint = convert(map [bytes] of uint, {su1, su2, su3, su4});
assert(len(mapbus) == 2);
assert(mapbus[convert(bytes, su1)] == convert(uint, su2, 10));
assert(mapbus[convert(bytes, su3)] == convert(uint, su4, 10));
mappbs: map [fingerprint] of bytes = convert(map [fingerprint] of bytes, {sp1, sp2, sp3, sp4});
assert(len(mappbs) == 2);
assert(mappbs[convert(fingerprint, sp1)] == convert(bytes, sp2));
assert(mappbs[convert(fingerprint, sp3)] == convert(bytes, sp4));
mappps: map [fingerprint] of fingerprint = convert(map [fingerprint] of fingerprint, {sp1, sp2, sp3, sp4});
assert(len(mappps) == 2);
assert(mappps[convert(fingerprint, sp1)] == convert(fingerprint, sp2));
assert(mappps[convert(fingerprint, sp3)] == convert(fingerprint, sp4));
mappfs: map [fingerprint] of float = convert(map [fingerprint] of float, {si1, si2, si3, si4});
assert(len(mappfs) == 2);
assert(mappfs[convert(fingerprint, si1)] == convert(float, si2));
assert(mappfs[convert(fingerprint, si3)] == convert(float, si4));
mappis: map [fingerprint] of int = convert(map [fingerprint] of int, {si1, si2, si3, si4});
assert(len(mappis) == 2);
assert(mappis[convert(fingerprint, si1)] == convert(int, si2, 10));
assert(mappis[convert(fingerprint, si3)] == convert(int, si4, 10));
mappss: map [fingerprint] of string = convert(map [fingerprint] of string, {sp1, sp2, sp3, sp4});
assert(len(mappss) == 2);
assert(mappss[convert(fingerprint, sp1)] == sp2);
assert(mappss[convert(fingerprint, sp3)] == sp4);
mappus: map [fingerprint] of uint = convert(map [fingerprint] of uint, {si1, si2, si3, si4});
assert(len(mappus) == 2);
assert(mappus[convert(fingerprint, si1)] == convert(uint, si2, 10));
assert(mappus[convert(fingerprint, si3)] == convert(uint, si4, 10));
mapfbs: map [float] of bytes = convert(map [float] of bytes, {sf1, sf2, sf3, sf4});
assert(len(mapfbs) == 2);
assert(mapfbs[convert(float, sf1)] == convert(bytes, sf2));
assert(mapfbs[convert(float, sf3)] == convert(bytes, sf4));
mapfps: map [float] of fingerprint = convert(map [float] of fingerprint, {si1, si2, si3, si4});
assert(len(mapfps) == 2);
assert(mapfps[convert(float, si1)] == convert(fingerprint, si2));
assert(mapfps[convert(float, si3)] == convert(fingerprint, si4));
mapffs: map [float] of float = convert(map [float] of float, {sf1, sf2, sf3, sf4});
assert(len(mapffs) == 2);
assert(mapffs[convert(float, sf1)] == convert(float, sf2));
assert(mapffs[convert(float, sf3)] == convert(float, sf4));
mapfis: map [float] of int = convert(map [float] of int, {si1, si2, si3, si4});
assert(len(mapfis) == 2);
assert(mapfis[convert(float, si1)] == convert(int, si2, 10));
assert(mapfis[convert(float, si3)] == convert(int, si4, 10));
mapfss: map [float] of string = convert(map [float] of string, {sf1, sf2, sf3, sf4});
assert(len(mapfss) == 2);
assert(mapfss[convert(float, sf1)] == sf2);
assert(mapfss[convert(float, sf3)] == sf4);
mapfus: map [float] of uint = convert(map [float] of uint, {si1, si2, si3, si4});
assert(len(mapfus) == 2);
assert(mapfus[convert(float, si1)] == convert(uint, si2, 10));
assert(mapfus[convert(float, si3)] == convert(uint, si4, 10));
mapibs: map [int] of bytes = convert(map [int] of bytes, {si1, si2, si3, si4});
assert(len(mapibs) == 2);
assert(mapibs[convert(int, si1, 10)] == convert(bytes, si2));
assert(mapibs[convert(int, si3, 10)] == convert(bytes, si4));
mapips: map [int] of fingerprint = convert(map [int] of fingerprint, {si1, si2, si3, si4});
assert(len(mapips) == 2);
assert(mapips[convert(int, si1, 10)] == convert(fingerprint, si2));
assert(mapips[convert(int, si3, 10)] == convert(fingerprint, si4));
mapifs: map [int] of float = convert(map [int] of float, {si1, si2, si3, si4});
assert(len(mapifs) == 2);
assert(mapifs[convert(int, si1, 10)] == convert(float, si2));
assert(mapifs[convert(int, si3, 10)] == convert(float, si4));
mapiis: map [int] of int = convert(map [int] of int, {si1, si2, si3, si4});
assert(len(mapiis) == 2);
assert(mapiis[convert(int, si1, 10)] == convert(int, si2, 10));
assert(mapiis[convert(int, si3, 10)] == convert(int, si4, 10));
mapiss: map [int] of string = convert(map [int] of string, {si1, si2, si3, si4});
assert(len(mapiss) == 2);
assert(mapiss[convert(int, si1, 10)] == si2);
assert(mapiss[convert(int, si3, 10)] == si4);
mapius: map [int] of uint = convert(map [int] of uint, {si1, si2, si3, si4});
assert(len(mapius) == 2);
assert(mapius[convert(int, si1, 10)] == convert(uint, si2, 10));
assert(mapius[convert(int, si3, 10)] == convert(uint, si4, 10));
mapsls: map [string] of bool = convert(map [string] of bool, {sl1, sl2, sl3, sl4});
assert(len(mapsls) == 2);
assert(mapsls[sl1] == convert(bool, sl2));
assert(mapsls[sl3] == convert(bool, sl4));
mapsbs: map [string] of bytes = convert(map [string] of bytes, {sb1, sb2, sb3, sb4});
assert(len(mapsbs) == 2);
assert(mapsbs[sb1] == convert(bytes, sb2));
assert(mapsbs[sb3] == convert(bytes, sb4));
mapsps: map [string] of fingerprint = convert(map [string] of fingerprint, {sp1, sp2, sp3, sp4});
assert(len(mapsps) == 2);
assert(mapsps[sp1] == convert(fingerprint, sp2));
assert(mapsps[sp3] == convert(fingerprint, sp4));
mapsfs: map [string] of float = convert(map [string] of float, {sf1, sf2, sf3, sf4});
assert(len(mapsfs) == 2);
assert(mapsfs[sf1] == convert(float, sf2));
assert(mapsfs[sf3] == convert(float, sf4));
mapsis: map [string] of int = convert(map [string] of int, {si1, si2, si3, si4});
assert(len(mapsis) == 2);
assert(mapsis[si1] == convert(int, si2, 10));
assert(mapsis[si3] == convert(int, si4, 10));
mapsts: map [string] of time = convert(map [string] of time, {st1, st2, st3, st4});
assert(len(mapsts) == 2);
assert(mapsts[st1] == convert(time, st2));
assert(mapsts[st3] == convert(time, st4));
mapsus: map [string] of uint = convert(map [string] of uint, {su1, su2, su3, su4});
assert(len(mapsus) == 2);
assert(mapsus[su1] == convert(uint, su2, 10));
assert(mapsus[su3] == convert(uint, su4, 10));
maptbs: map [time] of bytes = convert(map [time] of bytes, {st1, st2, st3, st4});
assert(len(maptbs) == 2);
assert(maptbs[convert(time, st1)] == convert(bytes, st2));
assert(maptbs[convert(time, st3)] == convert(bytes, st4));
maptss: map [time] of string = convert(map [time] of string, {st1, st2, st3, st4});
assert(len(maptss) == 2);
assert(maptss[convert(time, st1)] == st2);
assert(maptss[convert(time, st3)] == st4);
maptts: map [time] of time = convert(map [time] of time, {st1, st2, st3, st4});
assert(len(maptts) == 2);
assert(maptts[convert(time, st1)] == convert(time, st2));
assert(maptts[convert(time, st3)] == convert(time, st4));
mapubs: map [uint] of bytes = convert(map [uint] of bytes, {su1, su2, su3, su4});
assert(len(mapubs) == 2);
assert(mapubs[convert(uint, su1, 10)] == convert(bytes, su2));
assert(mapubs[convert(uint, su3, 10)] == convert(bytes, su4));
mapups: map [uint] of fingerprint = convert(map [uint] of fingerprint, {si1, si2, si3, si4});
assert(len(mapups) == 2);
assert(mapups[convert(uint, si1, 10)] == convert(fingerprint, si2));
assert(mapups[convert(uint, si3, 10)] == convert(fingerprint, si4));
mapufs: map [uint] of float = convert(map [uint] of float, {si1, si2, si3, si4});
assert(len(mapufs) == 2);
assert(mapufs[convert(uint, si1, 10)] == convert(float, si2));
assert(mapufs[convert(uint, si3, 10)] == convert(float, si4));
mapuis: map [uint] of int = convert(map [uint] of int, {si1, si2, si3, si4});
assert(len(mapuis) == 2);
assert(mapuis[convert(uint, si1, 10)] == convert(int, si2, 10));
assert(mapuis[convert(uint, si3, 10)] == convert(int, si4, 10));
mapuss: map [uint] of string = convert(map [uint] of string, {su1, su2, su3, su4});
assert(len(mapuss) == 2);
assert(mapuss[convert(uint, su1, 10)] == su2);
assert(mapuss[convert(uint, su3, 10)] == su4);
mapuus: map [uint] of uint = convert(map [uint] of uint, {su1, su2, su3, su4});
assert(len(mapuus) == 2);
assert(mapuus[convert(uint, su1, 10)] == convert(uint, su2, 10));
assert(mapuus[convert(uint, su3, 10)] == convert(uint, su4, 10));
mapiit: map [int] of int = convert(map [int] of int, {t1, t2, t3, t4});
assert(len(mapiit) == 2);
assert(mapiit[convert(int, t1)] == convert(int, t2));
assert(mapiit[convert(int, t3)] == convert(int, t4));
mapist: map [int] of string = convert(map [int] of string, {t1, t2, t3, t4});
assert(len(mapist) == 2);
assert(mapist[convert(int, t1)] == convert(string, t2));
assert(mapist[convert(int, t3)] == convert(string, t4));
mapitt: map [int] of time = convert(map [int] of time, {t1, t2, t3, t4});
assert(len(mapitt) == 2);
assert(mapitt[convert(int, t1)] == t2);
assert(mapitt[convert(int, t3)] == t4);
mapiut: map [int] of uint = convert(map [int] of uint, {t1, t2, t3, t4});
assert(len(mapiut) == 2);
assert(mapiut[convert(int, t1)] == convert(uint, t2));
assert(mapiut[convert(int, t3)] == convert(uint, t4));
mapsit: map [string] of int = convert(map [string] of int, {t1, t2, t3, t4});
assert(len(mapsit) == 2);
assert(mapsit[convert(string, t1)] == convert(int, t2));
assert(mapsit[convert(string, t3)] == convert(int, t4));
mapsst: map [string] of string = convert(map [string] of string, {t1, t2, t3, t4});
assert(len(mapsst) == 2);
assert(mapsst[convert(string, t1)] == convert(string, t2));
assert(mapsst[convert(string, t3)] == convert(string, t4));
mapstt: map [string] of time = convert(map [string] of time, {t1, t2, t3, t4});
assert(len(mapstt) == 2);
assert(mapstt[convert(string, t1)] == t2);
assert(mapstt[convert(string, t3)] == t4);
mapsut: map [string] of uint = convert(map [string] of uint, {t1, t2, t3, t4});
assert(len(mapsut) == 2);
assert(mapsut[convert(string, t1)] == convert(uint, t2));
assert(mapsut[convert(string, t3)] == convert(uint, t4));
maptit: map [time] of int = convert(map [time] of int, {t1, t2, t3, t4});
assert(len(maptit) == 2);
assert(maptit[t1] == convert(int, t2));
assert(maptit[t3] == convert(int, t4));
maptst: map [time] of string = convert(map [time] of string, {t1, t2, t3, t4});
assert(len(maptst) == 2);
assert(maptst[t1] == convert(string, t2));
assert(maptst[t3] == convert(string, t4));
maptut: map [time] of uint = convert(map [time] of uint, {t1, t2, t3, t4});
assert(len(maptut) == 2);
assert(maptut[t1] == convert(uint, t2));
assert(maptut[t3] == convert(uint, t4));
mapuit: map [uint] of int = convert(map [uint] of int, {t1, t2, t3, t4});
assert(len(mapuit) == 2);
assert(mapuit[convert(uint, t1)] == convert(int, t2));
assert(mapuit[convert(uint, t3)] == convert(int, t4));
mapust: map [uint] of string = convert(map [uint] of string, {t1, t2, t3, t4});
assert(len(mapust) == 2);
assert(mapust[convert(uint, t1)] == convert(string, t2));
assert(mapust[convert(uint, t3)] == convert(string, t4));
maputt: map [uint] of time = convert(map [uint] of time, {t1, t2, t3, t4});
assert(len(maputt) == 2);
assert(maputt[convert(uint, t1)] == t2);
assert(maputt[convert(uint, t3)] == t4);
mapuut: map [uint] of uint = convert(map [uint] of uint, {t1, t2, t3, t4});
assert(len(mapuut) == 2);
assert(mapuut[convert(uint, t1)] == convert(uint, t2));
assert(mapuut[convert(uint, t3)] == convert(uint, t4));
mapppu: map [fingerprint] of fingerprint = convert(map [fingerprint] of fingerprint, {u1, u2, u3, u4});
assert(len(mapppu) == 2);
assert(mapppu[convert(fingerprint, u1)] == convert(fingerprint, u2));
assert(mapppu[convert(fingerprint, u3)] == convert(fingerprint, u4));
mappfu: map [fingerprint] of float = convert(map [fingerprint] of float, {u1, u2, u3, u4});
assert(len(mappfu) == 2);
assert(mappfu[convert(fingerprint, u1)] == convert(float, u2));
assert(mappfu[convert(fingerprint, u3)] == convert(float, u4));
mappiu: map [fingerprint] of int = convert(map [fingerprint] of int, {u1, u2, u3, u4});
assert(len(mappiu) == 2);
assert(mappiu[convert(fingerprint, u1)] == convert(int, u2));
assert(mappiu[convert(fingerprint, u3)] == convert(int, u4));
mappsu: map [fingerprint] of string = convert(map [fingerprint] of string, {u1, u2, u3, u4});
assert(len(mappsu) == 2);
assert(mappsu[convert(fingerprint, u1)] == convert(string, u2));
assert(mappsu[convert(fingerprint, u3)] == convert(string, u4));
mapptu: map [fingerprint] of time = convert(map [fingerprint] of time, {u1, u2, u3, u4});
assert(len(mapptu) == 2);
assert(mapptu[convert(fingerprint, u1)] == convert(time, u2));
assert(mapptu[convert(fingerprint, u3)] == convert(time, u4));
mappuu: map [fingerprint] of uint = convert(map [fingerprint] of uint, {u1, u2, u3, u4});
assert(len(mappuu) == 2);
assert(mappuu[convert(fingerprint, u1)] == u2);
assert(mappuu[convert(fingerprint, u3)] == u4);
mapfpu: map [float] of fingerprint = convert(map [float] of fingerprint, {u1, u2, u3, u4});
assert(len(mapfpu) == 2);
assert(mapfpu[convert(float, u1)] == convert(fingerprint, u2));
assert(mapfpu[convert(float, u3)] == convert(fingerprint, u4));
mapffu: map [float] of float = convert(map [float] of float, {u1, u2, u3, u4});
assert(len(mapffu) == 2);
assert(mapffu[convert(float, u1)] == convert(float, u2));
assert(mapffu[convert(float, u3)] == convert(float, u4));
mapfiu: map [float] of int = convert(map [float] of int, {u1, u2, u3, u4});
assert(len(mapfiu) == 2);
assert(mapfiu[convert(float, u1)] == convert(int, u2));
assert(mapfiu[convert(float, u3)] == convert(int, u4));
mapfsu: map [float] of string = convert(map [float] of string, {u1, u2, u3, u4});
assert(len(mapfsu) == 2);
assert(mapfsu[convert(float, u1)] == convert(string, u2));
assert(mapfsu[convert(float, u3)] == convert(string, u4));
mapftu: map [float] of time = convert(map [float] of time, {u1, u2, u3, u4});
assert(len(mapftu) == 2);
assert(mapftu[convert(float, u1)] == convert(time, u2));
assert(mapftu[convert(float, u3)] == convert(time, u4));
mapfuu: map [float] of uint = convert(map [float] of uint, {u1, u2, u3, u4});
assert(len(mapfuu) == 2);
assert(mapfuu[convert(float, u1)] == u2);
assert(mapfuu[convert(float, u3)] == u4);
mapipu: map [int] of fingerprint = convert(map [int] of fingerprint, {u1, u2, u3, u4});
assert(len(mapipu) == 2);
assert(mapipu[convert(int, u1)] == convert(fingerprint, u2));
assert(mapipu[convert(int, u3)] == convert(fingerprint, u4));
mapifu: map [int] of float = convert(map [int] of float, {u1, u2, u3, u4});
assert(len(mapifu) == 2);
assert(mapifu[convert(int, u1)] == convert(float, u2));
assert(mapifu[convert(int, u3)] == convert(float, u4));
mapiiu: map [int] of int = convert(map [int] of int, {u1, u2, u3, u4});
assert(len(mapiiu) == 2);
assert(mapiiu[convert(int, u1)] == convert(int, u2));
assert(mapiiu[convert(int, u3)] == convert(int, u4));
mapisu: map [int] of string = convert(map [int] of string, {u1, u2, u3, u4});
assert(len(mapisu) == 2);
assert(mapisu[convert(int, u1)] == convert(string, u2));
assert(mapisu[convert(int, u3)] == convert(string, u4));
mapitu: map [int] of time = convert(map [int] of time, {u1, u2, u3, u4});
assert(len(mapitu) == 2);
assert(mapitu[convert(int, u1)] == convert(time, u2));
assert(mapitu[convert(int, u3)] == convert(time, u4));
mapiuu: map [int] of uint = convert(map [int] of uint, {u1, u2, u3, u4});
assert(len(mapiuu) == 2);
assert(mapiuu[convert(int, u1)] == u2);
assert(mapiuu[convert(int, u3)] == u4);
mapspu: map [string] of fingerprint = convert(map [string] of fingerprint, {u1, u2, u3, u4});
assert(len(mapspu) == 2);
assert(mapspu[convert(string, u1)] == convert(fingerprint, u2));
assert(mapspu[convert(string, u3)] == convert(fingerprint, u4));
mapsfu: map [string] of float = convert(map [string] of float, {u1, u2, u3, u4});
assert(len(mapsfu) == 2);
assert(mapsfu[convert(string, u1)] == convert(float, u2));
assert(mapsfu[convert(string, u3)] == convert(float, u4));
mapsiu: map [string] of int = convert(map [string] of int, {u1, u2, u3, u4});
assert(len(mapsiu) == 2);
assert(mapsiu[convert(string, u1)] == convert(int, u2));
assert(mapsiu[convert(string, u3)] == convert(int, u4));
mapssu: map [string] of string = convert(map [string] of string, {u1, u2, u3, u4});
assert(len(mapssu) == 2);
assert(mapssu[convert(string, u1)] == convert(string, u2));
assert(mapssu[convert(string, u3)] == convert(string, u4));
mapstu: map [string] of time = convert(map [string] of time, {u1, u2, u3, u4});
assert(len(mapstu) == 2);
assert(mapstu[convert(string, u1)] == convert(time, u2));
assert(mapstu[convert(string, u3)] == convert(time, u4));
mapsuu: map [string] of uint = convert(map [string] of uint, {u1, u2, u3, u4});
assert(len(mapsuu) == 2);
assert(mapsuu[convert(string, u1)] == u2);
assert(mapsuu[convert(string, u3)] == u4);
maptpu: map [time] of fingerprint = convert(map [time] of fingerprint, {u1, u2, u3, u4});
assert(len(maptpu) == 2);
assert(maptpu[convert(time, u1)] == convert(fingerprint, u2));
assert(maptpu[convert(time, u3)] == convert(fingerprint, u4));
maptfu: map [time] of float = convert(map [time] of float, {u1, u2, u3, u4});
assert(len(maptfu) == 2);
assert(maptfu[convert(time, u1)] == convert(float, u2));
assert(maptfu[convert(time, u3)] == convert(float, u4));
maptiu: map [time] of int = convert(map [time] of int, {u1, u2, u3, u4});
assert(len(maptiu) == 2);
assert(maptiu[convert(time, u1)] == convert(int, u2));
assert(maptiu[convert(time, u3)] == convert(int, u4));
maptsu: map [time] of string = convert(map [time] of string, {u1, u2, u3, u4});
assert(len(maptsu) == 2);
assert(maptsu[convert(time, u1)] == convert(string, u2));
assert(maptsu[convert(time, u3)] == convert(string, u4));
mapttu: map [time] of time = convert(map [time] of time, {u1, u2, u3, u4});
assert(len(mapttu) == 2);
assert(mapttu[convert(time, u1)] == convert(time, u2));
assert(mapttu[convert(time, u3)] == convert(time, u4));
maptuu: map [time] of uint = convert(map [time] of uint, {u1, u2, u3, u4});
assert(len(maptuu) == 2);
assert(maptuu[convert(time, u1)] == u2);
assert(maptuu[convert(time, u3)] == u4);
mapupu: map [uint] of fingerprint = convert(map [uint] of fingerprint, {u1, u2, u3, u4});
assert(len(mapupu) == 2);
assert(mapupu[u1] == convert(fingerprint, u2));
assert(mapupu[u3] == convert(fingerprint, u4));
mapufu: map [uint] of float = convert(map [uint] of float, {u1, u2, u3, u4});
assert(len(mapufu) == 2);
assert(mapufu[u1] == convert(float, u2));
assert(mapufu[u3] == convert(float, u4));
mapuiu: map [uint] of int = convert(map [uint] of int, {u1, u2, u3, u4});
assert(len(mapuiu) == 2);
assert(mapuiu[u1] == convert(int, u2));
assert(mapuiu[u3] == convert(int, u4));
mapusu: map [uint] of string = convert(map [uint] of string, {u1, u2, u3, u4});
assert(len(mapusu) == 2);
assert(mapusu[u1] == convert(string, u2));
assert(mapusu[u3] == convert(string, u4));
maputu: map [uint] of time = convert(map [uint] of time, {u1, u2, u3, u4});
assert(len(maputu) == 2);
assert(maputu[u1] == convert(time, u2));
assert(maputu[u3] == convert(time, u4));
