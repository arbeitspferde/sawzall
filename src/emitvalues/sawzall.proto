// Copyright 2010 Google Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//      http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Representation of Sawzall table types
//
// Note: The protocol buffer infrastructure does not yet support
// recursive types.  To get around this, recursion values
// are implemented by encoding the value in proto format inside
// a string.  Decoding such values requires code to explicitly
// call the PB decoder.

package sawzall;

message SzlFieldProto {
  required string Label = 1;
  required string Type = 2;  // proto encoding of the type
  optional int32 Tag = 3;  // unique numeric tag to be set for proto tuple fields
}

message SzlTypeProto {
  // The constants in szltype.h must be kept in sync with these.
  enum KIND {
    VOID = 0;

    // Basic types
    BOOL = 1;
    BYTES = 2;
    FINGERPRINT = 3;
    FLOAT = 4;
    INT = 5;
    STRING = 6;
    TIME = 7;

    // Groupings
    TUPLE = 8;
    ARRAY = 9;
    MAP = 10;

    // Table types
    TABLE = 11;
    
    // Functions (for completeness)
    FUNCTION = 12;
    
    // Last value = Number of types
    NKIND = 13;
  };
  
  required int32 Kind = 1;
  optional string Table = 2;    // name of the table type, if Kind == TABLE

  optional int32 Param = 3;
  repeated SzlFieldProto Indices = 4;
  repeated SzlFieldProto Fields = 5;
  optional SzlFieldProto Element = 6;
  optional SzlFieldProto Weight = 7;
};
