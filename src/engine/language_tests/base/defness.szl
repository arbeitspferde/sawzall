# Copyright 2010 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# testing assignment of undefined values in initialization assignments
a: array of int;
x: int = a[0];
assert(!def(x));


# testing the ___undefine() intrinsic, all types
{ v: bool = false;
  assert(def(v));
  ___undefine(v);
  assert(!def(v));
}

{ v: bytes = {};
  assert(def(v));
  ___undefine(v);
  assert(!def(v));
}

{ v: fingerprint = 0p;
  assert(def(v));
  ___undefine(v);
  assert(!def(v));
}

{ v: float = 0.0;
  assert(def(v));
  ___undefine(v);
  assert(!def(v));
}

{ v: int = 0;
  assert(def(v));
  ___undefine(v);
  assert(!def(v));
}

{ v: string = "";
  assert(def(v));
  ___undefine(v);
  assert(!def(v));
}

{ v: time = 0t;
  assert(def(v));
  ___undefine(v);
  assert(!def(v));
}

{ v: array of int = {};
  assert(def(v));
  ___undefine(v);
  assert(!def(v));
}

{ v: map [bytes] of string = { { 'a' } : "a" };
  assert(def(v));
  ___undefine(v);
  assert(!def(v));
}

{ v: { t: time } = { 1t };
  assert(def(v));
  ___undefine(v);
  assert(!def(v));
}


# using undefine in inner functions

{ v: { t: time } = { 1t };
  assert(def(v));

  undefine_v: function() {
    ___undefine(v);
  };

  undefine_v();
  assert(!def(v));
}

f: function(x: int): bool {
  v: int = x;
  assert(def(v));

  undefine_v: function() {
    ___undefine(v);
  };

  undefine_v();
  return def(v);
};
assert(! f(-1));


# def() should work in static initializers

static foo := def(nrand(-1));
