assert(true == true);
assert(convert(bool, "true") == true);
assert(convert(bool, "false") == false);
assert(convert(bool, "Todo") == true);
assert(convert(bool, "") == false);
assert(convert(bool, "not true") == false);
assert(B"hello" == B"hello");
assert(convert(bytes, 0x8877665544332211P) == X"8877665544332211");
assert(convert(bytes, 1, "varint") == X"01");
assert(convert(bytes, 1, "zigzag") == X"02");
assert(convert(bytes, 1, "fixed32-big") == X"00000001");
assert(convert(bytes, 1, "fixed64-big") == X"0000000000000001");
assert(convert(bytes, 1, "fixed32-little") == X"01000000");
assert(convert(bytes, 1, "fixed64-little") == X"0100000000000000");
assert(convert(bytes, 1, "szl") == X"0000000000000001");
assert(!def(convert(bytes, 1, "bad encoding")));
assert(convert(bytes, "") == B"");
assert(convert(bytes, "abcd") == B"abcd");
assert(convert(bytes, "abcd", "hex") == X"ABCD");
assert(convert(bytes, "üýþ") == X"C3BCC3BDC3BE");
assert(convert(bytes, "üýþ", "latin-1") == X"FCFDFE");
assert(convert(bytes, "日本語") == X"E697A5E69CACE8AA9E");
assert(convert(bytes, "日本語", "utf-8") == X"E697A5E69CACE8AA9E");
assert(!def(convert(bytes, "", "bad encoding")));
assert(convert(bytes, 1U, "varint") == X"01");
assert(convert(bytes, 1U, "zigzag") == X"02");
assert(convert(bytes, 1U, "fixed32-big") == X"00000001");
assert(convert(bytes, 1U, "fixed64-big") == X"0000000000000001");
assert(convert(bytes, 1U, "fixed32-little") == X"01000000");
assert(convert(bytes, 1U, "fixed64-little") == X"0100000000000000");
assert(convert(bytes, 1U, "szl") == X"0000000000000001");
assert(!def(convert(bytes, 1U, "bad encoding")));
assert(convert(fingerprint, X"0102030401020304") == 0x0102030401020304P);
assert(0x0000000000000001P == 0x0000000000000001P);
assert(convert(fingerprint, 255) == 0x00000000000000ffP);
assert(convert(fingerprint, "12345") == 0x0000000000003039P);
assert(convert(fingerprint, "12345", 10) == 0x0000000000003039P);
assert(convert(fingerprint, "12345", 16) == 0x0000000000012345P);
assert(!def(convert(fingerprint, "")));
assert(!def(convert(fingerprint, "not a fingerprint")));
assert(!def(convert(fingerprint, "12345", 1)));
assert(convert(fingerprint, 255U) == 0x00000000000000ffP);
assert(2.7 == 2.7);
assert(convert(float, 255) == 255.0);
assert(convert(float, 0) == 0.0);
assert(convert(float, -255) == -255.0);
assert(convert(float, "3.14e2") == 314.0);
assert(!def(convert(float, "")));
assert(!def(convert(float, "not a float")));
assert(convert(float, 255U) == 255.0);
assert(convert(int, true) == 1);
assert(convert(int, false) == 0);
assert(convert(int, X"01", "varint") == 1);
assert(convert(int, X"02", "zigzag") == 1);
assert(convert(int, X"00000001", "fixed32-big") == 1);
assert(convert(int, X"0000000000000001", "fixed64-big") == 1);
assert(convert(int, X"01000000", "fixed32-little") == 1);
assert(convert(int, X"0100000000000000", "fixed64-little") == 1);
assert(convert(int, X"0000000000000001", "szl") == 1);
assert(!def(convert(int, B"", "bad encoding")));
assert(convert(int, 0x0000000000000000P) == 0);
assert(convert(int, 27000.0) == 27000);
assert(convert(int, 2.7) == 2);
assert(convert(int, -0.3) == 0);
assert(1234 == 1234);
assert(convert(int, "171", 0) == 171);
assert(convert(int, "-171", 0) == -171);
assert(convert(int, "0253", 0) == 171);
assert(convert(int, "0xAB", 0) == 171);
assert(convert(int, "377", 10) == 377);
assert(convert(int, "377", 8) == 255);
assert(convert(int, "377", 16) == 887);
assert(convert(int, "1010101", 2) == 85);
assert(!def(convert(int, "")));
assert(!def(convert(int, "true")));
assert(!def(convert(int, "not an int", 0)));
assert(!def(convert(int, "4", 2)));
assert(!def(convert(int, "42.", 0)));
assert(!def(convert(int, "0x0", 10)));
assert(!def(convert(int, "0", 1)));
assert(!def(convert(int, "0", 37)));
assert(convert(int, HOUR) == 3600000000);
assert(convert(int, 0U) == 0);
assert(convert(int, 1234U) == 1234);
assert(convert(int, 18446744073709551615U) == -1);
assert(convert(string, true) == "true");
assert(convert(string, false) == "false");
assert(convert(string, B"abcd") == "abcd");
assert(convert(string, X"ABCD", "hex") == "abcd");
assert(convert(string, X"C3BCC3BDC3BE") == "üýþ");
assert(convert(string, X"FCFDFE", "latin-1") == "üýþ");
assert(convert(string, X"E697A5E69CACE8AA9E") == "日本語");
assert(convert(string, X"E697A5E69CACE8AA9E", "utf-8") == "日本語");
assert(!def(convert(string, B"", "bad encoding")));
assert(convert(string, 0x0000000000000000P) == "0x0000000000000000p");
assert(convert(string, 27000.0) == "27000.0");
assert(convert(string, 171) == "171");
assert(convert(string, 171) == "171");
assert(convert(string, 171) == "171");
assert(convert(string, -171) == "-171");
assert(convert(string, 377, 10) == "377");
assert(convert(string, 377, 8) == "571");
assert(convert(string, 377, 16) == "179");
assert(convert(string, 101, 2) == "1100101");
assert(!def(convert(string, 1, 1)));
assert(!def(convert(string, 1, 37)));
assert("adfadf" == "adfadf");
assert(convert(string, HOUR) == "Wed Dec 31 17:00:00 PST 1969");
assert(convert(string, HOUR, "EST") == "Wed Dec 31 20:00:00 EST 1969");
assert(convert(string, HOUR, "America/New_York") == "Wed Dec 31 20:00:00 EST 1969");
assert(!def(convert(string, HOUR, "bad timezone")));
assert(convert(string, 171U) == "171");
assert(convert(string, 171U) == "171");
assert(convert(string, 171U) == "171");
assert(convert(string, 377U, 10) == "377");
assert(convert(string, 377U, 8) == "571");
assert(convert(string, 377U, 16) == "179");
assert(!def(convert(string, 1U, 1)));
assert(!def(convert(string, 1U, 37)));
assert(convert(time, 0) == 0T);
assert(convert(time, ((24 * 60) * 60) * 1000000) == 86400000000T);
assert(convert(time, 1270151981123456) == 1270151981123456T);
assert(convert(time, "Wed Dec 31 17:00:00 PST 1969") == HOUR);
assert(convert(time, "Wed Dec 31 20:00:00 EST 1969", "PST") == HOUR);
assert(convert(time, "Wed Dec 31 20:00:00 EST 1969", "America/Los_Angeles") == HOUR);
assert(convert(time, "Wed Dec 31 17:00:00 PST 1969", "bad tz is ignored") == HOUR);
assert(convert(time, "Wed Dec 31 17:00:00 PST 1969") == HOUR);
assert(convert(time, "Wed Dec 31 17:00 PST 1969") == HOUR);
assert(convert(time, "Wed Dec 31 17 PST 1969") == HOUR);
assert(convert(time, "Dec 31 17:00 PST 1969") == HOUR);
assert(convert(time, "Dec 31 17:00 1969") == HOUR);
assert(!def(convert(time, "")));
assert(!def(convert(time, "not a time")));
assert(189302400000000T == 189302400000000T);
assert(convert(time, 1270151981123456U) == 1270151981123456T);
assert(convert(uint, true) == 1U);
assert(convert(uint, false) == 0U);
assert(convert(uint, X"01", "varint") == 1U);
assert(convert(uint, X"02", "zigzag") == 1U);
assert(convert(uint, X"00000001", "fixed32-big") == 1U);
assert(convert(uint, X"0000000000000001", "fixed64-big") == 1U);
assert(convert(uint, X"01000000", "fixed32-little") == 1U);
assert(convert(uint, X"0100000000000000", "fixed64-little") == 1U);
assert(convert(uint, X"0000000000000001", "szl") == 1U);
assert(!def(convert(uint, B"", "bad encoding")));
assert(convert(uint, 0x0000000000000000P) == 0U);
assert(convert(uint, 27000.0) == 27000U);
assert(convert(uint, 0) == 0U);
assert(convert(uint, 1234) == 1234U);
assert(convert(uint, -1) == 18446744073709551615U);
assert(convert(uint, "171", 0) == 171U);
assert(convert(uint, "-171", 0) == 18446744073709551445U);
assert(convert(uint, "0253", 0) == 171U);
assert(convert(uint, "0xAB", 0) == 171U);
assert(convert(uint, "377", 10) == 377U);
assert(convert(uint, "377", 8) == 255U);
assert(convert(uint, "377", 16) == 887U);
assert(convert(uint, "101011", 2) == 43U);
assert(!def(convert(uint, "", 0)));
assert(!def(convert(uint, "not a uint", 0)));
assert(!def(convert(uint, "4", 2)));
assert(!def(convert(uint, "42.", 0)));
assert(!def(convert(uint, "0x0", 10)));
assert(!def(convert(uint, "0", 1)));
assert(!def(convert(uint, "0", 37)));
assert(convert(uint, HOUR) == 3600000000U);
assert(0U == 0U);
p: fingerprint = 0x8877665544332211P;
b: bytes = {136, 119, 102, 85, 68, 51, 34, 17};
assert(convert(fingerprint, b) == p);
assert(convert(bytes, p) == b);
